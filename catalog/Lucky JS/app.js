const FLEX = require('./flex.json'); //–ê–ê–ê–ê–ê–ê–ê–ê–ê, –≠–¢–û –ñ–ï –°–ê–ú –§–õ–ï–ö–°!!!!!!
const VODKA = require('./vodka.json');
const BANS = require('./bans.json');
const fs = require("fs"); 
setInterval(function(){
	fs.writeFileSync('./flex.json', JSON.stringify(FLEX, null, '\t')) 
	fs.writeFileSync('./vodka.json', JSON.stringify(VODKA, null, '\t'))
	fs.writeFileSync('./bans.json', JSON.stringify(BANS, null, '\t'))    
}, 1500);

const qr = require('@vkontakte/vk-qr/dist/umd/qrCodeGenerator');
var svg2img = require('svg2img');
const QRReader = require('qrcode-reader');
const jimp = require('jimp');
var Qiwi = require('node-qiwi-api').Qiwi; 
var Wallet = new Qiwi('480d456ed');

const playstation = [
	{
		name: 'Microsoft Xbox One S',
		cost: 19999,
		id: 1
	},
	{
		name: 'Microsoft Xbox One',
		cost: 24999,
		id: 2
	},
	{
		name: 'Sony PlayStation 4 Slim',
		cost: 25999,
		id: 3
	},
	{
		name: 'Microsoft Xbox One X',
		cost: 37999,
		id: 4
	},
	{
		name: 'Sony PlayStation 4 Pro',
		cost: 46999,
		id: 5
	}
];
const comps = [
	{
		name: '–ù–æ—É—Ç–±—É–∫ Acer Aspire 3',
		cost: 18200,
		id: 1
	},
	{
		name: '–ù–æ—É—Ç–±—É–∫ Lenovo Ideapad 330-15IKB ',
		cost: 32300,
		id: 2
	},
	{
		name: '–ù–æ—É—Ç–±—É–∫ Acer Predator Helios 300 ',
		cost: 60700,
		id: 3
	},
	{
		name: '–ù–æ—É—Ç–±—É–∫ Acer Predator Triton',
		cost: 157100,
		id: 4
	},
	{
		name: '–ù–æ—É—Ç–±—É–∫ Apple MacBook Pro',
		cost: 165600,
		id: 5
	}
];

const APARTMENTS = [
	{
		name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
		cost: 15990,
		id: 1
	},
	{
		name: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
		cost: 250990,
		id: 2
	},
	{
		name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Lucky Life',
		cost: 569990,
		id: 3
	},
	{
		name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç–æ–º',
		cost: 6999990,
		id: 4
	},
	{
		name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã',
		cost: 15000000,
		id: 5
	}
];
const phones = [
	{
		name: 'Samsung Galaxy A10',
		cost: 7900,
		id: 1
	},
	{
		name: 'Samsung Galaxy J4 Plus',
		cost: 10800,
		id: 2
	},
	{
		name: 'Meizu 15 Plus',
		cost: 18100,
		id: 3
	},
	{
		name: 'Apple iPhone 6S',
		cost: 22400,
		id: 4
	},
	{
		name: 'Apple iPhone Xs Max',
		cost: 126800,
		id: 5
	}
];
const HOMES = [
	{
		name: '–°—Ç–∞—Ä—ã–π –∞–Ω–≥–∞—Ä',
		cost: 6500,
		id: 1
	},
	{
		name: '–î–æ–º –≤ –∫–æ–Ω—é—à–Ω–µ',
		cost: 10800,
		id: 2
	},
	{
		name: '–û—Ç–µ–ª—å',
		cost: 19100,
		id: 3
	},
	{
		name: '–ü—Ä–∏–∑–∏–¥–µ—Ç—Å–Ω–∫–∏–π –¥–æ–º',
		cost: 47100,
		id: 4
	},
	{
		name: '–î–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Lucky Life',
		cost: 192800,
		id: 5
	}
];
const CARS = [
	{
		name: 'BMW Z4 M',
		cost: 3990000,
		id: 1
	},
	{
		name: 'Audio Q7',
		cost:  6520000,
		id: 2
	},
	{
		name: 'BMW X6',
		cost: 6520000,
		id: 3
	},
	{
		name: 'Tesla Roadster',
		cost: 15981000,
		id: 4
	},
	{
		name: 'Lamborghini Veneno',
		cost: 297000000,
		id: 5
	}
];
const pets = [
	{
		name: '–ö–æ—à–∫–∞',
		cost: 100,
		icon: "üêà",
		min: 50,
		max: 150,
		id: 1
	},
	{
		name: '–°–æ–±–∞–∫–∞',
		cost:  500,
		icon: "üêï",
		min: 100,
		max: 270,
		id: 2
	},
	{
		name: '–ü–æ–ø—É–≥–∞–π',
		cost: 1000,
		icon: "üê¶",
		min: 250,
		max: 340,
		id: 3
	},
	{
		name: '–•–æ–º—è–∫',
		cost: 1700,
		icon: "üêπ",
		min: 300,
		max: 530,
		id: 4
	},
	{
		name: '–ö—Ä–æ–ª–∏–∫',
		cost: 2300,
		icon: "üêá",
		min: 600,
		max: 850,
		id: 5
	}
];
let stats = {
	messages: {
		inbox: 0,
		outbox: 0
	},
	new_users: 0,
	bot_start: Date.now()
}

let top = [];

process.env.TZ = "Europe/Moscow";

const utils = require("./utils");
const mongo = require("mongoose");
const child_process = require('child_process');
const request = require("request");
const mathjs = require("mathjs");
mongo.connect("mongodb://");
const schema = new mongo.Schema({
	uid: Number,
	id: Number,
	balance: Number,
	kredit: Number,
	bank: Number,
	prefix: Boolean,
	reol: Number,
	work: Number,
	flat: Number,
	house: Number,
	tag: String,
	familia: String,
	warn: Number,
	ban: Boolean,
	age: Number,
	days: Number,
	seria: Number,
	pet: Number,
	phealth: Number,
	seriap: Number,
	numberp: Number,
	passport: Boolean,
	regDate: Number,
	document: Number,
	tbonus: Number,
	twork: Number,
	treport: Number,
	tglass: Number,
	ref: Number,
	bantop: Boolean,
	nick: Boolean,
	notifications: Boolean,
	banreport: Boolean,
	banpay: Boolean,
	mention: Boolean,
	donate: Number,
	rass: Boolean,
	buttons: Array,
	partner: 0,
	energy: Number,
	health: Number,
	hunger: Number,
	sleep: Number,
	life: Number,
	sila: Number,
	admin: Number,
	marry: Number,
	stage: Number,
	ebank: Number,
	gamepr: 0,
	kvar: 0,
	car: 0,
	psi: 0,
	comp: 0,
	home: 0,
	phone: 0,
	pohod: 0,
	vipb: Boolean,
	admingive: Number,
	tsafe: Number,
	donable: Number,
	questt: 0,
	questtt: Boolean,
	questc: 0,
	questcc: Boolean,
	questg: 0,
	questgg: Boolean,
	questd: 0,
	questdd: Boolean,
	requests: Array
});

const promoSchema = new mongo.Schema({
	title: String,
	count: Number,
	users: Array,
	sum: Number
});

const logSchema = new mongo.Schema({
	from: Number,
	to: Number,
	date: Number,
	amount: Number
})
const { works } = require("./Earns.js");


const User = mongo.model("User", schema);
const Promo = mongo.model("Promo", promoSchema);
const Log = mongo.model("Log", logSchema);

function genToken(length) {
let a = "abcdefghijklmnopQRstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".split(""); 
let b = []; 
for (let i = 0; i < length; i++) { 
let j = (Math.random() * (a.length - 1)).toFixed(0); 
b[i] = a[j]; 
} 
return b.join(""); 
}
const { VK, Keyboard } = require("vk-io");
const keyboard = Keyboard;
const cheerio = require("cheerio");
let uservk = new VK();
uservk.setOptions({
    token: 'a4f0ed424356f6cfdb20a0cb'
});
const vk = new VK({
	token: "67b907138d34e2dfd0dca160c",
	pollingGroupId: 183894359,
	apiMode: "parallel"
});
const user = new VK({ token: 'none' });

let mentionRegexp = new RegExp(`\\[club${vk.options.pollingGroupId}\\|(.*)\\]`);
const { updates, snippets } = vk;
updates.startPolling();

setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.bank > 0).map(async (x) => { 
			let bankk = Number((x.bank/100*3).toFixed(0))
			x.inc("bank", bankk);
	     	if(x.notifications) vk.api.messages.send({user_id: x.id, message: `üò± [id${x.id}|${x.tag}], –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç - ${utils.spaces(bankk)}‚ÇΩ\n\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º Lucky Bank!`,
	   
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
},
"color": "negative"
}]
]
})
   });

});
	});
}, 3600000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.ebank > 0).map(async (x) => { 
			let ebankk = Number((x.ebank/100*3).toFixed(0))
			x.inc("ebank", ebankk);
	     	if(x.notifications) vk.api.messages.send({user_id: x.id, message: `üò± [id${x.id}|${x.tag}], –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≠–î–µ–ø–æ–∑–∏—Ç - ${utils.spaces(bankk)}‚ÇΩ\n\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º EL DEPOZIT!`,
	   
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
},
"color": "negative"
}]
]
})
   });

});
	});
}, 3600000);

setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.kredit > 0).map(async (x) => { 
			let kreditt = Number((x.kredit/100*11).toFixed(0))
			x.dec("kredit", kreditt);
			x.dec("balance", kreditt)
});
	});
}, 3600000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.phealth < 1).map(async (x) => { 
			x.set("pet", 0);
});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.days > 364).map(async (x) => {
		    x.set("days", 0); 
			x.inc("age", 1);
			x.inc("balance", 1000)
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.energy > 100).map(async (x) => {
		    x.set("energy", 100); 
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.life > 100).map(async (x) => {
		    x.set("life", 100); 
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.health > 100).map(async (x) => {
		    x.set("health", 100); 
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.life < 0).map(async (x) => {
		    x.set("life", 0); 
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.energy < 0).map(async (x) => {
		    x.set("energy", 0); 
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.health < 0).map(async (x) => {
		    x.set("health", 0); 
		});
	});
}, 1000);
setInterval(() => { 
	User.find().then((res) => {
		res.filter((x) => x.health < 1).map(async (x) => { 
			x.set("health", 100);
			x.set("balance", 5000);
			x.set("kredit", 0);
			x.set("bank", 0);
			x.set("work", 0);
			x.set("age", 17);
			x.set("days", 0);
			x.set("seria", 0);
			x.set("seriap", 0);
			x.set("numberp", 0);
			x.set("pet", 0);
			x.set("phealth", 0);
			x.set("passport", false);
			x.set("regDate", 0);
			x.set("tbonus", 0);
			x.set("twork", 0);
			x.set("treport", 0);
			x.set("health", 100);
			x.set("energy", 100);
			x.set("hunger", 100);
			x.set("sleep", 100);
			x.set("life", 100);
			x.set("sila", 0);
			x.set("kvar", 0);
			x.set("car", 0);
			x.set("psi", 0);
			x.set("phone", 0);
			x.set("comp", 0);
			x.set("home", 0);
			x.set("pohod", 0);
});
	});
}, 1000);
setInterval(async () => {
let uptime = require('os-uptime');
let _users = await User.countDocuments();
    uservk.api.status.set({
       group_id: 183894359,
        text: `[Lucky Life] - üåç –†–∞–±–æ—Ç–∞—é! | üôç‚Äç‚ôÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: ${_users} | ‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: ${utils.spaces(stats.messages.inbox).replace(/\s/g, ".")} | üîù –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${unixStampLeft(process.uptime() * 1000)}`
   });
}, 60000);
updates.on("message", async (message, next) => {
	stats.messages.inbox += 1;
	if(/(Infinity)/gi.test(message.text)) return;
	if(BANS.indexOf(message.senderId) !== -1) return message.reply('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.');

	if(message.senderId < 0) return;
	let _user = await User.findOne({ id: message.senderId });

	if(!_user) {
		let [user_info] = await vk.api.call("users.get", { user_id: message.senderId });

		let count = await User.countDocuments();

		let $user = new User({
			uid: count + 1,
			id: message.senderId,
			balance: 5000,
			kredit: 0,
			bank: 0,
			work: 0,
			biz: 0,
			business: 0,
			tag: user_info.first_name,
			familia: user_info.last_name,
			warn: 0,
	        ban: false,
			age: 17,
			days: 0,
			seria: 0,
	        seriap: 0,
	        numberp: 0,
	        pet: 0,
	        phealth: 100,
	        passport: false,
			regDate: 0,
			tbonus: 0,
			twork: 0,
			biz: 0,
			treport: 0,
			tglass: 0,
			xmas: false,
			donate: 0,
			cooldown: 0,
			ref: 0,
			mention: true,
			rass: true,
			notifications: true,
			buttons: ["–ú–µ–Ω—é"],
			energy: 100,
			health: 100,
			hunger: 100,
			sleep: 100,
			life: 100,
			sila: 0,
			admin: 1,
			kvar: 0,
			car: 0,
			psi: 0,
			phone: 0,
			stage: 1,
			ebank: 0,
			gamepr: 0,
			vipb: false,
			admingive: 0,
			partner: 0,
			comp: 0,
			home: 0,
			pohod: 0,
			questt: 0,
			questtt: false,
			questc: 0,
			questcc: false,
			questg: 0,
			questgg: false,
			questd: 0,
			questdd: false,
			requests: []
		});

		await $user.save();
		await vk.api.messages.send({ 
   chat_id: 3, 
   message: `[${unixStamp(getUnix())} ${message.isChat ? "c"+message.chatId+", @id"+message.senderId : "@id"+message.senderId}]: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - @id${message.senderId} ID: ${count + 1}` 
  });
	}
		if(message.hasAttachments('wall')) {
		let user = await User.findOne({ id: message.senderId });
        let url = message.attachments[0].attachments[0].largePhoto;
        console.log(url)
        if(!url)  return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∑–∞–ø–∏—Å—å —Å QR-–ö–æ–¥–æ–º`);
        const img = await jimp.read(url);

        const qr = new QRReader();

          // qrcode-reader's API doesn't support promises, so wrap it
        const value = await new Promise((resolve, reject) => {
            qr.callback = (err, v) => err != null ? reject(err) : resolve(v);
            qr.decode(img.bitmap);
        });

         let promo = await Promo.findOne({ title: value.result });
        if(!promo) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, QR-–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! `);
        if(promo.users.indexOf(message.senderId) !== -1) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç QR-–ø—Ä–æ–º–æ–∫–æ–¥. `);
        
        if(promo.users.length >= promo.count) {
		await promo.remove();
		return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, —É —ç—Ç–æ–≥–æ QR-–ø—Ä–æ–º–æ–∫–æ–¥–∞ –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø.`);

	}

	promo.users.push(message.senderId);
	await promo.save();

	await user.inc("balance", promo.sum);
	return message.reply(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ QR-–ø—Ä–æ–º–æ–∫–æ–¥, –∑–∞—á–∏—Å–ª–µ–Ω–æ: ${utils.spaces(promo.sum)}‚ÇΩ\nüì¢ –û—Å—Ç–∞–ª–æ—Å—å  ${promo.count - promo.users.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`);
} 

    if(message.hasAttachments('photo')) {
    	let user = await User.findOne({ id: message.senderId });
        let url = message.attachments[0].largePhoto;
        if(!url)  return message.reply(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –ø—Ä–∏—à–ª–∏ –º–Ω–µ QR-–ö–æ–¥`);
        const img = await jimp.read(url);

        const qr = new QRReader();

          // qrcode-reader's API doesn't support promises, so wrap it
        const value = await new Promise((resolve, reject) => {
            qr.callback = (err, v) => err != null ? reject(err) : resolve(v);
            qr.decode(img.bitmap);

     

});
        let promo = await Promo.findOne({ title: value.result });
        if(!promo) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, QR-–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        if(promo.users.indexOf(message.senderId) !== -1) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç QR-–ø—Ä–æ–º–æ–∫–æ–¥. `);
        
        if(promo.users.length >= promo.count) {
		await promo.remove();
		return message.reply(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, —É —ç—Ç–æ–≥–æ QR-–ø—Ä–æ–º–æ–∫–æ–¥–∞ –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø.`);

	}

	promo.users.push(message.senderId);
	await promo.save();

	await user.inc("balance", promo.sum);
	return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ QR-–ø—Ä–æ–º–æ–∫–æ–¥, –∑–∞—á–∏—Å–ª–µ–Ω–æ: ${utils.spaces(promo.sum)}‚ÇΩ\nüì¢ –û—Å—Ç–∞–ª–æ—Å—å  ${promo.count - promo.users.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`);
} 
	let follow = await vk.api.call("groups.isMember", { user_id: message.senderId, group_id: `${vk.options.pollingGroupId}` });
	message.user = await User.findOne({ id: message.senderId });

	message.reply = (text, params) => message.send(`${message.user.mention ? `@id${message.user.id} (${message.user.tag})` : `${message.user.tag}`}, ${text}\n\n${!follow ? `üíû –ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –µ—Å–ª–∏ [public${vk.options.pollingGroupId}|–ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ –º–µ–Ω—è], —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –∞–∫—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ!` : ``}`, params);
	if(mentionRegexp.test(message.text)) message.text = message.text.replace(mentionRegexp, "").trim();

			let start = Date.now();
			await next();

			let end = Date.now();
			if(message.senderId === 482757961 && message.senderId !== 326410377) console.info(`[${unixStamp(getUnix())} ${message.isChat ? "c"+message.chatId+", @id"+message.senderId : "@id"+message.senderId}]: ${message.text.slice(0, 64)} handled in ${end-start} ms`);

	if(message.text) {
	message.user.inc("days", 1)
	}

});
updates.hear(/^(?:eval)\s([^]+)/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	try {
		const result = eval(message.$match[1]);

		if(typeof(result) === "string")
		{
			return message.reply(`string: ${result}`);
		} else if(typeof(result) === "number")
		{
			return message.reply(`number: ${result}`);
		} else {
			return message.reply(`${typeof(result)}: ${JSON.stringify(result, null, '&#4448;')}`);
		}
	} catch (e) {
		console.error(e);
		return message.reply(`–æ—à–∏–±–∫–∞:
${e.toString()}`);
		}
});
updates.hear(/^(?:–Ω–∏–∫)$/i, async (message, bot) => {
	if(message.user.mention === false)
	{
		message.user.set("mention", true);
		return message.reply(`–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!`);
	}

	if(message.user.mention === true)
	{
		message.user.set("mention", false);
		return message.reply(`–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!`);
	}
});
updates.hear(/^(?:–º–µ–Ω—é|–ø–æ–º–æ—â—å|–Ω–∞—á–∞—Ç—å|start)$/i, async (message, bot) => {
	return message.reply(`–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, 

 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–û—Å–Ω–æ–≤–Ω–æ–µ"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ë–∞–Ω–∫"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–æ—Å—É–≥"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{}",
"label": "–ú–∞–≥–∞–∑–∏–Ω"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ñ–∏–≤–æ—Ç–Ω—ã–µ"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–æ–Ω–∞—Ç"
},
"color": "positive"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü—Ä–æ—á–µ–µ"
},
"color": "default"
}]
]
})
   });
	});


updates.hear(/^(?:–∂–∏–≤–æ—Ç–Ω—ã–µ)$/i, async (message, bot) => {
	return message.reply(`–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏:
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–∏—Ç–æ–º–µ—Ü"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–∏—Ç–æ–º—Ü—ã"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–æ—Ö–æ–¥ –ø–∏—Ç–æ–º—Ü–∞"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–í—ã–≥—É–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü—Ä–æ–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ú–µ–Ω—é"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:–æ—Å–Ω–æ–≤–Ω–æ–µ)$/i, async (message, bot) => {
	return message.reply(`–æ—Å–Ω–æ–≤–Ω–æ–µ:`, {

keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–∞—Å–ø–æ—Ä—Ç"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ö–æ—à–µ–ª–µ–∫"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–†–∞–±–æ—Ç—ã"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ú–µ–Ω—é"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:–ü—Ä–æ—á–µ–µ)$/i, async (message, bot) => {
	return message.reply(`–ø—Ä–æ—á–µ–µ: (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!)
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–°–µ–º—å—è"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–¢–µ–ª–µ—Ñ–æ–Ω"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{}",
"label": "–†—ã–±–∞–ª–∫–∞"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–û—Ö–æ—Ç–∞"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ú–µ–Ω—é"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:–ø–æ–ª—É—á–∏—Ç—å)\s(?:–ø–∞—Å–ø–æ—Ä—Ç)$/i, async (message, bot) => {
	if(message.isChat) return message.reply('–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(message.user.passport) return message.reply(`–≤—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç!`);
	{
var result = '';
   var words = '0123456789';
   var max_position = words.length - 1;
       for( i = 0; i < 2; ++i ) {
            position = Math.floor ( Math.random() * max_position );
            result = result + words.substring(position, position + 1);
            }
var seria = '';
   var words = '0123456789';
   var max_position = words.length - 1;
       for( i = 0; i < 2; ++i ) {
            position = Math.floor ( Math.random() * max_position );
            seria = seria + words.substring(position, position + 1);
            }
var pnum = '';
   var words = '0123456789';
   var max_position = words.length - 1;
       for( i = 0; i < 6; ++i ) {
            position = Math.floor ( Math.random() * max_position );
            pnum = pnum + words.substring(position, position + 1);
            }
await message.user.set("seria", result)
await message.user.set("seriap", seria)
await message.user.set("numberp", pnum)
await message.user.set("passport", true)
await message.user.set("regDate", getUnix())
return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –ü–∞—Å–ø–æ—Ä—Ç! || –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä: ${result} ${seria} ${pnum}.`);
}
});
updates.hear(/^(?:–ø–∞—Å–ø–æ—Ä—Ç)$/i, async (message, bot) => {
	let _user = await User.findOne({ uid: message.user.partner });
	if(!message.user.passport) return message.reply(`–ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–∞—Å–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"`)
	let text = ``;

	text += `üéí –§–ò: ${message.user.tag} ${message.user.familia}\n`;
	text += `üîé ID: ${message.user.uid}\n`;
	text += `üíΩ –í–æ–∑—Ä–∞—Å—Ç: ${message.user.age} [${message.user.days}|365] \n`;
	text += `üìÑ –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: ${message.user.seria} ${message.user.seriap} ${message.user.numberp}\n`;
	text += `üìÆ –ü–æ–¥–ø–∏—Å–∫–∞: ${FLEX.indexOf(message.senderId) !== -1 ? `VIP` : `–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`}\n`;
	if(message.user.work) text += `${works.find((x) => x.id === message.user.work).icon} –†–∞–±–æ—Ç–∞: ${works.find((x) => x.id === message.user.work).name}\n\n`;
	text += `üí∂ –í –∫–æ—à–µ–ª—å–∫–µ:  ${utils.spaces(message.user.balance)}‚ÇΩ\n`;
	if(message.user.ebank) text += `üíé –≠–î–µ–ø–æ–∑–∏—Ç: ${utils.spaces(message.user.ebank)}‚ÇΩ\n`;
	if(message.user.bank) text += `üéü –í –±–∞–Ω–∫–µ: ${utils.spaces(message.user.bank)}‚ÇΩ\n\n\n`;

	if(message.user.partner) text += `üíû –í—ã –≤ –±—Ä–∞–∫–µ —Å *id` + _user.id + ' (' + _user.tag + ')\n'

	if(message.user.psi || message.user.comp || message.user.phone || message.user.kvar || message.user.home || message.user.car)
	{
		text += `\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:\n`;

		if(message.user.psi) text += `üéÆ –ü—Ä–∏—Å—Ç–∞–≤–∫–∞: ${playstation.find((x) => x.id == message.user.psi).name}\n`;
		if(message.user.comp) text += `üíª –ö–æ–º–ø—å—é—Ç–µ—Ä:  ${comps.find((x) => x.id == message.user.comp).name}\n`;
		if(message.user.phone) text += `üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: ${phones.find((x) => x.id == message.user.phone).name}\n`;
		if(message.user.home) text += `üè† –î–æ–º: ${HOMES.find((x) => x.id == message.user.home).name}\n`;
		if(message.user.kvar) text += `üåá –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${APARTMENTS.find((x) => x.id == message.user.kvar).name}\n`;
		if(message.user.car) text += `üöó –ú–∞—à–∏–Ω–∞: ${CARS.find((x) => x.id == message.user.car).name}\n`;
	}

	text += `\nüçÄ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: ${unixStamp(message.user.regDate)}`;
	return message.reply(`—Ç–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç:\n${text}`);
});
updates.hear(/^(?:getid)$/i, async (message) => {
	if(FLEX.indexOf(message.senderId) === -1) return;

	if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ!`);
	let user = await User.findOne({ id: message.forwards[0].senderId });

	if(!user) return message.reply(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
	return message.reply(`ID –∏–≥—Ä–æ–∫–∞: ${user.uid}.`);
});

updates.hear(/^(?:get)\s([0-9]+)/i, async (message) => {
	if(FLEX.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) user = await User.findOne({ id: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π ID/VK ID`);

	await message.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
üéí –§–ò: ${user.tag} ${user.familia}
üîé ID: ${user.uid}
üÜî –¶–∏—Ñ—Ä–æ–≤–æ–π ID: @id${user.id}
üíΩ –í–æ–∑—Ä–∞—Å—Ç: ${user.age} [${user.days}|365]
üìÑ –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: ${user.seria} ${user.seriap} ${user.numberp}
üìÆ –ü–æ–¥–ø–∏—Å–∫–∞: ${FLEX.indexOf(user.id) !== -1  ? `VIP` : `–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`}
[üí¥] –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å–∞:
&#4448;üí∂ –í –∫–æ—à–µ–ª—å–∫–µ:  ${utils.spaces(user.balance)}‚ÇΩ
&#4448;üéü –í –±–∞–Ω–∫–µ: ${utils.spaces(user.bank)}‚ÇΩ
[üî®] –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:
&#4448;üëî–†–∞–±–æ—Ç–∞: ${user.work ? works.find((x) => x.id == user.work).name : `‚ùå`}
[üîë] –ò–º—É—â–µ—Å—Ç–≤–æ:
&#4448;üéÆ –ü—Ä–∏—Å—Ç–∞–≤–∫–∞: ${user.psi ? playstation.find((x) => x.id == user.psi).name : `‚ùå`}
&#4448;üíª –ö–æ–º–ø—å—é—Ç–µ—Ä: ${user.comp ? comps.find((x) => x.id == user.comp).name : `‚ùå`}
&#4448;üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone ? phones.find((x) => x.id == user.phone).name : `‚ùå`}
&#4448;üè† –î–æ–º: ${user.home ? HOMES.find((x) => x.id == user.home).name : `‚ùå`}
&#4448;üåá –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${user.kvar ? APARTMENTS.find((x) => x.id == user.kvar).name : `‚ùå`}
&#4448;üöó –ú–∞—à–∏–Ω–∞: ${user.car ? CARS.find((x) => x.id == user.car).name : `‚ùå`}

[‚ùå] –ë–∞–Ω—ã:
&#4448;üÜò –†–µ–ø–æ—Ä—Ç–∞: ${user.banreport ? "‚úÖ" : "‚ùå"}
&#4448;ü§ù –ü–µ—Ä–µ–≤–æ–¥–æ–≤: ${user.banpay ? "‚úÖ" : "‚ùå"}`);
});
updates.hear(/^(?:—Ä–µ–ø–æ—Ä—Ç)\s([^]+)$/i, async (message) => {
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: <<—Ä–µ–ø–æ—Ä—Ç [—Å–ª–æ–≤–æ/–∂–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]>> ${utils.getSadEmoji()}`);
	if(message.user.banreport) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç. ${utils.getSadEmoji()}`);
	if(message.user.treport > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –∞–≥–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥—Ä—É–≥–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã.`);

	await vk.api.call("messages.send", { chat_id: 4, message: `üìö | –ë—ã–ª –∑–∞–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!
	üÜî | –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: vk.com/id${message.senderId}
	üì© | –ï–≥–æ ID: ${message.user.uid}
	‚û° | @id${message.senderId} (${message.user.tag})${message.isChat ? " –≤ –±–µ—Å–µ–¥–µ ‚Ññ"+message.chatId : ""}: ${message.$match[1]}`, random_id: Math.random(), attachment: message.attachments, forward_messages: message.id });

	if(message.attachments.find((x) => typeof(x) !== "string")) {
		let att = message.attachments.filter((x) => typeof(x) !== "string");
		att.map(async (x) => {
			const { largePhoto } = x;

			const attachment = await vk.upload.messagePhoto({
				peer_id: 326410377,
				source: largePhoto
			});

			await vk.api.call("messages.send", {
				chat_id: 4,
				message: "[–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ —Ä–µ–ø–æ—Ä—Ç–∞] –æ—Ç @id" + message.senderId,
				attachment: attachment,
				random_id: Math.random()
			});
		});
	}

	await message.user.set("treport", getUnix() + 60000);

	await message.reply(`–≤–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #${message.senderId}.\n\n\n–ü—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏.`);
});
updates.hear(/^(?:–ø—Ä–æ–≤–µ—Ä–∏—Ç—å)\s?([^]+)?/i, (message) => {
	const don = require("./don.json");
    if(!message.$match[1]) return message.send(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ '–î–û–ù–ê–¢'`);
    Wallet.getOperationHistory({rows: 50, operation: "IN"}, (err, operations) => {
        for(i in operations['data']){
            stats = true;
            if(operations['data'][i]['txnId'] == message.$match[1]){
                if(don[operations['data'][i]['txnId']]) return message.send(`–ü–ª–∞—Ç—ë–∂ ‚Ññ${message.$match[1]} —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`)
                don[operations['data'][i]['txnId']] = {
                    user: message.senderId,
                    comment: operations['data'][i]['comment']
                }
 
                    if(operations['data'][i]['comment'] == message.senderId && operations['data'][i]['total']['amount'] == 79){
                        FLEX.push(operations['data'][i]['comment'])
                        return message.send(`
[üî•–î–∞–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•]
|||||||||||||||||||||||||||||||
üí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${operations['data'][i]['total']['amount']} —Ä—É–±–ª–µ–π
üí¨–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ${operations['data'][i]['comment']}
-_-_-_-_-_-_-_-_-_-_-_-_-_-_
üíé –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: VIP –ø–æ–¥–ø–∏—Å–∫–∞`)
                }
            
                return message.send(`
[üî•–î–∞–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•]
|||||||||||||||||||||||||||||||
üí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${operations['data'][i]['total']['amount']} —Ä—É–±–ª–µ–π
üí¨–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ${operations['data'][i]['comment']}
-_-_-_-_-_-_-_-_-_-_-_-_-_-_
–ù–∞–ø–∏—à–∏—Ç–µ @id326410377 (–µ–º—É), –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞
                `);
            }
        }
    });
})
const rq = require("prequest");
updates.hear(/^(?:–æ—Ç–≤–µ—Ç)\s([0-9]+)\s([^]+)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	await vk.api.call("messages.send", { user_id: user.id, message: `üì® | –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –†–µ–ø–æ—Ä—Ç #${user.id}\n\n–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏: ¬´${message.$match[2]}¬ª`, random_id: Math.random() });
	return message.reply(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
});
updates.hear(/^(?:—á–∞—Ç–æ—Ç–≤–µ—Ç)\s([0-9]+)\s([^]+)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: <<—á–∞—Ç–æ—Ç–≤–µ—Ç [ID CHAT] [—Å–ª–æ–≤–æ]>> ${utils.getSadEmoji()}`);

	await vk.api.call("messages.send", { chat_id: Number(message.$match[1]), message: `üì® | –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∞–º –æ—Ç–≤–µ—Ç:\n\n${message.$match[2]}`, random_id: Math.random() });
	return message.reply(`–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
});
updates.hear(/^(?:–¥–æ–Ω–∞—Ç)$/i, async (message) => {
	return message.reply(`‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –£—Å–ø–µ–π –∫—É–ø–∏—Ç—å VIP –ø–æ–¥–ø–∏—Å–∫—É, –æ—Å—Ç–∞–ª–æ—Å—å 4 —à—Ç—É–∫–∏! 
	–°–∫–∏–¥–∫–∏ 75% –≤ —á–µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è! - 79 —Ä—É–±–ª–µ–π 

	–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:  
	‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω–∏—Ç—å —Å–µ–±–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.
	‚Äî –í—ã–¥–∞–µ—Ç—Å—è 75.000‚ÇΩ. 
	‚Äî –í—ã–¥–∞—ë—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç +1 –≥–æ–¥. 
	‚Äî –í—ã–¥–∞—ë—Ç—Å—è –¥–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Lucky Life.
	‚Äî –°–Ω–∏–º–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã.
	‚Äî –î–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö –∏–≥—Ä, –∫–æ–º–∞–Ω–¥, —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç.–¥.
	‚Äî –í –ø–∞—Å–ø–æ—Ä—Ç–µ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ VIP. 
	‚Äî –£–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞.
	‚Äî –£–∑–Ω–∞—Ç—å ID –∏–≥—Ä–æ–∫–∞.
	‚Äî –£–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
	‚Äî –í—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–µ—Å–µ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üòé 

    P.S. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –±—É–¥—É—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è!

	–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ö—É–ø–∏—Ç—å –≤–∏–ø–∫—É"
	üìå –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –∏ –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –±–µ—Å–µ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. ‚ò∫`);

});

updates.hear(/^(?:–≤–∏–ø–∫–∞)$/i, async (message) => {
	if(message.isChat) return message.reply('–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(FLEX.indexOf(message.senderId) === -1) return;
	return message.reply(`–∫–æ–º–∞–Ω–¥—ã VIP:

   [ü§ôüèª]  
    &#4448;ü§ô –ò–º—è [–∂–µ–ª–∞–µ–º–æ–µ –∏–º—è] - –°–º–µ–Ω–∏—Ç—å –∏–º—è
	&#4448;ü§ô –§–∞–º–∏–ª–∏—è [–∂–µ–ª–∞–µ–º–∞—è —Ñ–∞–º–∏–ª–∏—è] - –°–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é
	&#4448;ü§ô –í–∏–ø –±–æ–Ω—É—Å - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
	&#4448;ü§ô Getid + –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –£–∑–Ω–∞—Ç—å ID –∏–≥—Ä–æ–∫–∞
	&#4448;ü§ô Get [ID] - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	[üèâ] –ü—Ä–∞–Ω–∫ –∫–æ–º–∞–Ω–¥—ã:
	 &#4448;üèâ –§–±–∞–Ω [ID] [–ø—Ä–∏—á–∏–Ω–∞] - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–µ–π–∫ –±–∞–Ω: (45.000‚ÇΩ)
	 &#4448;üèâ –§–∏–º—è [ID] [–∏–º—è] - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–µ–π–∫ –∏–º—è: (1.500‚ÇΩ)
	 &#4448;üèâ –§–±–∞–±–ª–æ [ID] [—Å—É–º–º–∞] - –í—ã–¥–∞—Ç—å —Ñ–µ–π–∫ –±–∞–±–ª–æ: (3.000‚ÇΩ)
	 &#4448;üèâ –§–∞–¥–º–∏–Ω [ID] - –í—ã–¥–∞—Ç—å —Ñ–µ–π–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: (5.000‚ÇΩ)
 
	`);
});
updates.hear(/^(?:giveme)\s(.*)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	if(message.user.admingive > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.admingive - getUnix())}`);
	
	let user = await User.findOne({ uid: message.user.uid });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);
	
	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);
	if(!message.$match[1]) return;
    if(message.$match[1] > 20000) return message.reply(`–≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç - ${utils.spaces(20000)}‚ÇΩ`);

	vk.api.call("messages.send", {
		chat_id: 22,
		message: `[‚è∞] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –¥–µ–Ω—å–≥–∏ —Å–µ–±–µ: (${utils.spaces(message.$match[1])}‚ÇΩ) `,
		random_id: Math.random()
	});

	await user.inc("balance", message.$match[1]);
	await message.user.set("admingive", getUnix() + 259200000);

	return message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ —Å–µ–±–µ ${utils.spaces(message.$match[1])}‚ÇΩ`);
});
updates.hear(/^(?:–±–∞–Ω—Ä–µ–ø)\s([0-9]+)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	if(message.$match[1] == 1) return message.reply('–æ—Ç–∫–∞–∑–∞–Ω–æ')
	if(user.banreport) {
		await user.set("banreport", false);
		await message.reply(`–≤—ã —Å–Ω—è–ª–∏ –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `[‚è∞] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞ —Å–Ω—è—Ç–∞`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 22,
			message: `[‚è∞]  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —Å–Ω—è–ª –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞ –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	} else {
		await user.set("banreport", true);
		await message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `[‚è∞] –í–∞–º –≤—ã–¥–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–µ–ø–æ—Ä—Ç–∞`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 22,
			message: `[‚è∞]  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞ –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	}
});
updates.hear(/^(?:givevip)\s([0-9]+)$/i, async (message) => {
	if(message.senderId !== 326410377 && message.senderId !== 482757961 && message.senderId !== 499430856) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
	if(user.uid === message.user.uid) return message.reply(`–Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);


	FLEX.push(user.id)

	    vk.api.messages.send({ user_id: user.id, message: `[id${user.id}|${user.tag}], –≤–∞–º –±—ã–ª –≤—ã–¥–∞–Ω–∞ VIP –ü–æ–¥–ø–∏—Å–∫–∞`});
	    vk.api.call("messages.send", {
		chat_id: 22,
		message: `[‚è∞] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª VIP –ø–æ–¥–ø–∏—Å–∫—É –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${user.uid})`,
		random_id: Math.random()
	});
	    return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É @id${user.id} VIP –ü–æ–¥–ø–∏—Å–∫—É`)
});
updates.hear(/^(?:ban)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π ID`);
	if(user.uid === message.user.uid) return message.reply(`–Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);

	BANS.push(user.id)

	    vk.api.messages.send({ user_id: user.id, message: `[id${user.id}|${user.tag}], –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ù–ê–í–ï–ì–î–ê.\n\n\n–ü—Ä–∏—á–∏–Ω–∞: ` +  message.$match[2]});
	    vk.api.call("messages.send", {
		chat_id: 22,
		message: `[‚è∞] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∏–≥—Ä–æ–∫–∞: @id${user.id} (ID: ${user.uid})`,
		random_id: Math.random()
	});
	    return message.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∏–≥—Ä–æ–∫–∞: @id${user.id} (ID: ${user.uid})`)
});

updates.hear(/^(?:—Ñ–±–∞–Ω)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.isChat) return message.reply('–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(FLEX.indexOf(message.senderId) === -1) return;
    if(message.user.balance < 45000) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–§–±–∞–Ω [ID] [–ø—Ä–∏—á–∏–Ω–∞]" ${utils.getSadEmoji()}`);
	let $user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!$user) return message.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π ID`);
	if($user.uid === message.user.uid) return message.reply(`–ù–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);

		await message.user.dec("balance", 45000);

		await message.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –¥–∞–ª–∏ —Ñ–µ–π–∫–æ–≤—ã–π –±–∞–Ω –∏–≥—Ä–æ–∫—É "${$user.tag}", –Ω–æ –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ —á—Ç–æ —ç—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–∞–Ω!`);
	    vk.api.messages.send({ user_id: $user.id, message: `[id${user.id}|${$user.tag}], –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ù–ê–í–ï–ì–î–ê.\n\n\n–ü—Ä–∏—á–∏–Ω–∞: ` +  message.$match[2]});
});
updates.hear(/^(?:—Ñ–∏–º—è)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.isChat) return message.reply('–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(FLEX.indexOf(message.senderId) === -1) return;
    if(message.user.balance < 1500) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<–§–∏–º—è [ID] [–∏–º—è]>> ${utils.getSadEmoji()}`);
	let $user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!$user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
	if($user.uid === message.user.uid) return message.reply(`–Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);

		await message.user.dec("balance", 1500);

		await message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –∏–≥—Ä–æ–∫—É "${$user.tag}" –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ —á—Ç–æ —ç—Ç–æ —Ñ–µ–π–∫–æ–≤–∞—è –∑–∞–º–µ–Ω–∞!`);
	    vk.api.messages.send({ user_id: $user.id, message: `[id${$user.id}|`+ message.$match[2] + `], –≤–∞–º –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –Ω–∞ - "` +  message.$match[2] + `", —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –º–µ–Ω—è—Ç—å —Å–≤–æ–µ –∏–º—è!`});
});
updates.hear(/^(?:—Å—Ç–∞–∫–∞–Ω—á–∏–∫)\s([1-3])\s(.*)$/i, async (message) => {
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<—Å—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]>> ${utils.getSadEmoji()}`);
	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);
	
	if(!message.$match[2]) return;
	if(message.$match[2] <= 0) return;
	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance) {
		await message.user.set("tglass", getUnix() + 10000);
		await message.user.dec("balance", message.$match[2]);
		let rand = utils.random(1, 3);

		if(rand == message.$match[1]) {
			await message.user.inc("balance", message.$match[2] * 2);
			return message.reply(`–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[2] * 1.5)}‚ÇΩ
			üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}‚ÇΩ`);
		} else {
			return message.reply(`–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[2])}‚ÇΩ
			üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}‚ÇΩ`);
		}
	}
});
updates.hear(/^(?:—Ñ–±–∞–±–ª–æ)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.isChat) return message.reply('–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(FLEX.indexOf(message.senderId) === -1) return;
    if(message.user.balance < 3000) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<—Ñ–±–∞–±–ª–æ [ID] [—Å—É–º–º–∞]>> ${utils.getSadEmoji()}`);
	let $user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!$user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
	if($user.uid === message.user.uid) return message.reply(`–Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);

		await message.user.dec("balance", 3000);

		await message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ —Ñ–µ–π–∫ –±–∞–±–ª–æ –∏–≥—Ä–æ–∫—É "${$user.tag}" –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ —á—Ç–æ —ç—Ç–æ —Ñ–µ–π–∫–æ–≤–∞—è –≤—ã–¥–∞—á–∞!`);
	    vk.api.messages.send({ user_id: $user.id, message: `[id${$user.id}|${$user.tag}], –≤–∞–º –≤—ã–¥–∞–ª–∏ - ${utils.spaces(message.$match[2])}‚ÇΩ`});
});
updates.hear(/^(?:—Ñ–∞–¥–º–∏–Ω)\s([0-9]+)$/i, async (message) => {
	if(message.isChat) return message.reply('–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(FLEX.indexOf(message.senderId) === -1) return;
    if(message.user.balance < 5000) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<—Ñ–∞–¥–º–∏–Ω [ID]>> ${utils.getSadEmoji()}`);
	let $user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!$user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
	if($user.uid === message.user.uid) return message.reply(`–Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);

		await message.user.dec("balance", 5000);

		await message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ —Ñ–µ–π–∫ –ø—Ä–∞–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫—É "${$user.tag}" –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ —á—Ç–æ —ç—Ç–æ —Ñ–µ–π–∫–æ–≤–∞—è –≤—ã–¥–∞—á–∞!`);
	    vk.api.messages.send({ user_id: $user.id, message: `[id${$user.id}|${$user.tag}], –≤—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –Ω–æ–≤—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Lucky Life!`});
});
	updates.hear(/^(?:–∫—É–ø–∏—Ç—å)\s(?:–≤–∏–ø–∫—É)$/i, async message => {
		if(message.isChat) return message.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	let text = await vk.api.call('utils.getShortLink', { url:`https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=77776641367&amountInteger=79&amountFraction=0&extra%5B%27comment%27%5D=ID: ${message.senderId}, Game ID: ${message.user.uid}&currency=643&blocked[0]=account&blocked[1]=sum&blocked[2]=comment` });
	message.reply('—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ' + text.short_url  + '\n\n–ö –æ–ø–ª–∞—Ç–µ: 79 —Ä—É–±–ª–µ–π\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: QIWI/–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
});
updates.hear(/^(?:–∏–º—è)\s(.*)$/i, async (message, bot) => {
	if(FLEX.indexOf(message.senderId) === -1) return;
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–ò–º—è [–∂–µ–ª–∞–µ–º–æ–µ –∏–º—è]" ${utils.getSadEmoji()}`);
	var zapret = /(&#4448;|–≤–∫ –±–æ —Ç |–≤–∫–±–æ—Ç—Ä—É|vkbot&#4448;ru|vkvot ru|vkbotru|vkbot|v k b o t . r u|–≤ –∫ –±–æ—Ç|–ø–æ—Ä–Ω–æ|botvk|–±–æ—Ç–≤–∫|vkbot|–∫–±–æ—Ç|bot vk|—Ö–µ–Ω—Ç–∞–π|—Å–µ–∫—Å|–ø–∏–¥—Ä|—Ç—Ä–∞—Ö|–Ω–∞—Å–∏–ª–∏–µ|–∑–æ–æ—Ñ–∏–ª|–±–¥—Å–º|—Å–∏—Ä–∏—è|hentai|hentay|—Å–∏–Ω–∏–π –∫–∏—Ç|—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ|—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã|—Å–ª–∏–≤|—Ü–ø|cp|–º–∞–ª–µ–Ω—å–∫–∏–µ|–º–∞–ª–æ–ª–µ—Ç–∫–∏|—Å—É—á–∫–∏|—Ç—Ä–∞—Ö|–µ–±–ª—è|–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ|–±–ª—è—Ç—å|—Ö—É–π|–ø–æ—à–µ–ª –Ω–∞—Ö|—Ç–≤–∞—Ä—å|–º—Ä–∞–∑—å|—Å—É—á–∫–∞|–≥–∞–Ω–¥–æ–Ω|—É–µ–±–æ–∫|—à–ª—é—Ö|–ø–∞—Å–∫—É–¥–∞|–æ—Ä–≥–∞–∑–º|–¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–∏—Ü—ã|—Ü–µ–ª–∫–∏|—Ä–∞—Å—Å–æ–≤–æ–µ|–º–µ–ª–∫–∏–µ|–º–∞–ª–æ–ª–µ—Ç–∫–∏|–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ|–µ–±–ª—è|—Ö–µ–Ω—Ç–∞–π|sex|bdsm|ebl|trax|syka|shlux|–∏–Ω—Ü–µ—Å—Ç|iznas|–º–∞—Ç—å|–¥–æ–ª–±–∞–µ–±|–¥–æ–ª–±–∞—ë–±|—Ö—É–µ—Å–æ—Å|—Å—É—á–∫–∞|—Å—É–∫–∞|—Ç–≤–∞—Ä—å|–ø–µ–∑–¥—é–∫|—Ö—É–π|—à–ª—é—Ö|–±–æ–≥|—Å–∞—Ç–∞–Ω–∞|–º—Ä–∞–∑—å|–∞–¥–º–∏–Ω|–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è|admin|administartor|—Å–æ–≤–∞ –Ω–µ–∫–æ–≥–¥–∞ –Ω–µ —Å–ø–∏—Ç|—Å–æ–≤–∞ –Ω–µ —Å–ø–∏—Ç|—Å–∏–Ω–∏–π|–∫–∏—Ç|—Å–∏–Ω–∏–π –∫–∏—Ç)/
	let zaprets1 = message.$match[1].toLowerCase();
	if (zapret.test(zaprets1) == true) { 
			return message.reply(`–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –∏–º—è!`);
	}
	var filter0 = /(http(s)?:\/\/.)?(www\.)?[-a-z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}/
	var filter1 = /(?!http(s)?:\/\/)?(www\.)?[–∞-—è0-9-_.]{1,256}\.(—Ä—Ñ|—Å—Ä–±|–±–ª–æ–≥|–±–≥|—É–∫—Ä|—Ä—É—Å|“õ–∞–∑|ÿßŸÖÿßÿ±ÿßÿ™.|ŸÖÿµÿ±.|ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©.)/
	var lol = filter0.test(zaprets1)
	var lol1 = filter1.test(zaprets1)	
	if (filter0.test(zaprets1) == true || filter1.test(zaprets1) == true) { 
		return message.reply(`–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –∏–º—è!`);
	}

	message.user.set("tag", message.$match[1]);
	return message.reply(`–æ—Ç–ª–∏—á–Ω–æ–µ –∏–º—è!`);
});
updates.hear(/^(?:–≤–∏–ø)\s(?:–±–æ–Ω—É—Å)$/i, async (message, bot) => {
	if(FLEX.indexOf(message.senderId) === -1) return;

	if(message.user.vipb) return message.reply(`–≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –±–æ–Ω—É—Å`);
	await message.user.inc("balance", 75000);
	await message.user.set("home", 5);
	await message.user.inc("age", 1);
    await message.user.set("vipb", true);
    return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –≤ –±–æ–Ω—É—Å–µ: \n\n+ ${utils.spaces(75000)}‚ÇΩ\n+ 1 –≥–æ–¥\n+ –î–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Lucky Life\n\n\n–î–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–π VIP –ø–æ–¥–ø–∏—Å–∫–∏`);
});
updates.hear(/^(?:—Ñ–∞–º–∏–ª–∏—è)\s(.*)$/i, async (message, bot) => {
	if(FLEX.indexOf(message.senderId) === -1) return;
	if(!message.$match[1]) return message.reply(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–§–∞–º–∏–ª–∏—è [–∂–µ–ª–∞–µ–º–æ–µ —Ñ–∞–º–∏–ª–∏—è]" ${utils.getSadEmoji()}`);
	var zapret = /(&#4448;|–≤–∫ –±–æ —Ç |–≤–∫–±–æ—Ç—Ä—É|vkbot&#4448;ru|vkvot ru|vkbotru|vkbot|v k b o t . r u|–≤ –∫ –±–æ—Ç|–ø–æ—Ä–Ω–æ|botvk|–±–æ—Ç–≤–∫|vkbot|–∫–±–æ—Ç|bot vk|—Ö–µ–Ω—Ç–∞–π|—Å–µ–∫—Å|–ø–∏–¥—Ä|—Ç—Ä–∞—Ö|–Ω–∞—Å–∏–ª–∏–µ|–∑–æ–æ—Ñ–∏–ª|–±–¥—Å–º|—Å–∏—Ä–∏—è|hentai|hentay|—Å–∏–Ω–∏–π –∫–∏—Ç|—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ|—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã|—Å–ª–∏–≤|—Ü–ø|cp|–º–∞–ª–µ–Ω—å–∫–∏–µ|–º–∞–ª–æ–ª–µ—Ç–∫–∏|—Å—É—á–∫–∏|—Ç—Ä–∞—Ö|–µ–±–ª—è|–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ|–±–ª—è—Ç—å|—Ö—É–π|–ø–æ—à–µ–ª –Ω–∞—Ö|—Ç–≤–∞—Ä—å|–º—Ä–∞–∑—å|—Å—É—á–∫–∞|–≥–∞–Ω–¥–æ–Ω|—É–µ–±–æ–∫|—à–ª—é—Ö|–ø–∞—Å–∫—É–¥–∞|–æ—Ä–≥–∞–∑–º|–¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–∏—Ü—ã|—Ü–µ–ª–∫–∏|—Ä–∞—Å—Å–æ–≤–æ–µ|–º–µ–ª–∫–∏–µ|–º–∞–ª–æ–ª–µ—Ç–∫–∏|–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ|–µ–±–ª—è|—Ö–µ–Ω—Ç–∞–π|sex|bdsm|ebl|trax|syka|shlux|–∏–Ω—Ü–µ—Å—Ç|iznas|–º–∞—Ç—å|–¥–æ–ª–±–∞–µ–±|–¥–æ–ª–±–∞—ë–±|—Ö—É–µ—Å–æ—Å|—Å—É—á–∫–∞|—Å—É–∫–∞|—Ç–≤–∞—Ä—å|–ø–µ–∑–¥—é–∫|—Ö—É–π|—à–ª—é—Ö|–±–æ–≥|—Å–∞—Ç–∞–Ω–∞|–º—Ä–∞–∑—å|–∞–¥–º–∏–Ω|–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è|admin|administartor)/
	let zaprets1 = message.$match[1].toLowerCase();
	if (zapret.test(zaprets1) == true) { 
			return message.reply(`–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é!`);
	}
	var filter0 = /(http(s)?:\/\/.)?(www\.)?[-a-z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}/
	var filter1 = /(?!http(s)?:\/\/)?(www\.)?[–∞-—è0-9-_.]{1,256}\.(—Ä—Ñ|—Å—Ä–±|–±–ª–æ–≥|–±–≥|—É–∫—Ä|—Ä—É—Å|“õ–∞–∑|ÿßŸÖÿßÿ±ÿßÿ™.|ŸÖÿµÿ±.|ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©.)/
	var lol = filter0.test(zaprets1)
	var lol1 = filter1.test(zaprets1)	
	if (filter0.test(zaprets1) == true || filter1.test(zaprets1) == true) { 
		return message.reply(`–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é!`);
	}

	message.user.set("familia", message.$match[1]);
	return message.reply(`–æ—Ç–ª–∏—á–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è!`);
});
updates.hear(/^(?:–ø—Ä–æ–º–æ—Å–æ–∑–¥–∞—Ç—å)\s([0-9]+)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	let $promo = await Promo.findOne({ title: message.$match[3].toLowerCase() });

	if($promo) return message.reply(`—É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥, —Å–æ—Å—É–Ω –º–µ–ª–∫–∏–π.`);
	let newPromo = new Promo({
		title: message.$match[3].toLowerCase(),
		count: Number(message.$match[1]),
		users: [],
		sum: Number(message.$match[2])
	});

	await newPromo.save();

        const text = message.$match[3].toLowerCase();
        const options = {
          isShowLogo: true,
          logoData: false, // logo data in base64
          isShowBackground: true, // show qr-background 
          backgroundColor: '#FFFFFF', // qr-code background color
          foregroundColor: '#000000', // qr-code color
        };
         
        const qrSvg = qr.createQR(text, 2050, 'qr-code-class', options);

        //1. convert from svg string 
        //2. convert from svg's base64 string 
svg2img(qrSvg, {format:'jpg','quality':100}, function(error, buffer) { 
fs.writeFileSync('foo6.jpg', buffer); 


        return message.sendPhoto('./foo6.jpg')


});
});
updates.hear(/^(?:–ø—Ä–æ–º–æ—Å—Ç–∞—Ç—É—Å)\s(.*)$/i, async (message) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
	let $promo = await Promo.findOne({ title: message.$match[1].toLowerCase() });
	if(!$promo) return message.reply(`–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!`);

	return message.reply(`–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
	
	–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${$promo.count - $promo.users.length}\n–°—É–º–º–∞: ${utils.spaces($promo.sum)}‚ÇΩ`);




});
updates.hear(/^(?:–∫–∞–∑–∏–Ω–æ|–∞–∑–∏–Ω–æ)\s(.*)$/i, async (message) => {
	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: <<–∫–∞–∑–∏–Ω–æ/–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]>> ${utils.getSadEmoji()}`);
	
	if(!message.$match[1]) return;
	if(message.$match[1] <= 0) return;
	if(message.$match[1] > message.user.balance) return message.reply(`—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. ${utils.getSadEmoji()}`);

	else if(message.$match[1] <= message.user.balance) {
		await message.user.dec("balance", message.$match[1]);
		let cof = utils.pick([0.75, 0.50, 2, 3, 0.50, 0.75, 2, 2, 2, 1.25, 1.5, 1, 0.5, 0.5, 1.5, 1.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25]);

		await message.user.inc("balance", message.$match[1] * cof);
		return message.reply(`${cof < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] - (message.$match[1] * cof))}‚ÇΩ` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] * cof)}‚ÇΩ`} (x${cof}) ${cof <= 0 ? utils.getSadEmoji() : ``}
		üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}‚ÇΩ`);
	}
});
updates.hear(/^(?:–º–æ–Ω–µ—Ç–∫–∞)\s(–æ—Ä–µ–ª|—Ä–µ—à–∫–∞)\s(.*)$/i, async (message) => {
	message.$match[1] = message.$match[1].toLowerCase();
	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);
	
	if(!message.$match[2]) return;
	if(message.$match[2] <= 0) return;

	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance) {
		await message.user.dec("balance", message.$match[2]);

		let side = message.$match[1] === "–æ—Ä–µ–ª" ? 0 : 1;
		let rand = utils.random(0, 1);

		if(rand === side) {
			await message.user.inc("balance", message.$match[2] * 2);
			return message.send(`–≤—ã —É–≥–∞–¥–∞–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç–∫–∏! –í—ã–∏–≥—Ä—ã—à: ${utils.spaces(message.$match[2] * 2)}‚ÇΩ`);
		} else return message.send(`–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[2])}‚ÇΩ`);
	}
});
updates.hear(/^(?:—Å–µ–π—Ñ)\s([0-9]+)$/i, async (message) => {
	if(message.$match[1] < 10 || message.$match[1] > 99) return;
	let rand = utils.random(10, 99);

	if(rand == message.$match[1]) {
		await message.user.inc("balance", 7500);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ! ‚úÖ
		üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7.500‚ÇΩ`);
	} else return message.reply(`–≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –∫–æ–¥! –ö–æ–¥ –±—ã–ª <<${rand}>>.
	üî• –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!
	üí∞ –ï—Å–ª–∏ –æ—Ç–≥–∞–¥–∞–µ—Ç–µ –∫–æ–¥, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 7.500‚ÇΩ`);
});
updates.hear(/^–∫—É–±–∏–∫\s([1-6])$/i, (message) => {
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<–∫—É–±–∏–∫ [1-6]>> ${utils.getSadEmoji()}`);
    let number = utils.random(1, 6);
    if (number === Number(message.$match[1])) {
        let prize = utils.pick([500, 1000, 5000]);
        message.user.inc("balance", prize);
        message.reply("–≤—ã —É–≥–∞–¥–∞–ª–∏! –ü—Ä–∏–∑ " + prize + "‚ÇΩ");
    } else {
        let smile = utils.pick("üòí üò¢ üòî üò© üò≠ üò≤ üòï üôÅ üòü".split(" "));
        message.reply("–Ω–µ —É–≥–∞–¥–∞–ª–∏ " + smile + "\nüé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ " + number);
    }
});
updates.hear(/^(?:–ª–∞–∫–∏|–ª–∞–∫–∏,)\s(.*)/i, async (message) => {
const googleTTS = require('google-tts-api');
rq("https://isinkin-bot-api.herokuapp.com/1/talk?q=" + encodeURIComponent(message.$match[1]))
.then(async res => {
googleTTS(res.text.toLowerCase(), 'ru', 2.5) 
.then(function (url) {
  message.sendAudioMessage(url) ;
})
.catch(function (err) {
  console.error(err.stack);
});
})
});
updates.hear(/^(?:–±—Ä–∞–∫)\s([0-9]+)$/i, async (message) => {
			let user = await User.findOne({ uid: Number(message.user.partner) });
			if(message.user.partner) return message.reply(`–≤—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ —Å –∏–≥—Ä–æ–∫–æ–º ${user.tag}`);
			if(Number(message.$match[1]) === message.user.uid) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è/–≤—ã–π—Ç–∏ –∑–∞–º—É–∂ –∑–∞ —Å–µ–±—è`);
		
			let _user = await User.findOne({ uid: message.$match[1] })
			if(!_user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
		
			if(_user.partner > 1) return message.reply(`—ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ`);
		
			if(_user.requests.find(x=> x == message.match[1])) return message.reply(`–≤—ã —É–∂–µ –¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É`);
		
			if(message.user.requests.find(x=> x == message.$match[1]))
			{
				message.user.set('requests', []);
				message.user.set('partner', _user.uid);
		
				_user.set('requests', []);
				_user.set('partner', message.user.uid);
		
				return message.reply(`–≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±—Ä–∞–∫ —Å –∏–≥—Ä–æ–∫–æ–º "[id${_user.id}|${_user.tag}]"`);
			}
		
			_user.requests.push(message.user.uid);
			_user.save();
		vk.api.messages.send({user_id: _user.id, message: `‚ù§  –ò–≥—Ä–æ–∫ [id${message.user.id}|${message.user.tag}] –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Ä—É–∫—É –∏ —Å–µ—Ä–¥—Ü–µ.
        
        üîπ –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–ë—Ä–∞–∫ ${message.user.uid}`});

			return message.reply(`–≤—ã —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É "[id${_user.id}|${_user.tag}]"`);
		});
		
		
		updates.hear(/^(?:—Ä–∞–∑–≤–æ–¥)$/i, async (message) => {
			if(message.user.partner < 1) return message.reply(`–≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ`);
		
			let _user = await User.findOne({ uid: message.user.partner});
		
			message.user.set('partner', 0);
			_user.set('partner', 0);
		    
		 vk.api.messages.send({user_id: _user.id, message: `üò± [id${message.user.id}|${message.user.tag}], —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É–ª –±—Ä–∞–∫!`});
			return message.reply(`–≤—ã —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫`);
		});

updates.hear(/^(?:–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)$/i, async (message, bot) => {
	if(message.user.rass === false)
	{
		message.user.set("rass", true);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!`);
	}

	if(message.user.rass === true)
	{
		message.user.set("rass", false);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!`);
	}
});

updates.hear(/^(?:–ø–µ—Ä–µ–≤–æ–¥)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.kredit) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç!`)
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–ü–µ—Ä–µ–≤–æ–¥ [–∞–π–¥–∏] [—Å—É–º–º–∞]" ${utils.getSadEmoji()}`);
	if(message.user.banpay) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏! ${utils.getSadEmoji()}`);
	let $user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!$user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
	if($user.uid === message.user.uid) return message.reply(`–Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π ID ${utils.getWowEmoji()}`);

	if($user.banpay) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É.`);
	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);

	if(!message.$match[2]) return;
	if(message.$match[2] <= 0) return;
	if(FLEX.indexOf(message.senderId) === -1 && message.$match[2] > 25000) return message.reply(`–≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç - ${utils.spaces(25000)}‚ÇΩ –∑–∞ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é!`);

	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance) {
		await message.user.dec("balance", message.$match[2]);
		await $user.inc("balance", message.$match[2]);

		let log = new Log({
			from: message.senderId,
			to: $user.id,
			date: getUnix(),
			amount: message.$match[2]
		});

		await log.save();
		await message.reply(`–≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É "${$user.tag}" ${utils.spaces(message.$match[2])}‚ÇΩ`);
		if($user.notifications) vk.api.messages.send({ user_id: $user.id, message: `‚ñ∂ –ò–≥—Ä–æ–∫ ${message.user.tag} –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º ${utils.spaces(message.$match[2])}‚ÇΩ!
		üîï –í–≤–µ–¥–∏—Ç–µ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª", –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.` });
	}
});

updates.hear(/^(?:—Ä–∞–±–æ—Ç–∞|—Ä–∞–±–æ—Ç—ã)\s?([0-9]+)?$/i, async (message) => {
	if(message.user.age < 18) return message.reply('—Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 18 –ª–µ—Ç! ')
	if(!message.user.passport) return message.reply('–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–∞—Å–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"')
	if(!message.$match[1]) {
		return message.reply(`–≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:
		
		${
			works
			.filter((x) => x.stage <= message.user.stage)
			.map((x, i) => `${x.icon} ${x.id}. ${x.name} ‚Äî –æ—Ç ${utils.spaces(x.min)}‚ÇΩ –¥–æ ${utils.spaces(x.max)}‚ÇΩ`)
			.join("\n")
		}
		
		–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è: —Ä–∞–±–æ—Ç–∞ [–Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã]`);
	}

	const work = works.find((x) => x.id == message.$match[1]);
	if(!work) return console.info(work);

	if(message.user.work) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞!`);

	if(work.stage > message.user.stage) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Ä–∞–±–æ—Ç—É!`);
	else if(work.stage <= message.user.stage) {
		message.user.set("work", work.id);
		return message.reply(`–≤—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å <<${work.name}>>`);
	}
});

updates.hear(/^(?:–±–æ–Ω—É—Å|üíé\s–±–æ–Ω—É—Å|üîë –ë–æ–Ω—É—Å)$/i, async (message) => {
	if(message.user.tbonus > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.tbonus - Date.now())}`);
	let prize = utils.pick([2500, 3500, 5500, 7500, 8000, 8400, 8700, 9000, 9600, 9900, 10000]);

	await message.user.inc("balance", prize);
	await message.user.set("tbonus", getUnix() + 86400000);

	await message.reply(`–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(prize)}‚ÇΩ
	üí∞ –ù–∞ —Ä—É–∫–∞—Ö: ${utils.spaces(message.user.balance)}‚ÇΩ`);

});
updates.hear(/^(?:—Ä–∞–±–æ—Ç–∞—Ç—å|üî®\s—Ä–∞–±–æ—Ç–∞—Ç—å)$/i, async (message) => {
	if(!message.user.work) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã.`);
	if(message.user.energy < 35) return message.reply('—É–≤—ã, —Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –º–µ–Ω—å—à–µ 35%')
	if(message.user.health < 35) return message.reply('—É–≤—ã, —Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à–µ –∑–¥—Ä–æ–≤—å–µ –º–µ–Ω—å—à–µ 35%')
	if(message.user.twork > getUnix()) return message.reply(`–≤–∞–º –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å.`);

	await message.user.set("twork", getUnix() + 600000);
	let work = works.find((x) => x.id === message.user.work);

    let energy = utils.random(25, 35);

	let earn = utils.random(work.min, work.max);

	let health = utils.random(25, 35)

   
	await message.user.inc("balance", earn);
	await message.user.dec("energy", energy)
	await message.user.dec("health", health)


	return message.reply(`–≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${utils.spaces(earn)}‚ÇΩ.\n\n–ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏: - ${energy}%\n\n–ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è: - ${health}%`);
});
updates.hear(/^(?:warn)$/i, async (message, bot) => {
if(VODKA.indexOf(message.senderId) === -1) return;
if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
let user = await User.findOne({ id: message.forwards[0].senderId });
await user.inc("warn", 1);
if(user.warn >= 3){
await user.set("warn", 0);
vk.api.call("messages.removeChatUser", {chat_id: message.chatId, user_id: user.id
}).catch((error) => {return message.send(`‚õî [id${user.id}|–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ.`);
	});
	await message.send(`‚ö† [id${user.id}|–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –±—ã–ª –∑–∞–≤–∞—Ä–Ω–µ–Ω. –ó–∞ –Ω–∞–ª–∏—á–∏–µ 3 –≤–∞—Ä–Ω–æ–≤ –æ–Ω –±—ã–ª –∫–∏–∫–Ω—É—Ç.`);
		}else{
			await message.send(`‚ö† [id${user.id}|–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –±—ã–ª –∑–∞–≤–∞—Ä–Ω–µ–Ω.(${user.warn}/3)`);
		}

});
updates.hear(/^(?:unwarn)$/i, async (message, bot) => {
if(VODKA.indexOf(message.senderId) === -1) return;
if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
let user = await User.findOne({ id: message.forwards[0].senderId });
if(!user.warn) return message.send(`‚ùé –£ —ç—Ç–æ–≥–æ [id${user.id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤.`)

await user.set("warn", 0);
return message.send(`‚úÖ [id${user.id}|–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –±—ã–ª —Ä–∞–∑–≤–∞—Ä–Ω–µ–Ω.`);

});
updates.hear(/^(?:—á—Å)\s([^]+)$/i, async (message) => {
if(VODKA.indexOf(message.senderId) === -1) return;
if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
uservk.api.groups.ban({ group_id: 183894359, owner_id: message.forwards[0].senderId, reason: 0, comment: message.$match[1], comment_visible: 1, access_token: 'a4fcc7827eb5c4dbf85648107d1378d2554cb861de47a352bc69fbeb97ce0ed4243d92356f6cfdb20a0cb'});
message.send(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫–∏–Ω—É–ª–∏ –≤ —á—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ ¬´${message.$match[1]}¬ª.\n–°—Å—ã–ª–∫–∞: [vk.com/id${message.forwards[0].senderId}]`);
});
updates.hear(/^(?:–∏–∑—á—Å)$/i, async (message) => {
if(VODKA.indexOf(message.senderId) === -1) return;
if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
uservk.api.groups.unban({ group_id: 183894359, owner_id: message.forwards[0].senderId, access_token: 'a4fcc7827eb5c4dbf85648107d1378d2554cb861de47a352bc69fbeb97ce0ed4243d92356f6cfdb20a0cb'});
message.send(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–∏–Ω—É–ª–∏ –∏–∑ —á—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–°—Å—ã–ª–∫–∞: [vk.com/id${message.forwards[0].senderId}]`);
});

updates.hear(/^(?:—É–≤–æ–ª–∏—Ç—å—Å—è)$/i, async (message) => {
	await message.user.set("work", 0);
	return message.reply(`–≤—ã —É–≤–æ–ª–∏–ª–∏—Å—å.`);
});
updates.hear(/^(?:—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)$/i, async (message, bot) => {
	let text = ``;
    
    text += `\nüí≠ ¬ª –û—Å–Ω–æ–≤–Ω—ã–µ:\n`
	text += `üéö - –ó–¥–æ—Ä–æ–≤—å–µ: ${message.user.health}%\n`;
	text += `üéü - –≠–Ω–µ—Ä–≥–∏—è: ${message.user.energy}%\n`;
	text += `üòÉ - –†–∞–¥–æ—Å—Ç—å ${message.user.life}%\n`;


return message.reply(`—Ç–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:\n${text}`);
});
updates.hear(/^(?:–∫–æ—à–µ–ª–µ–∫)$/i, async (message) => {
	return message.reply(`–≤–∞—à –∫–æ—à–µ–ª–µ–∫:\n\nüí∞–í –∫–æ—à–µ–ª—å–∫–µ: ${utils.spaces(message.user.balance)}‚ÇΩ${message.user.bank ? `\nüéí–°—á—ë—Ç –≤ –±–∞–Ω–∫–µ: ${utils.spaces(message.user.bank)}‚ÇΩ` : ``}${message.user.ebank ? `\nüíé –≠–î–µ–ø–æ–∑–∏—Ç: ${utils.spaces(message.user.ebank)}‚ÇΩ` : ``}`);
});
updates.hear(/^(?:–¥–æ—Å—É–≥)$/i, async (message, bot) => {
	return message.reply(`–¥–æ—Å—É–≥:

`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–æ—Å–ø–∞—Ç—å"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ö–ª—É–±"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–æ–∫—Ç–æ—Ä"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ú–µ–Ω—é"
},
"color": "primary"
}]
]
})
   });
});
updates.hear(/^(?:–ø–æ—Å–ø–∞—Ç—å)$/i, async (message, bot) => {
	await message.reply(`–≤—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–Ω–∞:\n\nüëë –ü–æ—Å–ø–∞—Ç—å –≤ –æ—Ç–µ–ª–µ\n\n‚Äî –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 75% —ç–Ω–µ—Ä–≥–∏–∏\n‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å - 500‚ÇΩ\n\nüè≠ –ü–æ—Å–ø–∞—Ç—å –≤ —Ö–æ—Å—Ç–µ–ª–µ\n\n‚Äî –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 55% —ç–Ω–µ—Ä–≥–∏–∏\n‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å - 250‚ÇΩ\n\nüîë –ü–æ—Å–ø–∞—Ç—å –¥–æ–º–∞\n\n‚Äî –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç 35% —ç–Ω–µ—Ä–≥–∏–∏\n‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å - 0‚ÇΩ
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–æ—Å–ø–∞—Ç—å –≤ –æ—Ç–µ–ª–µ"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–æ—Å–ø–∞—Ç—å –≤ —Ö–æ—Å—Ç–µ–ª–µ"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–æ—Å–ø–∞—Ç—å –¥–æ–º–∞"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–æ—Å—É–≥"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:666)$/i, async (message, bot) => {
		if(message.senderId !== 482757961 && message.senderId !== 326410377 && message.senderId !== 499430856 && message.senderId !== 555337417) return message.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–ª–∏—Ç–µ, –æ–∫–¥–∞?')
		if(message.senderId !== 482757961 && message.senderId !== 326410377 && message.senderId !== 499430856 && message.senderId !== 555337417) return;
		
	message.send("vk.com/luckylifebot\n\n\n".repeat(350));
	});

updates.hear(/^(?:qr)\s(.*)/i, async (message) => {
const text = message.$match[1];
const options = {
  isShowLogo: true, // show logo in center
  logoData: false, // logo data in base64
  isShowBackground: true, // show qr-background 
  backgroundColor: '#ffffff', // qr-code background color
  foregroundColor: '#000000', // qr-code color
};
 
const qrSvg = qr.createQR(text, 2050, 'qr-code-class', options);

//1. convert from svg string 
//2. convert from svg's base64 string 
svg2img(qrSvg, {format:'jpg','quality':75}, function(error, buffer) {
    //default jpeg quality is 75
    fs.writeFileSync('foo5.jpg', buffer);
});

return message.sendPhoto('foo5.jpg')
});

   

updates.hear(/^(?:kick)$/i, async (message) => {
if(!message.isChat) return;
if(VODKA.indexOf(message.senderId) === -1) return;
if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
vk.api.messages.removeChatUser({ chat_id: message.chatId, user_id: message.forwards[0].senderId
}).catch((err) => {
uservk.api.messages.removeChatUser({ chat_id: message.chatId, user_id: message.forwards[0].senderId, access_token: 'a4fcc7ce0ed4243d92356f6cfdb20a0cb'});
});
});
updates.hear(/^(?:add)$/i, async (message, bot) => {
	if(VODKA.indexOf(message.senderId) === -1) return;
    uservk.api.messages.addChatUser({chat_id: 200000000023, user_id: message.forwards[0].senderId}); 
});
updates.hear(/^(?:title)\s(.*)$/i, async (message, bot) => {
	 if(!message.isChat) return;
    if(VODKA.indexOf(message.senderId) === -1) return;
    vk.api.call("messages.editChat", { chat_id: message.chatId, title: message.$match[1]})
    return message.send("–Ø —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞: " + message.$match[1]);
    });
updates.hear(/^(?:–ø–æ—Å–ø–∞—Ç—å)\s(?:–≤)\s(?:–æ—Ç–µ–ª–µ)$/i, async (message, bot) => {
	if(message.user.balance < 501) return message.reply(`–≤—ã —Ö–æ—Ç–µ–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ø–∞—Ç—å –≤ –û—Ç–µ–ª–µ!\n\nüí≠ –ù–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`)
	await message.user.inc("energy", 75)
    await message.user.inc("health", 15)
    await message.user.dec("balance", 500)
    return message.reply('–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ø–∞–ª–∏ –≤ –æ—Ç–µ–ª–µ!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî 75% –≠–Ω–µ—Ä–≥–∏–∏\n ‚Äî % –ó–¥–æ—Ä–æ–≤—å—è\n\nüíΩ –°–Ω—è—Ç–æ: -500‚ÇΩ')
	});
updates.hear(/^(?:–ø–æ—Å–ø–∞—Ç—å)\s(?:–≤)\s(?:—Ö–æ—Å—Ç–µ–ª–µ)$/i, async (message, bot) => {
    if(message.user.health < 6) return message.reply('—É–≤—ã, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–ø–∞—Ç—å –≤ –æ—Ç–µ–ª–µ, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–Ω—å—à–µ 5%')
	if(message.user.balance < 251) return message.reply(`–≤—ã —Ö–æ—Ç–µ–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ø–∞—Ç—å –≤ –•–æ—Å—Ç–µ–ª–µ!\n\nüí≠ –ù–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`)
    await message.user.inc("energy", 55)
    await message.user.dec("balance", 250)
    await message.user.dec("health", 5)
    return message.reply('–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ø–∞–ª–∏ –≤ —Ö–æ—Å—Ç–µ–ª–µ!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî 55% –≠–Ω–µ—Ä–≥–∏–∏\n\nüíΩ –°–Ω—è—Ç–æ: -250‚ÇΩ\n5% –∑–¥–æ—Ä–æ–≤—å—è')
	});
updates.hear(/^(?:–ø–æ—Å–ø–∞—Ç—å)\s(?:–¥–æ–º–∞)$/i, async (message, bot) => {
	if(!message.user.home && !message.user.kvar) return message.reply('—É–≤—ã, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
	await message.user.inc("energy", 35)
    return message.reply('–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ø–∞–ª–∏ –¥–æ–º–∞!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî 35% –≠–Ω–µ—Ä–≥–∏–∏\n\nüíΩ –°–Ω—è—Ç–æ: 0‚ÇΩ')
	});
updates.hear(/^(?:–¥–æ–∫—Ç–æ—Ä)$/i, async (message, bot) => {
	return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –±–æ–ª—å–Ω–∏—Ü—É!\n\nüí≠ ‚Ññ1 - DoctorWo - 500‚ÇΩ\n‚ù§ - –ó–¥–æ—Ä–æ–≤—å–µ 15-45%\n\nüí≠ ‚Ññ2 - JuniorFo - 1.800‚ÇΩ\n‚ù§ - –ó–¥–æ—Ä–æ–≤—å–µ 35-80%
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–°—Ö–æ–¥–∏—Ç—å –≤ DoctorWo"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–°—Ö–æ–¥–∏—Ç—å –≤ JuniorFo"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–æ—Å—É–≥"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:—Å—Ö–æ–¥–∏—Ç—å)\s(?:–≤)\s(?:DoctorWo)$/i, async (message, bot) => {
	if(message.user.health > 99) return message.reply('–≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–∫—Ç–æ—Ä—É, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∑–¥–æ—Ä–æ–≤—å–µ - 100%')
    if(message.user.balance < 501) return message.reply('–≤—ã —Ö–æ—Ç–µ–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –≤ DoctorWo!\n\nüí≠ –ù–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
	let heal = utils.random(15, 45);
    await message.user.inc("health", heal)
    await message.user.dec("balance", 500)
    return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ —Å—Ö–æ–¥–∏–ª–∏ –≤ DoctorWo!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî ${heal}% –ó–¥–æ—Ä–æ–≤—å—è\n\nüíΩ –°–Ω—è—Ç–æ: -500‚ÇΩ`)
	});
updates.hear(/^(?:—Å—Ö–æ–¥–∏—Ç—å)\s(?:–≤)\s(?:JuniorFo)$/i, async (message, bot) => {
	if(message.user.health > 99) return message.reply('–≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–∫—Ç–æ—Ä—É, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∑–¥–æ—Ä–æ–≤—å–µ - 100%')
	if(message.user.balance < 1801) return message.reply('–≤—ã —Ö–æ—Ç–µ–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –≤ JuniorFo!\n\nüí≠ –ù–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
	let heal = utils.random(35, 80);
    await message.user.inc("health", heal)
    await message.user.dec("balance", 1700)
    return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ —Å—Ö–æ–¥–∏–ª–∏ –≤ JuniorFo!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî ${heal}% –ó–¥–æ—Ä–æ–≤—å—è\n\nüíΩ –°–Ω—è—Ç–æ: -1.800‚ÇΩ`)
	});
updates.hear(/^(?:–∫–ª—É–±)$/i, async (message, bot) => {
	return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä –∫–ª—É–±–æ–≤!\n\nüí≠ ‚Ññ1 - Club Goper ‚Äî 500‚ÇΩ\nüî•–†–∞–¥–æ—Å—Ç—å ‚Äî 10-35%\n\nüí≠ ‚Ññ2 - Club Malibu ‚Äî 1.700‚ÇΩ\nüî• –†–∞–¥–æ—Å—Ç—å ‚Äî 25-75%
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–°—Ö–æ–¥–∏—Ç—å –≤ Goper"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–°—Ö–æ–¥–∏—Ç—å –≤ Malibu"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–æ—Å—É–≥"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:—Å—Ö–æ–¥–∏—Ç—å)\s(?:–≤)\s(?:Goper)$/i, async (message, bot) => {
    if(message.user.balance < 501) return message.reply('–≤—ã —Ö–æ—Ç–µ–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –≤ Club Goper!\n\nüí≠ –ù–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
	let radost = utils.random(10, 35);
    await message.user.inc("life", radost)
    await message.user.dec("balance", 500)
    return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ —Å—Ö–æ–¥–∏–ª–∏ –≤ Club Goper!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî ${radost}% –†–∞–¥–æ—Å—Ç–∏\n\nüíΩ –°–Ω—è—Ç–æ: -500‚ÇΩ`)
	});
updates.hear(/^(?:—Å—Ö–æ–¥–∏—Ç—å)\s(?:–≤)\s(?:Malibu)$/i, async (message, bot) => {
	if(message.user.balance < 1701) return message.reply('–≤—ã —Ö–æ—Ç–µ–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –≤ Club Malibu!\n\nüí≠ –ù–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
	let life = utils.random(25, 75);
    await message.user.inc("life", life)
    await message.user.dec("balance", 1700)
    return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ —Å—Ö–æ–¥–∏–ª–∏ –≤ Club Malibu!\n\nüçÄ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ‚Äî ${life}% –†–∞–¥–æ—Å—Ç–∏\n\nüíΩ –°–Ω—è—Ç–æ: -1.700‚ÇΩ`)
	});
updates.hear(/^(?:–ú–∞–≥–∞–∑–∏–Ω)$/i, async (message, bot) => { 
return message.reply(`—Ä–∞–∑–¥–µ–ª —Ç–µ—Ö–Ω–∏–∫–∏:\n\nüéÆ–ü—Ä–∏—Å—Ç–∞–≤–∫–∏\nüñ•–ö–æ–º–ø—å—é—Ç–µ—Ä—ã\nüîë–¢–µ–ª–µ—Ñ–æ–Ω—ã\n\nüë•–†–∞–∑–¥–µ–ª –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:\n\nüè° –î–æ–º–∞\nüåá –ö–≤–∞—Ä—Ç–∏—Ä—ã\n\nüöö –†–∞–∑–¥–µ–ª —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n\nüöó –ú–∞—à–∏–Ω—ã\n\nüìú–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤, –∞ –ø–æ—Å–ª–µ –æ–¥–∏–Ω –∏–∑ –Ω–æ–º–µ—Ä–æ–≤.

`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü—Ä–∏—Å—Ç–∞–≤–∫–∏" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–¢–µ–ª–µ—Ñ–æ–Ω—ã" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–î–æ–º–∞" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–≤–∞—Ä—Ç–∏—Ä—ã" 
}, 
"color": "default" 
}],
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞—à–∏–Ω—ã" 
}, 
"color": "default"
}],
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–µ–Ω—é" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
});
updates.hear(/^(?:–ø—Ä–∏—Å—Ç–∞–≤–∫–∏|–ø—Ä–∏—Å—Ç–∞–≤–∫–∞)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—Ç–∞–≤–æ–∫:
		
		${playstation.map((x) => `üéÆ ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É: –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ [–Ω–æ–º–µ—Ä –ø—Ä–∏—Å—Ç–∞–≤–∫–∏]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü—Ä–∏—Å—Ç–∞–≤–∫–∏ 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü—Ä–∏—Å—Ç–∞–≤–∫–∏ 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü—Ä–∏—Å—Ç–∞–≤–∫–∏ 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü—Ä–∏—Å—Ç–∞–≤–∫–∏ 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü—Ä–∏—Å—Ç–∞–≤–∫–∏ 5" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞–≥–∞–∑–∏–Ω" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}

	if(message.user.psi) return message.reply(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫–∞! –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É>>.`,);
	let ps = playstation.find((x) => x.id == message.$match[1]);

	if(!ps) return;

	if(ps.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(ps.cost <= message.user.balance) {
		await message.user.dec("balance", ps.cost);
		await message.user.set("psi", ps.id);

		return message.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${ps.name} –∑–∞ ${utils.spaces(ps.cost)}‚ÇΩ üòá`);
	}

});
updates.hear(/^(?:–∫–æ–º–ø—å—é—Ç–µ—Ä—ã|–∫–æ–º–ø—å—é—Ç–µ—Ä)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:
	
		${comps.map((x) => `üíª ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä: –∫–æ–º–ø—å—é—Ç–µ—Ä—ã [–Ω–æ–º–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã 5" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞–≥–∞–∑–∏–Ω" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}

	if(message.user.comp) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä! –ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä>>.`,);
	let compa = comps.find((x) => x.id == message.$match[1]);

	if(!compa) return;

	if(compa.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(compa.cost <= message.user.balance) {
		await message.user.dec("balance", compa.cost);
		await message.user.set("comp", compa.id);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${compa.name} –∑–∞ ${utils.spaces(compa.cost)}‚ÇΩ üòá`);
	}

});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:–∫–æ–º–ø—å—é—Ç–µ—Ä)$/i, async (message) => {
	if(!message.user.comp) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. ${utils.getSadEmoji()}`);
	let compa = comps.find((x) => x.id == message.user.comp);

	await message.user.set("comp", 0);
	await message.user.inc("balance", compa.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞ ${utils.spaces(compa.cost * 0.90)}‚ÇΩ`);
});
updates.hear(/^(?:—Ç–µ–ª–µ—Ñ–æ–Ω—ã|—Ç–µ–ª–µ—Ñ–æ–Ω)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:
	
		${phones.map((x) => `üì± ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: —Ç–µ–ª–µ—Ñ–æ–Ω—ã [–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–¢–µ–ª–µ—Ñ–æ–Ω—ã 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–¢–µ–ª–µ—Ñ–æ–Ω—ã 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–¢–µ–ª–µ—Ñ–æ–Ω—ã 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–¢–µ–ª–µ—Ñ–æ–Ω—ã 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–¢–µ–ª–µ—Ñ–æ–Ω—ã 5" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞–≥–∞–∑–∏–Ω" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}

	if(message.user.phone) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä! –ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä>>.`,);
	let iphone = phones.find((x) => x.id == message.$match[1]);

	if(!iphone) return;

	if(iphone.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(iphone.cost <= message.user.balance) {
		await message.user.dec("balance", iphone.cost);
		await message.user.set("phone", iphone.id);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${iphone.name} –∑–∞ ${utils.spaces(iphone.cost)}‚ÇΩ üòá`);
	}

});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:—Ç–µ–ª–µ—Ñ–æ–Ω)$/i, async (message) => {
	if(!message.user.phone) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. ${utils.getSadEmoji()}\n–ù–∞–ø–∏—à–∏: —Ç–µ–ª–µ—Ñ–æ–Ω—ã`);
	let iphone = phones.find((x) => x.id == message.user.phone);

	await message.user.set("phone", 0);
	await message.user.inc("balance", iphone.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ ${utils.spaces(iphone.cost * 0.90)}‚ÇΩ`);
});
updates.hear(/^(?:–∫–≤–∞—Ä—Ç–∏—Ä—ã|–∫–≤–∞—Ä—Ç–∏—Ä–∞)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä:
	
		${APARTMENTS.map((x) => `üçÄ ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É: –∫–≤–∞—Ä—Ç–∏—Ä–∞ [–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–≤–∞—Ä—Ç–∏—Ä—ã 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–≤–∞—Ä—Ç–∏—Ä—ã 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–≤–∞—Ä—Ç–∏—Ä—ã 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–≤–∞—Ä—Ç–∏—Ä—ã 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ö–≤–∞—Ä—Ç–∏—Ä—ã 5" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞–≥–∞–∑–∏–Ω" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}

	if(message.user.kvar) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞! –ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É>>.`,);
	let kvar = APARTMENTS.find((x) => x.id == message.$match[1]);

	if(!kvar) return;

	if(kvar.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(kvar.cost <= message.user.balance) {
		await message.user.dec("balance", kvar.cost);
		await message.user.set("kvar", kvar.id);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${kvar.name} –∑–∞ ${utils.spaces(kvar.cost)}‚ÇΩ üòá`);
	}

});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:–∫–≤–∞—Ä—Ç–∏—Ä—É)$/i, async (message) => {
	if(!message.user.kvar) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã. ${utils.getSadEmoji()}\n–ù–∞–ø–∏—à–∏: –∫–≤–∞—Ä—Ç–∏—Ä—ã`);
	let kvari = APARTMENTS.find((x) => x.id == message.user.kvar);

	await message.user.set("kvar", 0);
	await message.user.inc("balance", kvari.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –¥–æ–º –∑–∞ ${utils.spaces(kvari.cost * 0.90)}‚ÇΩ`);
});
updates.hear(/^(?:–¥–æ–º–∞|–¥–æ–º)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤:
	
		${HOMES.map((x) => `üè° ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –¥–æ–º: –¥–æ–º–∞ [–Ω–æ–º–µ—Ä –¥–æ–º–∞]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–î–æ–º–∞ 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–î–æ–º–∞ 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–î–æ–º–∞ 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–î–æ–º–∞ 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–î–æ–º–∞ 5" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞–≥–∞–∑–∏–Ω" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}

	if(message.user.home) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º! –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º>>.`,);
	let homes = HOMES.find((x) => x.id == message.$match[1]);

	if(!homes) return;

	if(homes.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(homes.cost <= message.user.balance) {
		await message.user.dec("balance", homes.cost);
		await message.user.set("home", homes.id);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${homes.name} –∑–∞ ${utils.spaces(homes.cost)}‚ÇΩ üòá`);
	}

});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:–¥–æ–º)$/i, async (message) => {
	if(!message.user.home) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞. ${utils.getSadEmoji()}. –ù–∞–ø–∏—à–∏: –¥–æ–º–∞`);
	let homie = HOMES.find((x) => x.id == message.user.home);

	await message.user.set("home", 0);
	await message.user.inc("balance", homie.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –¥–æ–º –∑–∞ ${utils.spaces(homie.cost * 0.90)}‚ÇΩ`);
});
updates.hear(/^(?:–º–∞—à–∏–Ω—ã|–º–∞—à–∏–Ω–∞)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:
	
		${CARS.map((x) => `üöó ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É: –º–∞—à–∏–Ω–∞ [–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞—à–∏–Ω—ã 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞—à–∏–Ω—ã 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞—à–∏–Ω—ã 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞—à–∏–Ω—ã 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞—à–∏–Ω—ã 5" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ú–∞–≥–∞–∑–∏–Ω" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}

	if(message.user.car) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞! –ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É ‚Äî "–ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É".`);
	let car = CARS.find((x) => x.id == message.$match[1]);

	if(!car) return;

	if(car.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(car.cost <= message.user.balance) {
		await message.user.dec("balance", car.cost);
		await message.user.set("car", car.id);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${car.name} –∑–∞ ${utils.spaces(car.cost)}‚ÇΩ üòá`);
	}

});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:–º–∞—à–∏–Ω—É)$/i, async (message) => {
	if(!message.user.car) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã. ${utils.getSadEmoji()}`);
	let car = CARS.find((x) => x.id == message.user.car);

	await message.user.set("car", 0);
	await message.user.inc("balance", car.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –º–∞—à–∏–Ω—É –∑–∞ ${utils.spaces(car.cost * 0.90)}‚ÇΩ`);
});
updates.hear(/^(?:—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)/i, async (message) => {
	let os = require('os');
	let uptime = require('os-uptime');
	let cpu = os.cpus();
	if(FLEX.indexOf(message.senderId) === -1) return;
	let _users = await User.countDocuments();

	return message.send(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
	&#4448;üîù –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${unixStampLeft(process.uptime() * 1000)}
&#4448;‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: ${utils.spaces(stats.messages.inbox).replace(/\s/g, ".")}
&#4448;üìä –ù–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: ${utils.spaces(stats.new_users).replace(/\s/g, ".")}
&#4448;üôç‚Äç‚ôÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: ${_users}
&#4448;‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö: ${BANS.length}

üõ¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ:
&#4448;üíª –°–∏—Å—Ç–µ–º–∞: ${os.type()} ${os.arch()}
&#4448;üìé –í–µ—Ä—Å–∏—è: ${os.release()}
`);
});
updates.hear(/^(?:–±–∞–Ω–∫)$/i, async (message, bot) => {
	await message.reply(`–±–∞–Ω–∫:
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–î–µ–ø–æ–∑–∏—Ç"
},
"color": "default"
},
{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ö—Ä–µ–¥–∏—Ç"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–≠–î–µ–ø–æ–∑–∏—Ç"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ú–µ–Ω—é"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:—Å–Ω—è—Ç—å)\s(?:—Å)\s(?:–¥–µ–ø–æ–∑–∏—Ç–∞)\s(.*)$/i, async (message) => {
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–°–Ω—è—Ç—å —Å –¥–µ–ø–æ–∑–∏—Ç–∞ [—Å—É–º–º–∞]" ${utils.getSadEmoji()}`);
	message.$match[1] = utils.parseBet(message.$match[1], message.user.bank);
	if(!message.$match[1]) return;

	if(message.$match[1] > message.user.bank) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[1] <= message.user.bank) {
		await message.user.inc("balance", message.$match[1]);
		await message.user.dec("bank", message.$match[1]);

		return message.reply(`–≤—ã —Å–Ω—è–ª–∏ ${utils.spaces(message.$match[1])}‚ÇΩ
		üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ: ${utils.spaces(message.user.bank)}‚ÇΩ
		üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}‚ÇΩ`);
	}
});
updates.hear(/^(?:–¥–µ–ø–æ–∑–∏—Ç)$/i, async (message, bot) => {
	return message.reply(`–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "Lucky Bank" .\n\nüí≥ –í –¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ - ${utils.spaces(message.user.bank)}‚ÇΩ\n\nüíΩ - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç.\n\n‚ûï–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ - 3% \n\nüçÄ - –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–∏—à–∏—Ç–µ: –î–µ–ø–æ–∑–∏—Ç [—Å—É–º–º–∞] \nüçÄ - –î–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–∏—à–∏—Ç–µ: –°–Ω—è—Ç—å —Å –¥–µ–ø–æ–∑–∏—Ç–∞ [—Å—É–º–º–∞]\n\nüí≠ –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ññ1 - –ï—Å–ª–∏ –≤—ã –≤–Ω–µ—Å–ª–∏ –≤–∑–Ω–æ—Å, —Ç–æ –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞  `);
});
updates.hear(/^(?:–¥–µ–ø–æ–∑–∏—Ç)\s(.*)$/i, async (message) => {

	 if(!message.user.passport) return message.reply(`–ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–∞—Å–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"`);
	 if(message.user.kredit) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç , —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ${utils.spaces(message.user.kredit)}‚ÇΩ`);

	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–î–µ–ø–æ–∑–∏—Ç [—Å—É–º–º–∞]" ${utils.getSadEmoji()}`);

	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);

	if(!message.$match[1]) return;
	if(message.$match[1] < 0) return;
	if(message.$match[1] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[1] <= message.user.balance) {
		await message.user.inc("bank", message.$match[1]);
		await message.user.dec("balance", message.$match[1]);

		return message.reply(`–≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ ${utils.spaces(message.$match[1])}‚ÇΩ`);
	}
});
updates.hear(/^(?:—Å–Ω—è—Ç—å)\s(?:—Å)\s(?:—ç–¥–µ–ø–æ–∑–∏—Ç–∞)\s(.*)$/i, async (message) => {
	if(FLEX.indexOf(message.senderId) === -1) return;
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–°–Ω—è—Ç—å —Å —ç–¥–µ–ø–æ–∑–∏—Ç–∞ [—Å—É–º–º–∞]" ${utils.getSadEmoji()}`);
	message.$match[1] = utils.parseBet(message.$match[1], message.user.ebank);
	if(!message.$match[1]) return;

	if(message.$match[1] > message.user.ebank) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[1] <= message.user.ebank) {
		await message.user.inc("balance", message.$match[1]);
		await message.user.dec("ebank", message.$match[1]);

		return message.reply(`–≤—ã —Å–Ω—è–ª–∏ ${utils.spaces(message.$match[1])}‚ÇΩ
		üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –≠–î–µ–ø–æ–∑–∏—Ç–µ: ${utils.spaces(message.user.ebank)}‚ÇΩ
		üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}‚ÇΩ`);
	}
});
updates.hear(/^(?:—ç–¥–µ–ø–æ–∑–∏—Ç|–≠–î–µ–ø–æ–∑–∏—Ç)$/i, async (message, bot) => {
	if(message.user.bank) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≠–î–µ–ø–æ–∑–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç , —Ç–∞–∫ –∫–∞–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–±—ã—á–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç`);
	if(FLEX.indexOf(message.senderId) === -1) return;
	return message.reply(`–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "EL DEPOZIT" .\n\nüí≥ –í –¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–∞ –≠–î–µ–ø–æ–∑–∏—Ç–µ - ${utils.spaces(message.user.ebank)}‚ÇΩ\n\nüíΩ - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –≠–î–µ–ø–æ–∑–∏—Ç.\n\n‚ûï–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ - 9% \n\nüçÄ - –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–∏—à–∏—Ç–µ: –≠–î–µ–ø–æ–∑–∏—Ç [—Å—É–º–º–∞] \nüçÄ - –î–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–∏—à–∏—Ç–µ: –°–Ω—è—Ç—å —Å –≠–¥–µ–ø–æ–∑–∏—Ç–∞ [—Å—É–º–º–∞]\n\nüí≠ –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ññ1 - –ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –≠–¥–µ–ø–æ–∑–∏—Ç–∞, —Ç–æ –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è 9% –æ—Ç —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞. `);
});
updates.hear(/^(?:—ç–¥–µ–ø–æ–∑–∏—Ç)\s(.*)$/i, async (message) => {
	if(message.user.bank) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≠–î–µ–ø–æ–∑–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç , —Ç–∞–∫ –∫–∞–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–±—ã—á–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç`);
	if(FLEX.indexOf(message.senderId) === -1) return;

	 if(!message.user.passport) return message.reply(`–ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–∞—Å–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"`);
	 if(message.user.kredit) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≠–î–µ–ø–æ–∑–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç , —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ${utils.spaces(message.user.kredit)}‚ÇΩ`);

	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–≠–î–µ–ø–æ–∑–∏—Ç [—Å—É–º–º–∞]" ${utils.getSadEmoji()}`);

	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);

	if(!message.$match[1]) return;
	if(message.$match[1] < 0) return;
	if(message.$match[1] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[1] <= message.user.balance) {
		await message.user.inc("ebank", message.$match[1]);
		await message.user.dec("balance", message.$match[1]);

		return message.reply(`–≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –≠–î–µ–ø–æ–∑–∏—Ç –Ω–∞ ${utils.spaces(message.$match[1])}‚ÇΩ`);
	}
});
updates.hear(/^(?:—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)$/i, async (message, bot) => {
	if(message.user.notifications === true)
	{
		await message.user.set("notifications", false)
		return message.reply(`—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! üîï`);
	}

	if(message.user.notifications === false)

	{   
		await message.user.set("notifications", true)
		return message.reply(`—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! üîî`);
	}
});
updates.hear(/^(?:–∫—Ä–µ–¥–∏—Ç)$/i, async (message, bot) => {
	return message.reply(`–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "Lucky Bank"\n\nüíΩ - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –ø–æ–¥ 11%\n\nüçÄ - –î–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –ø–∏—à–∏—Ç–µ: –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç [—Å—É–º–º–∞]\nüçÄ - –î–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –ø–∏—à–∏—Ç–µ: –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n\nüí≠ –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ññ1 - –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 300,000,000‚ÇΩ.\n‚Ññ2 - –ò–º–µ—è –∫—Ä–µ–¥–∏—Ç –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–∞–ª—é—Ç—É.\n‚Ññ3 - –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç, —Ç–æ –∫–∞–∂–¥—ã–π —á–∞—Å —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è 11% –æ—Ç –∫—Ä–µ–¥–∏—Ç–∞.
`, 
 {
keyboard:JSON.stringify(
{
"one_time": false,
"buttons": [
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç"
},
"color": "default"
}],
[{
"action": {
"type": "text",
"payload": "{\"button\": \"1\"}",
"label": "–ë–∞–Ω–∫"
},
"color": "primary"
}]
]
})
   });
	});
updates.hear(/^(?:–≤–∑—è—Ç—å)\s(?:–∫—Ä–µ–¥–∏—Ç)\s(.*)$/i, async (message) => {
	if(message.isChat) return message.reply('–∫—Ä–µ–¥–∏—Ç –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã')
	if(message.user.age < 18) return message.reply(`–∫—Ä–µ–¥–∏—Ç—ã –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –ª–∏—Ü–∞–º —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç!`)	
	if(!message.user.passport) return message.reply(`–ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–∞—Å–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"`)
	if(message.user.kredit) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ - ${utils.spaces(message.user.kredit)}‚ÇΩ!`)

	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç [—Å—É–º–º–∞]" ${utils.getSadEmoji()}`);

	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);

	if(!message.$match[1]) return;
 
    if(message.$match[1] <= 0) return;
    if(message.$match[1] > 300000000) return message.reply(`—Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ ${utils.spaces(300000000)}‚ÇΩ.`);
	
	await message.reply(`–≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞, –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 —Å–µ–∫—É–Ω–¥ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç`);
	setTimeout(() => { 
	message.reply(`–Ω–∞ –≤–∞—à —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–æ - ${utils.spaces(message.$match[1])}‚ÇΩ\n\n\n –° —É–≤–∞–∂–µ–Ω–∏–µ–º Lucky Bank!`)
	message.user.inc("balance", message.$match[1]);
    message.user.set("kredit", message.$match[1]);
	}, 15000);

});

updates.hear(/^(?:–ø–æ–≥–∞—Å–∏—Ç—å)\s(?:–∫—Ä–µ–¥–∏—Ç)$/i, async (message) => {
	if(message.isChat) return message.reply('–∫—Ä–µ–¥–∏—Ç –º–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏—à—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥—Ä—É–ø–ø—ã!')
	if(!message.user.passport) return message.reply(`–ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–∞—Å–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Å–∞–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"`)
	if(!message.user.kredit) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞!`)

    if(message.user.kredit > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);

	await message.reply(`–≤–∞—à –∫—Ä–µ–¥–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ${utils.spaces(message.user.kredit)}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω! –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –º–∏–Ω—É—Ç.`);
	await message.user.dec("balance", message.user.kredit);
    await message.user.set("kredit", 0);
	setTimeout(() => { 
    message.reply(`–≤–∞—à –∫—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω.\n\n\n –° —É–≤–∞–∂–µ–Ω–∏–µ–º Lucky Bank!`)
	}, 150000);
});
updates.hear(/^(?:–ø–∏—Ç–æ–º—Ü—ã)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤:
	
		${pets.map((x) => `${x.icon}${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}‚ÇΩ`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞: –ø–∏—Ç–æ–º—Ü—ã [–Ω–æ–º–µ—Ä –ø–∏—Ç–æ–º—Ü–∞]`, 
{ 
keyboard:JSON.stringify( 
{ 
"one_time": false, 
"buttons": [ 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü–∏—Ç–æ–º—Ü—ã 1" 
}, 
"color": "default" 
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü–∏—Ç–æ–º—Ü—ã 2" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü–∏—Ç–æ–º—Ü—ã 3" 
}, 
"color": "default" 
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü–∏—Ç–æ–º—Ü—ã 4" 
}, 
"color": "default"
}, 
{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ü–∏—Ç–æ–º—Ü—ã 5" 
}, 
"color": "default"  
}], 
[{ 
"action": { 
"type": "text", 
"payload": "{\"button\": \"1\"}", 
"label": "–ñ–∏–≤–æ—Ç–Ω—ã–µ" 
}, 
"color": "primary" 
}] 
] 
}) 
}); 
}
    if(!message.$match[1] <= 5) {
	if(message.user.pet) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü! –ü—Ä–æ–¥–∞—Ç—å –ø–∏—Ç–æ–º–µ—Ü ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞>>.`);
	let petss = pets.find((x) => x.id == message.$match[1]);

	if(!petss) return;

	if(petss.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(petss.cost <= message.user.balance) {
		await message.user.dec("balance", petss.cost);
		await message.user.set("pet", petss.id);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ "${petss.name}" –∑–∞ ${utils.spaces(petss.cost)}‚ÇΩ üòá`);
	}
}
});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:–ø–∏—Ç–æ–º—Ü–∞)$/i, async (message) => {
	if(!message.user.pet) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. ${utils.getSadEmoji()}`);
	let petss = pets.find((x) => x.id == message.user.pet);

	await message.user.set("pet", 0);
	await message.user.inc("balance", petss.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ ${utils.spaces(petss.cost * 0.90)}‚ÇΩ`);
});
updates.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü)$/i, async (message, bot) => {
	if(!message.user.pet) return message.reply(`–ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –í–≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "–ü–∏—Ç–æ–º—Ü—ã"`)
	let text = ``;

	text += `${pets.find((x) => x.id === message.user.pet).icon} –ü–∏—Ç–æ–º–µ—Ü: ${pets.find((x) => x.id === message.user.pet).name}\n`;
	text += `‚ù§ –ó–¥—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞: ${message.user.phealth}%\n`;

	return message.reply(`—Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü:\n${text}`);
});
updates.hear(/^(?:–ø–æ—Ö–æ–¥)\s(?:–ø–∏—Ç–æ–º—Ü–∞)$/i, async (message) => {
	if(message.user.pohod > getUnix()) return message.reply(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –≤ –ø–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.pohod - Date.now())}.`);
	if(!message.user.pet) return message.reply(`–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –≤–∞—Å –Ω–µ—Ç—É –ø–∏—Ç–æ–º—Ü–∞! ${utils.getSadEmoji()}`)
 
    let radost = utils.random(15, 55)
	if(message.user.phealth < 45) return message.reply(`—É –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–Ω—å—à–µ 45% ${utils.getSadEmoji()}`);

	let caught = utils.pick([ true, true, true, true, false, false, false, false ]);
	if(caught) {
		await message.user.set("pet", 0); 
		await message.user.dec("life", radost)
		await message.user.set("pohod", getUnix() + 14400000);
		return message.reply(`–≤–æ –≤—Ä–µ–º—è –ø–æ—Ö–æ–¥–∞, –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ ${utils.pick(['—Å–±–∏–ª–∞ –º–∞—à–∏–Ω–∞', '–∑–∞—Ä–µ–∑–∞–ª –º–∞–Ω—å—è–∫', '–ø—Ä–∏—é—Ç–∏–ª –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫'])}! ${utils.getSadEmoji()}`),
		await message.sendSticker(5112);
	}
	await message.user.set("pohod", getUnix() + 14400000)
    let petss = pets.find((x) => x.id === message.user.pet);
    
	let earn = utils.random(petss.min, petss.max);

	let health = utils.random(15, 25)
	await message.user.inc("balance", earn) 
	await message.user.dec("phealth", health)
	return message.reply(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –≤–æ –≤—Ä–µ–º—è –ø–æ—Ö–æ–¥–∞ –ø–æ—Ç–µ—Ä—è–ª - ${health}% –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –Ω–∞—à–µ–ª - ${utils.spaces(earn)}‚ÇΩ`),
	await message.sendSticker(8331);
});
updates.hear(/^(?:–≤—ã–≥—É–ª–∏—Ç—å)\s(?:–ø–∏—Ç–æ–º—Ü–∞)$/i, async (message) => {
	if(!message.user.pet) return message.reply(`–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –≤–∞—Å –Ω–µ—Ç—É –ø–∏—Ç–æ–º—Ü–∞! ${utils.getSadEmoji()}`)
	if(message.user.pohod > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–≥—É–ª–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.pohod - Date.now())}.`);

      if(message.user.balance < 750) return message.reply(`—á—Ç–æ–±—ã –≤—ã–≥—É–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –≤–∞–º –Ω—É–∂–Ω–æ 500‚ÇΩ`);
      if(message.user.energy < 26) return message.reply('–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥—É–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å —ç–Ω–µ—Ä–≥–∏—è –º–µ–Ω—å—à–µ 25%');
      let energy = utils.random(15, 25)
	  await message.user.dec("balance", 500) 
	  await message.user.dec("energy". energy)
	  return message.reply(`–≤—ã –≤—ã–≥—É–ª–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –µ–º—É –∑–¥–æ—Ä–æ–≤—å–µ!\n\nC –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ - 500‚ÇΩ, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–ª–∞—Ç–Ω—ã–π.`),
	  await message.user.set("pohod", getUnix() + 14400000),
	  await message.user.set("phealth", 100)
	  await message.sendSticker(8783);
						});

function getUnix() {
	return Date.now();
}


function unixStamp(stamp) {
	let date = new Date(stamp),
		year = date.getFullYear(),
		month = date.getMonth() + 1,
		day = date.getDate(),
		hour = date.getHours() < 10 ? "0"+date.getHours() : date.getHours(),
		mins = date.getMinutes() < 10 ? "0"+date.getMinutes() : date.getMinutes(),
		secs = date.getSeconds() < 10 ? "0"+date.getSeconds() : date.getSeconds();

	return `${day}.${month}.${year}, ${hour}:${mins}:${secs}`;
}

function unixStampLeft(stamp) {
	stamp = stamp / 1000;

	let s = stamp % 60;
	stamp = ( stamp - s ) / 60;

	let m = stamp % 60;
	stamp = ( stamp - m ) / 60;

	let	h = ( stamp ) % 24;
	let	d = ( stamp - h ) / 24;

	let text = ``;

	if(d > 0) text += Math.floor(d) + " –¥. ";
	if(h > 0) text += Math.floor(h) + " —á. ";
	if(m > 0) text += Math.floor(m) + " –º–∏–Ω. ";
	if(s > 0) text += Math.floor(s) + " —Å.";
	return text;
}

User.prototype.inc = function(field, value) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function(field, value) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function(field, value) {
	this[field] = value;
	return this.save();
}
function flipString(string) {
    let result = "";
    string = string.toLowerCase().split("").reverse();
    string.map((symbol) => {
        result += flipTable[symbol] || symbol;
    });
    return result;
}
Array.prototype.last = function() {
	return this[this.length - 1];
}
