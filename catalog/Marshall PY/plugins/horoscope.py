import time
import random
import lxml.html
from lxml import html
import aiohttp
from kutana import Plugin

plugin = Plugin(name="Astrology")
plugin.category = '–ò–Ω—Ñ–æ –∏ –ø—Ä–æ—á–µ–µ'
plugin.desc = {'–≥–æ—Ä–æ—Å–∫–æ–ø': ['{–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞}', '–≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è *–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞*, —É–∫–∞–∑—ã–≤–∞—è –±–∞–ª–ª—ã (–±–æ–≥–∞—Ç—Å—Ç–≤–æ, –∑–¥–æ—Ä–æ–≤—å–µ, –±–∏–∑–Ω–µ—Å)']}
@plugin.on_startswith_text("–≥–æ—Ä–æ—Å–∫–æ–ø")
async def on_message(message, attachments, env):
    def digits_recursive(nonneg):
        digits = []
        while nonneg:
            digits += [nonneg % 10]
            nonneg //= 10
        return digits[::-1] or [0]

    def num_to_smile(num):
        if num <= 10:
            numbers = {0:'0‚É£', 1:'1‚É£', 2:'2‚É£', 3:'3‚É£', 4:'4‚É£', 5:'5‚É£', 6:'6‚É£', 7:'7‚É£', 8:'8‚É£', 9:'9‚É£', 10:'üîü'}
            return numbers[num]
        numbers = {0:'0‚É£.', 1:'1‚É£', 2:'2‚É£', 3:'3‚É£', 4:'4‚É£', 5:'5‚É£', 6:'6‚É£', 7:'7‚É£', 8:'8‚É£', 9:'9‚É£', 10:'üîü'}
        digits = digits_recursive(num)
        result = ""
        for i in digits:
            result += numbers[i]
        return result
    links = {"—Ç–µ–ª–µ—Ü": "https://horo.mail.ru/prediction/taurus/today/",
        "–æ–≤–µ–Ω": "https://horo.mail.ru/prediction/aries/today/",
        "–±–ª–∏–∑–Ω–µ—Ü—ã": "https://horo.mail.ru/prediction/gemini/today/",
        "—Ä–∞–∫": "https://horo.mail.ru/prediction/cancer/today/",
        "–ª–µ–≤": "https://horo.mail.ru/prediction/leo/today/",
        "–¥–µ–≤–∞": "https://horo.mail.ru/prediction/virgo/today/",
        "–≤–µ—Å—ã": "https://horo.mail.ru/prediction/libra/today/",
        "—Å–∫–æ—Ä–ø–∏–æ–Ω": "https://horo.mail.ru/prediction/scorpio/today/",
        "—Å—Ç—Ä–µ–ª–µ—Ü": "https://horo.mail.ru/prediction/sagittarius/today/",
        "–∫–æ–∑–µ—Ä–æ–≥": "https://horo.mail.ru/prediction/capricorn/today/",
        "–≤–æ–¥–æ–ª–µ–π": "https://horo.mail.ru/prediction/aquarius/today/",
        "—Ä—ã–±—ã": "https://horo.mail.ru/prediction/pisces/today/"}
    args = env.body
    smiles = ['üòî', 'üò≠', 'üò©', 'üò†', 'üòü', 'üôÅ']
    if not args:
        return await env.reply(f'–≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {random.choice(smiles)}')
    category = args.strip().lower()
    if category in links:
        url = links[category] 
    else:
        return await env.reply(f'–≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {random.choice(smiles)}')
    async with aiohttp.ClientSession() as sess:
        async with sess.post(url, data=None) as resp:
            response = await resp.text()
            tree = html.fromstring(response)
            title = tree.xpath('//meta[@property="og:title"]/@content')
            text = tree.xpath('//div[@class="article__item article__item_alignment_left article__item_html"]/p/text()')
            values = tree.xpath('//span[@class="p-score-day__item__value__inner"]/text()')
            message = title[0] + '.\n\n'
            message += text[0] + '\n\n'
            message += f'üí∞: {num_to_smile(int(values[0]))} | ‚ù§: {num_to_smile(int(values[1]))} | üè•: {num_to_smile(int(values[2]))}'
            return await env.reply(message)