import datetime, random, time
from kutana.vksm import *
from kutana import Plugin
from kutana.database import *
import aiohttp, json, re, xmltodict
plugin = Plugin(name="other")
cases = (2, 0, 1, 1, 1, 2)   
def plural_form(n: int, v: (list, tuple), need_n=False, need_cases=False):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param n: —á–∏—Å–ª–æ
    :param v: –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è 1, –¥–ª—è 2, –¥–ª—è 5)

    –ü—Ä–∏–º–µ—Ä:
    plural_form(difference.days, ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"))

    :return: –ß–∏—Å–ª–æ –∏ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    """

    return f"{n if need_n is False else ''}  {v[2 if (4 < n % 100 < 20) else cases[min(n % 10, 5)]] if need_cases is False else ''}"

async def get_diff(a, b):
    if a < b:
        return int(((b-a)/a) * 100)
    elif a > b:
        return int(((a-b)/a) * 100)
    elif a == b:
        return 0

@plugin.on_startup()
async def on_startup(kutana, update):
    plugin.dict = {}
    plugin.min_bet = 50
    plugin.positive = random.choice(['üòä','üòâ','üòÉ','üòã','üòè','üòÑ'])
    plugin.negative = random.choice(['üò©','üò∞','üòí','üòî','üò¢'])
async def get_or_create_profile(user_id):
    try:
        shopcenters = (
            shopcenter
            .select()
        )
        job = (
            jobs.select()
        )
        profiles = (
            Profile
            .select()
            .where(Profile.user_id == user_id
            )
        )

        profile = list(await db.prefetch(profiles, shopcenters, job))[0]
    except IndexError:
        profile = await peewee_async.create_object(Profile, user_id=user_id)
    return profile

def text_to_value(value, text):
    value2 = 1000
    if text == '–∫' or text == 'k':
        return int(value) * int(value2)
    if text == '–∫–∫' or text == 'kk':
        return int(value) * (int(value2) ** 2)
    if text == '–∫–∫–∫' or text == 'kkk':
        return int(value) * (int(value2) ** 3)
    if text == '–∫–∫–∫–∫' or text == 'kkkk':
        return int(value) * (int(value2) ** 4)
    if text == '–∫–∫–∫–∫–∫' or text == 'kkkkk':
        return int(value) * (int(value2) ** 5)  
    if text == '–∫–∫–∫–∫–∫–∫' or text == 'kkkkkk':
        return int(value) * (int(value2) ** 6)
    if text == '–∫–∫–∫–∫–∫–∫–∫' or text == 'kkkkkkk':
        return int(value) * (int(value2) ** 7)
    if text == '–∫–∫–∫–∫–∫–∫–∫–∫' or text == 'kkkkkkkk':
        return int(value) * (int(value2) ** 8)
    return int(value)

def humanize(value):
    return "{:,}".format(round(value)).replace(",",".")

@plugin.on_startswith_text('—à–∞—Ä')
async def shar(msg,ats,env):
    if not env.body:
        return
    answers2 = '''–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ!
–î–∞.
–ù–µ—Ç.
–ë–µ—Å—Å–ø–æ—Ä–Ω–æ.
–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π.
–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞.
–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.
–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ.
–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç.
–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å.
–ù–µ —É–≤–µ—Ä–µ–Ω...
–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.
–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–µ—Ç!
–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º.
–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.
–ê –∫–∞–∫ –∂–µ –∏–Ω–∞—á–µ?.
–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª.
–ù–µ –∑–Ω–∞—é.
–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª.
–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.
–ù—É –º–æ–∂–µ—Ç –±—ã—Ç—å.
–ü—Ä–∏–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–π :c
–ù–µ –º–æ–≥—É –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.
'''.splitlines()
    return await env.reply("üîÆ" + random.choice(answers2).lower())

@plugin.on_startswith_text('–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏')
async def invert(msg,ats,env):
    flipTable = {
'a' : '\u0250',
'b' : 'q',
'c' : '\u0254',
'd' : 'p',
'e': '\u01DD',
'f': '\u025F',
'g' : '\u0183',
'h' : '\u0265',
'i' : '\u0131',
'j' : '\u027E',
'k' : '\u029E',
'l' : '\u0283',
'm' : '\u026F',
'n' : 'u',
'r' : '\u0279',
't' : '\u0287',
'v' : '\u028C',
'w' : '\u028D',
'y' : '\u028E',
'.' : '\u02D9',
'[' : ']',
'(' : ')',
'{' : '}',
'?' : '\u00BF',
'!' : '\u00A1',
"\'" : ',',
'<' : '>',
'_' : '\u203E',
'\u203F' : '\u2040',
'\u2045' : '\u2046',
'\u2234' : '\u2235',
'\r' : '\n',
'–∞' : '…ê',
'–±' : '∆ç',
'–≤' : ' ö',
'–≥' : '…π',
'–¥' : '…ì',
'–µ' : '«ù',
'—ë' : '«ù',
'–∂' : '–∂',
'–∑' : 'Œµ',
'–∏' : '–∏',
'–π' : '≈Ü',
'–∫' : ' û',
'–ª' : 'v',
'–º' : 'w',
'–Ω' : '–Ω',
'–æ' : '–æ',
'–ø' : 'u',
'—Ä' : 'd',
'—Å' : '…î',
'—Ç' : '…Ø',
'—É' : ' é',
'—Ñ' : '—Ñ',
'—Ö' : '—Ö',
'—Ü' : '«π',
'—á' : '“∫',
'—à' : 'm',
'—â' : 'm',
'—ä' : 'q',
'—ã' : 'ƒ±q',
'—å' : 'q',
'—ç' : '—î',
'—é' : 'oƒ±',
'—è' : ' Å'
}
    if not env.body:
        return
    result = ""
    for word in env.body:
        result += flipTable.get(word, word)
    return await env.reply(result)

@plugin.on_startswith_text('–∏–Ω—Ñ–∞','—à–∞–Ω—Å','–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
async def info(msg,ats,env):
    if not env.body:
        return
    answers2 = '''17e^3pi/-e%*6,0(3)... –Ø —Ç—É—Ç –ø—Ä–∏–∫–∏–Ω—É–ª
–•—É–µ—Ä—è—Ç–Ω–æ—Å—Ç—å
–†–æ–≤–Ω–æ
–ü—Ä–∏–º–µ—Ä–Ω–æ
–ó–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
–ü–æ—á—Ç–∏
–ù–∞–≤–µ—Ä–Ω–æ–µ
'''.splitlines()
    num = random.randint(1, 100)
    return await env.reply(f"{random.choice(answers2)} {str(num)}%")

@plugin.on_text('–∞–Ω–µ–∫–¥–æ—Ç')
async def joke(msg,ats,env):
    async with aiohttp.ClientSession() as sess:
        async with sess.get(f"http://nextjoke.net/Api/GetJoke?format=JSONP&ratingMin=100&NOCACHE={time.time()}") as resp:
            html = await resp.text()
            try:
                html = json.loads(html.replace("window.JokeWidget.parseResponse(", "", 1)[:-2])["text"]
            except:
                return await env.reply("–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —à—É—Ç–æ–∫ ;(")

            html = re.sub("(\n|^| )-([A-Za-z–ê-–Ø–∞-—è])", "- \\2", html)

    return await env.reply(html.replace("\r", ""))

@plugin.on_text('–æ–Ω–ª–∞–π–Ω')
async def members(msg,ats,env):
    if msg.peer_id > 2000000000:
        all_users = await env.request('messages.getConversationMembers', peer_id=msg.peer_id, fields='online')

        text = ""
        x = 0
        numerate = 1
        if not all_users.response:
            return await env.reply('–Ω–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        for user in all_users.response['profiles']:
            if 'online' in user and user['online'] == 1:
                name = await parse_user_name(env, user['id'])
                text += f"{numerate}. [id{user['id']}|{name}]\n"
                numerate += 1
                x += 1

        plural = plural_form(x, ('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'), need_n=True)
        await env.reply(f'–æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({x} –∏–∑ {all_users.response["count"]}):\n' + text)

    else:
        await env.reply("—ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ.")

@plugin.on_startswith_text('–¥–∞—Ç–∞')
async def datareg(msg,ats,env):
    async with aiohttp.ClientSession() as sess:
        data = await parse_user_id(msg, env)
        check = 0
        if not data:
            data = msg.from_id
            check = 1
        url = f"http://vk.com/foaf.php?id={data[0] if check == 0 else data}"
        async with sess.get(url) as resp:
            xml = xmltodict.parse(await resp.text())
            items = xml["rdf:RDF"]["foaf:Person"]
            item = items
            reg = item["ya:created"]
            res = reg["@dc:date"].split("T")[0]
            year = res.split("-")[0]
            mounth = res.split("-")[1].replace("01", "—è–Ω–≤–∞—Ä—è").replace("02", "—Ñ–µ–≤—Ä–∞–ª—è").replace("03", "–º–∞—Ä—Ç–∞").replace( "04","–∞–ø—Ä–µ–ª—è").replace( "05","–º–∞—è").replace( "06", "–∏—é–Ω—è").replace( "07", "–∏—é–ª—è").replace( "08", "–∞–≤–≥—É—Å—Ç–∞").replace( "09", "—Å–µ–Ω—Ç—è–±—Ä—è").replace("10","–æ–∫—Ç—è–±—Ä—è").replace("11","–Ω–æ—è–±—Ä—è").replace("12","–¥–µ–∫–∞–±—Ä—è")
            day = res.split("-")[2]
            await env.reply(f'{item["foaf:name"]}\n'
                f'üöÄ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {day} {mounth} {year} –≥–æ–¥–∞')

@plugin.on_startswith_text('—Ç—Ä–µ–π–¥')
async def trade(msg,ats,env):
    if not env.body:
        return await env.reply(f'"–ë–∏–Ω–∞—Ä–Ω—ã–π –æ–ø—Ü–∏–æ–Ω"\n‚Ä¢ –°—É—Ç—å –∏–≥—Ä—ã: –ë–∏–Ω–∞—Ä–Ω—ã–π –æ–ø—Ü–∏–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤ (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –≤–∞–ª—é—Ç) –Ω–∞ –º–∏—Ä–æ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ü–µ–Ω–∞ –µ–≥–æ –∞–∫—Ç–∏–≤–∞.\n‚Ä¢ –ü–æ–º–æ—â—å: –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ \"—Ç—Ä–µ–π–¥ [–ø—Ä–æ–≥–Ω–æ–∑ (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)] [—Å—Ç–∞–≤–∫–∞]\"')
    try:
        forecast, bet = env.body.split(" ")
    except Exception as e:
        return await env.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ \"—Ç—Ä–µ–π–¥ [–ø—Ä–æ–≥–Ω–æ–∑ (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)] [—Å—Ç–∞–≤–∫–∞]\"")
    if not forecast.lower() in ('–≤–≤–µ—Ä—Ö','–≤–Ω–∏–∑'):
        return
    p = await get_or_create_profile(msg.from_id)
    try:
        value = re.findall(r'\d+', bet)
        text = re.sub(r'[^\w\s]+|[\d]+', r'',bet).strip()
        result = text_to_value(value[0], text)
    except:
        return await env.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
    if int(result) > p.money:
        return await env.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É.")
    if int(result) < 50:
        return await env.reply('–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 50$')
    course_money = 100
    res = course_money + random.randint(-50, 50)
    data = await get_diff(res, course_money)
    p.money -= int(result)
    if forecast == "–≤–≤–µ—Ä—Ö" and res >= course_money or forecast == "–≤–Ω–∏–∑" and res <= course_money:
        p.money += int(result) + int(result)
    vk_message = f'–∫—É—Ä—Å –∞–∫—Ü–∏–∏ {"–ø–æ–¥–æ—Ä–æ–∂–∞–ª‚§¥" if res >= course_money else "–ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ"} –Ω–∞ {data}$\n{"‚úî –í—ã –ø–æ–ª—É—á–∏–ª–∏" if forecast == "–≤–≤–µ—Ä—Ö" and res >= course_money or forecast == "–≤–Ω–∏–∑" and res <= course_money else "‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏"}: {humanize(int(result))}$\nüí∞ | –í–∞—à –±–∞–ª–∞–Ω—Å: {humanize(p.money)}$\n'
    await db.update(p)
    return await env.reply(vk_message)

@plugin.on_startswith_text('–∫—É–±–∏–∫')
async def cube(msg,ats,env):
    if not env.body or not env.body.isdigit():
        return await env.reply('–¥–ª—è –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ö—É–±–∏–∫ [1-6]"')
    bot_choice = random.randint(1,6)
    if int(env.body) == int(bot_choice):
        money = random.randint(2000, 10000)
        p = await get_or_create_profile(msg.from_id)
        p.money += money
        await db.update(p)
        return await env.reply(f'–≤—ã —É–≥–∞–¥–∞–ª–∏! –ü—Ä–∏–∑ {humanize(money)}$ {plugin.positive}')
    else:
        return await env.reply(f'–≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ {plugin.negative}\nüé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {bot_choice}')

@plugin.on_startswith_text('—Å—Ç–∞–∫–∞–Ω—á–∏–∫')
async def stakan(msg,ats,env):
    if not env.body:
        return await env.reply('–¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]"')
    try:
        choice, bet = env.body.split(" ")
        if not choice.isdigit() or int(choice) > 3 or int(choice) < 1:
            raise ValueError
    except Exception as e:
        return await env.reply('–¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]"')
    try:
        value = re.findall(r'\d+', bet)
        text = re.sub(r'[^\w\s]+|[\d]+', r'',bet).strip()
        result = text_to_value(value[0], text)
    except:
        return await env.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
    p = await get_or_create_profile(msg.from_id)
    if int(result) > p.money:
        return await env.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É.")
    if int(result) < 50:
        return await env.reply('–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 50$')
    bot_choice = random.randint(1,3)
    if int(choice) == int(bot_choice):
        money = random.randint(100,2000)
        p.money += Decimal(int(result) + int(money)) 
        await db.update(p)
        return await env.reply(f'–≤—ã —É–≥–∞–¥–∞–ª–∏! –ü—Ä–∏–∑ {humanize(int(result) + int(money))}$ {plugin.positive}')
    else:
        p.money -= Decimal(result)
        await db.update(p)
        return await env.reply(f'–≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, —ç—Ç–æ –±—ã–ª {bot_choice} —Å—Ç–∞–∫–∞–Ω—á–∏–∫ {plugin.negative}')