
from kutana import Plugin
import peewee_async, peewee, datetime, time, asyncio
from kutana.database import *
import traceback
from kutana.vksm import *

plugin = Plugin(category="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
plugin.desc = {'—é–∑–µ—Ä —Å—Ç–∞—Ç': ['(–∏–º—è)', '—Å—á–∏—Ça–µ—Ç –≤c—é c—Ça—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤o —Å–æo–±—âe–Ω–∏–π, —Å–∏–º–≤–æ–ª–æ–≤, –º–∞—Ç–æ–≤ –∏ –µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ç–æ–ø–µ'],
'—Å—Ç–∞—Ç–∞ —á–∞—Ç–∞': [0, '–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–º–∞–Ω–¥–µ —é–∑–µ—Ä —Å—Ç–∞—Ç, —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞'],
'—Ç–æ–ø –±–µ—Å–µ–¥': [0, '–øo–∫–∞–∑—ã–≤a–µ—Ç —Ç–æ–ø –±e—Åe–¥ (–ø–æ c–æ–æ–±—â–µ–Ω–∏—è–º), –≤ –∫–æ—Ç–æ—Ä—ã—Ö –øp–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±o—Ç'],
'–∞–∫—Ç–∏–≤': [0, '–øo–∫–∞–∑—ã–≤–∞e—Ç –∫—Ço –∏ –∫o–≥–¥a –ø–æc–ªe–¥–Ω–∏–π p–∞–∑ —á—Ç–æ-—Ço –ø–∏ca–ª –≤ —á–∞—Çe']}
plugin.category_desc = '–°—á–∏—Çae—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±ece–¥—ã - –∫o–ª–∏—á–µc—Ç–≤–æ c–æo–±—â–µ–Ω–∏–π, —Å–∏–º–≤–æ–ª–æ–≤, c—Ç–∏–∫e—Ä–æ–≤, –ø—Ä–∏–∫—Ä–µ–ø–ªe–Ω–∏–π, –≥–æ–ªoco–≤—ãx coo–±—âe–Ω–∏–π, –∏c–øo–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫o–º–∞–Ω–¥ - –∫a–∫ –¥–ª—è –øo–ª—å–∑o–≤a—Ç–µ–ª—è, —Ça–∫ –∏ –¥–ª—è –≤—Åe–≥o —á–∞—Ç–∞, –∏ –øo–∫a–∑—ã–≤–∞–µ—Ç —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
class chat_stats_vlad(BaseModel):
    chat_id = peewee.IntegerField(default=0)
    messages = peewee.BigIntegerField(default=0)
    clear_messages = peewee.BigIntegerField(default=0)
    clear_symbols = peewee.BigIntegerField(default=0)
    symbols = peewee.BigIntegerField(default=0)
    voice_messages = peewee.BigIntegerField(default=0)
    resend_messages = peewee.BigIntegerField(default=0)
    photos = peewee.BigIntegerField(default=0)
    videos = peewee.BigIntegerField(default=0)
    audios = peewee.BigIntegerField(default=0)
    docs = peewee.BigIntegerField(default=0)
    posts = peewee.BigIntegerField(default=0)
    stickers = peewee.BigIntegerField(default=0)
    mentios = peewee.BigIntegerField(default=0)
    links = peewee.BigIntegerField(default=0)
    leaved = peewee.BigIntegerField(default=0)
    messages_with_sw = peewee.BigIntegerField(default=0)
    last_user_id = peewee.IntegerField(default=0)
class user_stats_vlad(BaseModel):
    user_id = peewee.IntegerField(default=0)
    last_message_date = peewee.DateTimeField(default=datetime.datetime.now())
    chat_id = peewee.IntegerField(default=0)
    nl_messages = peewee.BigIntegerField(default=0)
    symbols = peewee.BigIntegerField(default=0)
    clear_messages = peewee.BigIntegerField(default=0)
    clear_symbols = peewee.BigIntegerField(default=0)
    messages = peewee.BigIntegerField(default=0)
    messages_with_sw = peewee.BigIntegerField(default=0)
    lvl = peewee.IntegerField(default=1)
    remain_msgs = peewee.BigIntegerField(default=0)

plugin.db1 = chat_stats_vlad
plugin.db2 = user_stats_vlad

def get_level(last_level):
    result = round(100 * 1.3 ** last_level)
    return result

def textify_value(value):
    avalue = abs(value)

    if avalue >= 1000000000000:
        return str(round(value / 1000000000000, 2)) + "T"

    if avalue >= 1000000000:
        return str(round(value / 1000000000, 2)) + "B"

    if avalue >= 1000000:
        return str(round(value / 1000000, 2)) + "M"

    if avalue >= 100000:
        return  str(value // 1000) + "k"

    if avalue >= 1000:
        return str(value)
    return str(value) 

async def seconds(total_seconds):
    s = int(total_seconds)
    years = s // 31104000
    if years > 1:
        return '%d –≥.' % years
    s = s - (years * 31104000)
    months = s // 2592000
    if years == 1:
        r = '1 –≥.'
        if months > 0:
            r += ' %d –º.' % months
        return r
    if months > 1:
        return '%d –º.' % months
    s = s - (months * 2592000)
    days = s // 86400
    if months == 1:
        r = '1 –º.'
        if days > 0:
            r += ' %d –¥–Ω.' % days
        return r
    if days > 1:
        return '%d –¥–Ω.' % days
    s = s - (days * 86400)
    hours = s // 3600
    if days == 1:
        r = '1 –¥–Ω.'
        if hours > 0:
            r += ' %d —á.' % hours
        return r 
    s = s - (hours * 3600)
    minutes = s // 60
    seconds = s - (minutes * 60)
    if hours >= 6:
        return '%d —á.' % hours
    if hours >= 1:
        r = '%d —á.' % hours
        if hours == 1:
            r = '1 —á.'
        if minutes > 0:
            r += ' %d –º–∏–Ω.' % minutes
        return r
    if minutes == 1:
        r = '1 –º–∏–Ω.'
        if seconds > 0:
            r += ' %d —Å–µ–∫.' % seconds
        return r
    if minutes == 0:
        return '%d —Å–µ–∫.' % seconds
    if seconds == 0:
        return '%d –º–∏–Ω.' % minutes
    return '%d –º–∏–Ω. %d —Å–µ–∫.' % (minutes, seconds)

@plugin.on_text('—Å—Ç–∞—Ç–∞ —á–∞—Ç–∞')
async def chat_stats(message,attachments,env):
    if int(message.peer_id) < 2000000000:
        return
    chat_stats, user_stats = plugin.db1, plugin.db2
    chat_id = int(message.peer_id) - int(2000000000)
    def digits_recursive(nonneg):
        digits = []
        while nonneg:
            digits += [nonneg % 10]
            nonneg //= 10
        return digits[::-1] or [0]

    def num_to_smile(num):
        if num <= 10:
            numbers = {0:'0‚É£', 1:'1‚É£', 2:'2‚É£', 3:'3‚É£', 4:'4‚É£', 5:'5‚É£', 6:'6‚É£', 7:'7‚É£', 8:'8‚É£', 9:'9‚É£', 10:'üîü'}
            return numbers[num]
        numbers = {0:'0‚É£.', 1:'1‚É£', 2:'2‚É£', 3:'3‚É£', 4:'4‚É£', 5:'5‚É£', 6:'6‚É£', 7:'7‚É£', 8:'8‚É£', 9:'9‚É£', 10:'üîü'}
        digits = digits_recursive(num)
        result = ""
        for i in digits:
            result += numbers[i]
        return result
    text = ""
    r, c = await db.get_or_create(chat_stats, chat_id=chat_id)
    if r.messages > 0:
        text += f"üìß –°–æ–æ–±—â–µ–Ω–∏–π: {textify_value(r.messages)} ({textify_value(r.clear_messages)} —á–∏—Å—Ç—ã—Ö)\n"
    if r.symbols > 0:
        text += f"üî£ –°–∏–º–≤–æ–ª–æ–≤: {textify_value(r.symbols)} ({textify_value(r.clear_symbols)})\n"
    if r.voice_messages > 0:
        text += f"üéµ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {textify_value(r.voice_messages)}\n"
    if r.resend_messages > 0:
        text += f"üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö: {textify_value(r.resend_messages)}\n"
    if r.photos > 0:
        text += f"üì∑ –§–æ—Ç–æ: {textify_value(r.photos)}\n"
    if r.videos > 0:
        text += f"üìπ –í–∏–¥–µ–æ: {textify_value(r.videos)}\n"
    if r.audios > 0:
        text += f"üéß –ê—É–¥–∏–æ: {textify_value(r.audios)}\n"
    if r.docs > 0:
        text += f"üìë –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {textify_value(r.docs)}\n"
    if r.posts > 0:
        text += f"üì£ –ü–æ—Å—Ç–æ–≤: {textify_value(r.posts)}\n"
    if r.stickers > 0:
        text += f"üòú –°—Ç–∏–∫–µ—Ä–æ–≤: {textify_value(r.stickers)}\n"
    if r.mentios > 0:
        text += f"üí¨ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {textify_value(r.mentios)}\n"
    if r.links > 0:
        text += f"üì° –°—Å—ã–ª–æ–∫: {textify_value(r.links)}\n"
    if r.leaved > 0:
        text += f"üö™ –ü–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç: {textify_value(r.leaved)}\n"
    if r.messages_with_sw > 0:
        text += f"üë∫ –°–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ç–∞–º–∏: {textify_value(r.messages_with_sw)}\n"
    if not text:
        return await env.reply('–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.')
    text += "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞:\n"
    top = await db.execute(user_stats.select().where(user_stats.chat_id == chat_id).order_by((user_stats.messages).desc()))
    raiting = {}
    cur = 1
    for p in top:
        if int(p.user_id) < 0:
            continue
        if p.user_id not in raiting:
            raiting[p.user_id] = p.messages
        else:
            raiting[p.user_id] += p.messages
    for i in list(raiting.keys())[:10]:
        exp = raiting.get(i)
        get_name = await parse_user_name(env, i)
        num = num_to_smile(cur)
        last = await db.get(user_stats, chat_id=chat_id, user_id=i)
        r_exp = get_level(last.lvl)
        text += f"{num} {textify_value(exp)} [LV. {last.lvl} | {last.messages}/{r_exp}] - @id{i} ({get_name})\n"
        cur += 1
    if not await check_admin(env, message.peer_id, -164822827):
        text += '\n—è –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –º–µ–Ω—è.'
    return await env.request('messages.send', chat_id=chat_id, message=text)

async def parse_admin(env, peer):
    chat = await env.request('messages.getConversationMembers', peer_id=peer)
    try:
        for user in chat.response['items']:
            if user['member_id'] == user['invited_by']:
                return user['member_id']
            else:
                continue
    except:
        pass

async def split(a, n):
    k, m = divmod(len(a), n)
    return (a[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n))

cases = (2, 0, 1, 1, 1, 2)   
def plural_form(n: int, v: (list, tuple), need_n=False, need_cases=False):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param n: —á–∏—Å–ª–æ
    :param v: –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è 1, –¥–ª—è 2, –¥–ª—è 5)

    –ü—Ä–∏–º–µ—Ä:
    plural_form(difference.days, ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"))

    :return: –ß–∏—Å–ª–æ –∏ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    """

    return f"{n if need_n is False else ''}  {v[2 if (4 < n % 100 < 20) else cases[min(n % 10, 5)]] if need_cases is False else ''}"
@plugin.on_text('—á–∞—Ç —Ç–æ–ø')
async def chats_raiting(message,attachments,env):
    chat_stats, user_stats = plugin.db1, plugin.db2
    chat_id = int(message.peer_id) - int(2000000000)
    top = await db.execute(chat_stats.select().order_by((chat_stats.messages).desc()))
    raiting = {}
    cur = 1
    text = "—Ço–ø 15 –±ece–¥:\n"
    for p in top:
        if int(p.chat_id) < 0:
            continue
        if p.chat_id not in raiting:
            raiting[p.chat_id] = p.messages
        else:
            raiting[p.chat_id] += p.messagess
    try:
        for i in list(raiting.keys())[:15]:
            peer = int(i) + int(2000000000)
            owner_id = await parse_admin(env, peer)
            chat = await env.request('messages.getConversationsById', peer_ids=peer)
            if not chat.response.get('count') or chat.response.get('count') == 0:
                continue
            admin_name = await parse_user_name(env, owner_id)
            text += f"{cur}. @id{owner_id} ({chat.response['items'][0]['chat_settings']['title']}) (#{i}): {raiting[i]} msg\n"
            cur += 1
        if not chat_id in list(raiting.keys())[:15] and chat_id in list(raiting.keys()):
            num = list(raiting.keys()).index(chat_id) + 1
            text += f".....\n{num}. –≤–∞—à–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è\n"
    except Exception as e:
        traceback.print_exc()
        pass
    if not await check_admin(env, message.peer_id, -164822827):
        text += '\n–≤–∞—à–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, —Ç–∞–∫ –∫–∞–∫ —è –Ω–µ —è–≤–ª—è—é—Å—å –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
    return await env.request('messages.send', chat_id=chat_id, message=text)

@plugin.on_startswith_text('send')
async def send_messages(message, attachments, env):
    if message.from_id != 139432998:
        return
    chat_stats, user_stats = plugin.db1, plugin.db2
    chat_id = int(message.peer_id) - int(2000000000)
    top2 = await db.execute(chat_stats.select().order_by((chat_stats.messages).desc()))
    vk_message = 'üíå –ù–µ –ø—É–≥–∞–π—Ç–µ—Å—å, —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n' + env.body
    await env.reply('–Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É') 
    top = [
    try:
        for q in top:
            await env.request('messages.send', chat_id=q.chat_id, message=vk_message)
            await asyncio.sleep(5)
    except:
        pass
    conversations = await env.request('groups.getMembers', count=200)
    for i in conversations.response['items']:
        await env.request('messages.send', user_id=i, message=vk_message)
        await asyncio.sleep(5)
    return await env.reply('—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


@plugin.on_startswith_text('—é–∑–µ—Ä —Å—Ç–∞—Ç')
async def user_stats(message,attachments,env):
    if int(message.peer_id) < 2000000000:
        return
    chat_stats, user_stats = plugin.db1, plugin.db2
    chat_id = int(message.peer_id) - int(2000000000)
    top = await db.execute(user_stats.select().where(user_stats.chat_id == chat_id).order_by((user_stats.messages).desc()))
    raiting = {}
    for p in top:
        if int(p.user_id) < 0:
            continue
        if p.user_id not in raiting:
            raiting[p.user_id] = p.messages
        else:
            raiting[p.user_id] += p.messages
    if message.from_id not in raiting.keys():
        return await env.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
    r = await db.get(user_stats, chat_id=chat_id, user_id=message.from_id)
    r_place = list(raiting.keys()).index(message.from_id) + 1
    r_exp = get_level(r.lvl)
    text = f"–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @id{message.from_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):\nüìß –°–æ–æ–±—â–µ–Ω–∏–π: {textify_value(r.messages)} ({textify_value(r.nl_messages)} –Ω–µ –ø–æ–¥—Ä—è–¥)\nüì® –ß–∏—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {textify_value(r.clear_messages)} (—Å–∏–º–≤–æ–ª–æ–≤ {textify_value(r.symbols)}/{textify_value(r.clear_symbols)})\nüë∫ –°–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ç–∞–º–∏: {textify_value(r.messages_with_sw)}\nüèÜ –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {r_place} –º–µ—Å—Ç–æ\nüíª LVL: {r.lvl} [{r.messages}/{r_exp}]\n"
    if not await check_admin(env, message.peer_id, -164822827):
        text += '\n—è –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –º–µ–Ω—è.'
    return await env.request('messages.send', chat_id=chat_id, message=text)

@plugin.on_startswith_text('–∞–∫—Ç–∏–≤')
async def active(message,attachments,env):
    if int(message.peer_id) < 2000000000:
        return
    args = message.text.lower().split()
    if args[0] != '–∞–∫—Ç–∏–≤':
        return
    chat_stats, user_stats = plugin.db1, plugin.db2
    chat_id = int(message.peer_id) - int(2000000000)
    query = user_stats.select().where(user_stats.chat_id == chat_id, user_stats.last_message_date <= datetime.datetime.now()).order_by((user_stats.last_message_date).desc())
    query_result = await db.execute(query)
    user_data = [{"id": int(u.user_id), "date": u.last_message_date} for u in query_result]
    if not user_data:
        return
    if len(user_data) > 20:
        user_data2 = list(await split(user_data, len(user_data) // 20))
        args = message.text.lower().split(' ')
        if not args or len(args) < 2:
            return await env.reply(f"–¥–æ—Å—Ç—É–ø–Ω–æ {plural_form(len(user_data2), ('—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '—Å—Ç—Ä–∞–Ω–∏—Ü—ã', '—Å—Ç—Ä–∞–Ω–∏—Ü'))} —Å –∞–∫—Ç–∏–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(user_data)}), —É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"–∞–∫—Ç–∏–≤ [1-{len(user_data2)}].\"")
        if not args[1].isdigit():
            return await env.reply('–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
        if int(args[1]) < 1 or int(args[1]) > len(user_data2):
            return await env.reply(f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç 1 –¥–æ {len(user_data2)}.')
        vk_message = f'–∞–∫—Ç–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {args[1]}/{len(user_data2)}):\n'
    else:
        vk_message = f'–∞–∫—Ç–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n'
    for u_data in enumerate(user_data2[int(args[1])-1] if len(user_data) > 20 else user_data, start=1):
        result = datetime.datetime.now() - u_data[1]['date']
        if result.seconds < 120:
            state = '–∞–∫—Ç–∏–≤'
        else:
            state = await seconds(result.seconds)
        name = await parse_user_name(env, u_data[1]['id'])
        vk_message += f"{u_data[0]}. @{'id' if u_data[1]['id'] > 0 else 'club'}{u_data[1]['id'] if u_data[1]['id'] > 0 else -u_data[1]['id']} ({name}) - {state}\n"
    return await env.reply(vk_message)
