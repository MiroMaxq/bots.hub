const { Command, Utils } = require('cocoscore')
const frm = new Intl.NumberFormat('en');

module.exports = new Command({
	trigger: /^(?:–∫–∞–∑–∏–Ω–æ)\s(.*)/i,
	type: "game",
	name: '–ö–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞]',
	description: '–∏–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ.',
	emoji: 'üí≤',
	async handler(ctx, bot) {
	ctx.body[1] = ctx.body[1].replace(/(\.|\,)/ig, '');
	ctx.body[1] = ctx.body[1].replace(/(–∫|k)/ig, '000');
	ctx.body[1] = ctx.body[1].replace(/(–º|m)/ig, '000000');
	ctx.body[1] = ctx.body[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, ctx.user.balance);
	
	if(!ctx.body[1]) return;
	if(ctx.body[1] <= 0) return;

	if(ctx.body[1] > ctx.user.balance) return ctx.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥`);
	else if(ctx.body[1] <= ctx.user.balance) {
		ctx.user.balance -= ctx.body[1]
		let cof = Utils.getRandomElement([0.25, 2, 0.25, 0.25, 2, 0.25, 0.75, 5, 0.25, 0.25, 2, 0.5, 2, 0.25, 2, 0.1, 2, 0.1, 0.75, 0.25, 0.25, 0.25, 2, 0.25, 0.75, 2, 0.25, 2, 0.25, 0.75, 0.75, 5]);

		ctx.user.balance += ctx.body[1] * cof
		return ctx.send(`${cof < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${frm.format(ctx.body[1] - (ctx.body[1] * cof))}$` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${frm.format(ctx.body[1] * cof)}$`} (x${cof})
		üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${frm.format(ctx.user.balance)}$`);
	}
	}
})
