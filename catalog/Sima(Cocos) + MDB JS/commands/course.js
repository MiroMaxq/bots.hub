const { Command, Utils } = require('cocoscore');
const { sp, getUnix, getTimer } = require('../functions.js')
//const request = require('request')
const fetch = require('node-fetch');
const frm = new Intl.NumberFormat('en');
let course = 0;

module.exports = [
 new Command({
    trigger: /^–∫—É—Ä—Å?$/i,
    type: "raznoe",
    name: '–ö—É—Ä—Å',
    description: '–∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞',
    emoji: 'üíπ',
    async handler(ctx, bot) {
        let request = await (await fetch('https://currate.ru/api/?get=rates&pairs=USDRUB,EURRUB,BTCRUB,BTCUSD&key=32d7da2983067548252da9e135daa0d9')).json();
        course = request.data.BTCUSD
        ctx.send(`–∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${frm.format(Math.floor(course))}$`);
    }
}),
 new Command({
    trigger: /^(?:–ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã)\s(.*)$/i,
    type: "raznoe",
    name: '–ü—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã [–∫–æ–ª-–≤–æ]',
    description: '–ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã',
    emoji: 'üíπ',
    async handler(ctx, bot) {
    ctx.body[1] = ctx.body[1].replace(/(\.|\,)/ig, '');
    ctx.body[1] = ctx.body[1].replace(/(–∫|k)/ig, '000');
    ctx.body[1] = ctx.body[1].replace(/(–º|m)/ig, '000000');
    ctx.body[1] = ctx.body[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, ctx.user.bitcoin);

        if(ctx.user.bitcoin < ctx.body[1]) return ctx.send(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.`);
            ctx.user.balance += Number(ctx.body[1] * Math.floor(course));
            ctx.user.bitcoin -= Number(ctx.body[1])
            ctx.send(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${frm.format(ctx.body[1])} ${Utils.declOfNum(ctx.body[1], ['–±–∏—Ç–∫–æ–∏–Ω', '–±–∏—Ç–∫–æ–∏–Ω–∞', '–±–∏—Ç–∫–æ–∏–Ω–æ–≤'])} –∑–∞ ${frm.format(ctx.body[1] * Math.floor(course))}$`);
}
}),
 new Command({
    trigger: /^(?:–±–∏—Ç–∫–æ–∏–Ω)\s(.*)$/i,
    type: "raznoe",
    name: '–ë–∏—Ç–∫–æ–∏–Ω [–∫–æ–ª-–≤–æ]',
    description: '–∫—É–ø–∏—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã',
    emoji: 'üíπ',
    async handler(ctx, bot) {
    	ctx.body[1] = ctx.body[1].replace(/(\.|\,)/ig, '');
    ctx.body[1] = ctx.body[1].replace(/(–∫|k)/ig, '000');
    ctx.body[1] = ctx.body[1].replace(/(–º|m)/ig, '000000');
    ctx.body[1] = ctx.body[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, ctx.user.balance);

        if(ctx.user.balance < ctx.body[1] * course) return ctx.send(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`);
            ctx.user.balance -= Number(ctx.body[1] * Math.floor(course));
            ctx.user.bitcoin += Number(ctx.body[1])
            ctx.send(`–≤—ã –∫—É–ø–∏–ª–∏ ${frm.format(ctx.body[1])} ${Utils.declOfNum(ctx.body[1], ['–±–∏—Ç–∫–æ–∏–Ω', '–±–∏—Ç–∫–æ–∏–Ω–∞', '–±–∏—Ç–∫–æ–∏–Ω–æ–≤'])} –∑–∞ ${frm.format(ctx.body[1] * Math.floor(course))}$`);
}
})
]