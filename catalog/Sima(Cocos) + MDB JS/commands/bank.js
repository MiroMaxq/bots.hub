const {Command} = require('cocoscore')
const frm = new Intl.NumberFormat('en');

module.exports = [
new Command({
	trigger: /^(?:–±–∞–Ω–∫)\s?(.*)$/i,
	handler(ctx, bot) {
	ctx.body[1] = ctx.body[1].replace(/(\.|\,)/ig, '');
	ctx.body[1] = ctx.body[1].replace(/(–∫|k)/ig, '000');
	ctx.body[1] = ctx.body[1].replace(/(–º|m)/ig, '000000');
	ctx.body[1] = ctx.body[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, ctx.user.balance);
if(ctx.body[1]) {
			if(ctx.user.balance < ctx.body[1]) return ctx.send(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥`)

				ctx.user.balance -= ctx.body[1];
				ctx.user.bank += Number(ctx.body[1]) 

			ctx.send(`–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ –≤ –±–∞–Ω–∫ ${frm.format(ctx.body[1])}$\nüí∞ –°—á—ë—Ç –≤ –±–∞–Ω–∫–µ: ${frm.format(ctx.user.bank)}$`)	
	} else ctx.send(`–Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç—É: ${frm.format(ctx.user.bank)}$`)
}
}),
new Command({
	trigger: /^(?:—Å–Ω—è—Ç—å)\s(.*)$/i,
	handler(ctx, bot) {
	ctx.body[1] = ctx.body[1].replace(/(\.|\,)/ig, '');
	ctx.body[1] = ctx.body[1].replace(/(–∫|k)/ig, '000');
	ctx.body[1] = ctx.body[1].replace(/(–º|m)/ig, '000000');
	ctx.body[1] = ctx.body[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, ctx.user.bank);

			if(ctx.user.bank < ctx.body[1]) return ctx.error(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥`)
				ctx.user.balance += Number(ctx.body[1]);
				ctx.user.bank -= Number(ctx.body[1]) 
			ctx.send(`–≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –±–∞–Ω–∫–∞ ${frm.format(ctx.body[1])}$\nüí∞ –°—á—ë—Ç –≤ –±–∞–Ω–∫–µ: ${frm.format(ctx.user.bank)}$\nüíµ –ë–∞–ª–∞–Ω—Å: ${frm.format(ctx.user.balance)}$`)	
		}
})
]