console.log('------–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω-------')
console.log('--–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ https://vk.com/nodejs_coder--')

var Qiwi = require('node-qiwi-api').Qiwi; 
var Wallet = new Qiwi('749673bda9c6591b44746c52fbad777b');
let giving = false;

const houses = [
    { name: "–ö–æ—Ä–æ–±–∫–∞",         uid: 1,  price: 5000       },
    { name: "–ö–∞–º–æ—Ä–∫–∞",         uid: 2,  price: 15000      },
    { name: "–ü–∞–ª–∞—Ç–∫–∞",         uid: 3,  price: 23000      },
    { name: "–î–∏—Å–∫–æ–≤–æ–π –¥–æ–º",    uid: 4,  price: 34000      },
    { name: "–î–æ–º–∏–∫ –Ω–∞ –¥–µ—Ä–µ–≤–µ", uid: 5,  price: 1000000    },
    { name: "–î–∞—á–∞",            uid: 6,  price: 1500000    },
    { name: "–î–æ–º —É –æ–∑–µ—Ä–∞",     uid: 7,  price: 2000000    },
    { name: "–ö–∏—Ä–ø–∏—á–Ω—ã–π –¥–æ–º",   uid: 8,  price: 25000000   },
    { name: "–ë—É–º–∞–∂–Ω—ã–π –¥–æ–º",    uid: 9,  price: 160000000  },
    { name: "–ö–æ—Ç—Ç–µ–¥–∂",         uid: 10, price: 250000000  },
    { name: "–î–æ–º –Ω–∞ –±—É—Ç—ã–ª–∫–µ",  uid: 11, price: 350000000  },
    { name: "–î–æ–º –Ω–∞ –†—É–±–ª–µ–≤–∫–µ", uid: 12, price: 400000000  },
    { name: "–î–æ–º –°–æ–∑–¥–∞—Ç–µ–ª—è",   uid: 13, price: 600000000  },
    { name: "–ü–æ–¥–≤–∞–ª",          uid: 14, price: 1359000000 }
];

const businesses = [
	{
		name: '–®–∞—É—Ä–º–∏—á–Ω–∞—è',
		cost: 50000,
		earn: 400,
		id: 1,
		icon: 'ü•ñ'
	},
	{
		name: '–õ–∞—Ä—ë–∫',
		cost: 10000,
		earn: 700,
		id: 2,
		icon: 'üè™'
	},
	{
		name: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
		cost: 300000,
		earn: 2500,
		id: 3,
		icon: 'üç∑'
	},
	{
		name: '–ú–∞–≥–∞–∑–∏–Ω',
		cost: 500000,
		earn: 3800,
		id: 4,
		icon: 'üè´'
	},
	{
		name: '–ó–∞–≤–æ–¥',
		cost: 1500000,
		earn: 8000,
		id: 5,
		icon: 'üè≠'
	},
	{
		name: '–®–∞—Ö—Ç–∞',
		cost: 25000000,
		earn: 70000,
		id: 6,
		icon: '‚õè'
	},
	{
		name: '–û—Ñ–∏—Å',
		cost: 80000000,
		earn: 220000,
		id: 7,
		icon: 'üè¢'
	},
	{
		name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä',
		cost: 150000000,
		earn: 300000,
		id: 8,
		icon: 'üïπ'
	},
	{
		name: '–ù–µ—Ñ—Ç–µ–≤—ã—à–∫–∞',
		cost: 500000000,
		earn: 700000,
		id: 9,
		icon: 'üèú'
	},
	{
		name: '–ê—Ç–æ–º–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è',
		cost: 800000000,
		earn: 1000000,
		id: 10,
		icon: 'üí°'
	},
	{
		name: '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ',
		cost: 50000000000,
		earn: 50000000,
		id: 11,
		icon: 'üó∫'
	}
];

const comps = [
	{
		name: 'Asus E210',
		cost: 2000,
		id: 1
	},
	{
		name: 'HP T530',
		cost: 6000,
		id: 2
	},
	{
		name: 'Acer Veriton',
		cost: 14000,
		id: 3
	},
	{
		name: 'Dell Vostro',
		cost: 32000,
		id: 4
	},
	{
		name: 'Lenovo iDea',
		cost: 70000,
		id: 5
	},
	{
		name: 'MSI Pro 20ET',
		cost: 215000,
		id: 6
	},
	{
		name: 'HP Pavilion 570',
		cost: 420000,
		id: 7
	},
	{
		name: 'MacBook Air',
		cost: 1000000,
		id: 8
	},
	{
		name: 'iMac',
		cost: 2500000,
		id: 9
	},
	{
		name: 'Mac Pro',
		cost: 8000000,
		id: 10
	},
	{
		name: 'Asus ROG GR8',
		cost: 25000000,
		id: 11
	},
	{
		name: '–•–∞–∫–µ—Ä—Å–∫–∏–π –∫–æ–º–ø—É–∫—Ç–µ—Ä ü§ì',
		cost: 35000000,
		id: 12
	}
];

const phones = [
    { name: "Nokia 3310",          uid: 1,  price: 5000    },
    { name: "Samsung S2",          uid: 2,  price: 15000   },
    { name: "iPhone 4",            uid: 3,  price: 15000   },
    { name: "iPhone 5s",           uid: 4,  price: 45000   },
    { name: "iPhone 8",            uid: 5,  price: 92000   },
    { name: "Samsung S9",          uid: 6,  price: 150000  },
    { name: "Meizu M5",            uid: 7,  price: 200000  },
    { name: "Xiaomi Redmi 4A",     uid: 8,  price: 350000  },
    { name: "Microsot Lumia 6830", uid: 9,  price: 550000  },
    { name: "iPhone XS",           uid: 10, price: 1000000 },
    { name: "Xiaomi Redmi 6A",     uid: 11, price: 1350000 }
];

const apartments = [
    { name: "–ß–µ—Ä–¥–∞–∫",                     uid: 1, price: 500000     },
    { name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏",       uid: 2, price: 1500000    },
    { name: "–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",     uid: 3, price: 1500000    },
    { name: "–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",     uid: 4, price: 4500000    },
    { name: "–ß–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",  uid: 5, price: 9200000    },
    { name: "–ü—è—Ç–∏–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",     uid: 5, price: 15000000   },
    { name: "–®–µ—Å—Ç–∏–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",    uid: 6, price: 20000000   },
    { name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã",   uid: 7, price: 35000000   },
    { name: "–î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",     uid: 8, price: 55000000   },
    { name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç–æ–º",    uid: 9, price: 100000000  },
    { name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –∞–¥–º–∏–Ω–∞",            uid: 10, price: 135000000 }
];

let ADMINS = [496175718, 389712482, 395638472, 201464141, 499334187, 366550316, 517001438, 407188988, 533000578];
let LITE = [496175718, 389712482, 395638472, 201464141, 499334187, 366550316, 517001438, 407188988, 533000578];

let BANS = [];
let CARS = [
	{
		id: 1,
		name: "Lada 2010",
		cost: 50000,
		att: "photo-178862418_456239027"
	},
	{
		id: 2,
		name: "Hyundai Solaris",
		cost: 250000,
		att: "photo-178862418_456239024"
	},
	{
		id: 3,
		name: "Toyota Camry",
		cost: 1000000,
		att: "photo-178862418_456239029"
	},
	{
		id: 4,
		name: "BMW 5",
		cost: 100000000,
		att: "photo-178862418_456239028"
	},
	{
		id: 5,
		name: "Mercedes - Benz",
		cost: 5000000000,
		att: "photo-178862418_456239028"
	},
	{
		id: 6,
		name: "Lamborghini Huracan",
		cost: 100000000000,
		att: "photo-178862418_456239026"
	},
	{
		id: 7,
		name: "Rolls Roys Wrath",
		cost: 50000000000000,
		att: "photo-178862418_456239030"
	}
];

const HACKS = [
	{
		id: 1,
		preview: '–ü–µ–Ω—Ç–∞–≥–æ–Ω—Å–∫–∏–µ —Å–µ—Ä–≤–µ—Ä–∞. –¢–µ–ø–µ—Ä—å –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–æ–¥–∞–ª–∏ –∑–∞ 20.000.000$ –≤ –î–∞—Ä–∫–Ω–µ—Ç–µ',
		attachment: 'photo-167914596_456243902',
		award: 100000
	},
	{
		id: 2,
		preview: '–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ—Ö–æ–∂–µ–≥–æ!',
		attachment: 'photo-167914596_456243939',
		award: 100000
	},
	{
		id: 3,
		preview: 'node0.sberbank.ru (–û–Ω–ª–∞–π–Ω-–±–∞–Ω–∫)',
		attachment: 'photo-167914596_456243903',
		award: 100000
	},
	{
		id: 4,
		preview: '—É–Ω–∏—Ç–∞–∑ –≤ –¢–¶',
		attachment: 'photo-167914596_456243937',
		award: 5000
	},
	{
		id: 5,
		preview: '–ø—Ä–æ—à–∏–≤–∫—É. –ö–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–æ—à–∏–ª–∏ —Å–≤–æ–µ–º—É –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫—É, –≤—ã —É–∫—Ä–∞–ª–∏ –¥–µ–Ω—å–≥–∏ —Å –µ–≥–æ —Å—á—ë—Ç–∞.',
		attachment: 'photo-167914596_456243938',
		award: 100000
	}
];

let stats = {
	messages: {
		inbox: 0,
		outbox: 0
	},
	new_users: 0,
	bot_start: Date.now()
}

let course = 5000;
let updated = Date.now();

process.env.TZ = "Europe/Moscow";
const utils = require("./utils");

setInterval(async () => {
	course = utils.random(4500, 6000);
	updated = Date.now();
}, 600000);

const mongo = require("mongoose");
mongo.connect("mongodb://serega:12qwaszx@ds151997.mlab.com:51997/serega");

const schema = new mongo.Schema({
	uid: Number,
	id: Number,
	balance: Number,
	thack: Number,
	vip: Number,
	bank: Number,
	rating: Number,
	diamonds: Number,
	work: Number,
	tag: String,
	lvl: Number,
	regDate: Number,
	tbonus: Number,
	peredacha: Number,
	twork: Number,
	treport: Number,
	xmas: Boolean,
	ref: Number,
	biz: Number,
	business: Number,
	bantop: Boolean,
	banreport: Boolean,
	banpay: Boolean,
	buttons: Array,
	energy: Number,
	car: Number,
	ttaxi: Number,
	admingive: Number,
	comp: Number,
	house: Number,
	apartment: Number,
	phone: Number,
	computer: Number,
	bangive: Boolean
});

const promoSchema = new mongo.Schema({
	title: String,
	count: Number,
	users: Array,
	sum: Number
});

const stavkaSchema = new mongo.Schema({
	id: Number,
	balance: Number,
	name: String
	});

const logSchema = new mongo.Schema({
	from: Number,
	to: Number,
	date: Number,
	amount: Number
})

const { works } = require("./Earns.js");
const User = mongo.model("User", schema);
const Stavka = mongo.model("Stavka", stavkaSchema);
const Promo = mongo.model("Promo", promoSchema);
const Log = mongo.model("Log", logSchema);

let likes = [];

const { VK, Keyboard } = require("vk-io");
const keyboard = Keyboard;

let user            = new VK();
user.setOptions({
    token: "2effdb14b43a0c336307167990d55634f139bf773b47a430450e64cec6d7f02c6e5847bc35b5f069d77b7",
    apiMode: "parallel"
});

const vk = new VK({
	token:  "2278400a4e3467c7373262f3db311c0555e0e7abffb27e4bb56f07008207b74e6b1547a5501ef4d2addf8",
	pollingGroupId: 182629640,
	apiMode: "parallel"
});

vk.setOptions({
    token:  "2278400a4e3467c7373262f3db311c0555e0e7abffb27e4bb56f07008207b74e6b1547a5501ef4d2addf8",
    apiMode: "parallel",
    pollingGroupId: 182629640
});

setInterval(() => { 
	const buspay = [0, 400, 700, 2500, 3800, 8000, 70000, 220000, 300000, 700000, 1000000, 50000000] 
	User.find().then((res) => {
		res.filter((x) => x.business > 0).map(async (x) => { 
			x.inc("biz", buspay[x.business]);
		});
	});
}, 3600000);

async function collect() {
	const { VK } = require("vk-io");
	const vk = new VK({ token: token });

	let ids = [];

	for (let i = 0; i < 200; i++) {
		await vk.api.messages.getConversations({ count: 200, offset: i * 200 }).then(async (response) => {
			await response.items.map((dialog) => {
				ids.push(dialog.conversation.peer.id);
			});
		}); 
	}
	await vk.api.messages.send({ 
		chat_id: 288, 
		message: `–ß–µ–ª–æ–≤–µ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã! (${ids.length} —á–∞—Ç–æ–≤)` 
	   });
	return ids;
}
async function mailing(messages,attachments) {
	let start = Date.now() / 1000;

	const { VK } = require("vk-io");
	const vk = new VK({ token: token, apiMode: "parallel" });

	let ids = await collect();

	for (let i = 0; i < Math.floor(ids.length / 100); i++) {
		await vk.api.call("messages.send", {
			user_ids: ids.slice(i * 100, i * 100 + 100).join(","),
			//user_ids: 459658086,
			message: messages,
			attachment: attachments,
			random_id: Math.random() * 100000
		});
	}

	let end = Date.now() / 1000;
	await vk.api.messages.send({ 
		chat_id: 288, 
		message: `–ó–∞—Å—Ä–∞–ª –ª—é–¥—è–º –ª—Å –∫–æ–Ω—Ç–µ–∫—Ä—Ç–Ω–æ!. (${ids.length - errors} –∏–∑ ${ids.length} –∑–∞ ${end - start}s)` 
	   });
	return true;
}

async function mailingChats(messages,attachments) {
	let start = Date.now() / 1000;

	const { VK } = require("vk-io");
	const vk = new VK({ token: token, apiMode: "parallel" });

	for (let i = 1; i < 4000; i++) {
		await vk.api.call("messages.send", {
			chat_id: i,
			message: messages,
			attachment: attachments,
			random_id: Math.random() * 100000,
			keyboard: generateKeyboard(["üîë –ë–æ–Ω—É—Å","üìö –ü–æ–º–æ—â—å","üí∏ –ë–∞–ª–∞–Ω—Å"])
		}).catch((err) => {});
	}

	let end = Date.now() / 1000;
	await vk.api.messages.send({ 
		chat_id: 288, 
		message: `–û—Ç–ª–∏—à–Ω–æ –Ω–∞—Å—Ä–∞–ª –ª—é–¥—è–º –≤ —á–∞—Ç—ã! (–∑–∞ ${end - start}s)` 
	   });
	return true;
}

let mentionRegexp = new RegExp(`\\[club${vk.options.pollingGroupId}\\|(.*)\\]`);

const { updates, snippets } = vk;
updates.startPolling();

updates.on("message", async (message, next) => {
	stats.messages.inbox += 1;
	if(BANS.indexOf(message.senderId) !== -1) return;

	if(message.senderId < 0) return;
	let _user = await User.findOne({ id: message.senderId });

	if(!_user) {
		let [user_info] = await vk.api.call("users.get", { user_id: message.senderId });

		let count = await User.countDocuments();

		let $user = new User({
			uid: count + 1,
			id: message.senderId,
			balance: 5000,
			bank: 0,
			rating: 0,
			diamonds: 0,
			work: 0,
			biz: 0,
			comp: 0,
			thack: 0,
			business: 0,
			tag: user_info.first_name,
			lvl: 1,
			regDate: getUnix(),
			tbonus: 0,
			peredacha: 0,
			vip: 0,
			biz: 0,
			business: 0,
			twork: 0,
			treport: 0,
			xmas: false,
			ref: 0,
			bantop: false,
			banreport: false,
			banpay: false,
			buttons: ["üëë –î–æ–Ω–∞—Ç"],
			energy: 0,
			car: 0,
			ttaxi: 0
		});

		await $user.save();
		console.info(`[${unixStamp(getUnix())} ${message.isChat ? "c"+message.chatId+", @id"+message.senderId : "@id"+message.senderId}]: New user - @id${message.senderId} #${count}`);

		if(!message.isChat) {
			await message.send(`@id${message.senderId} (${user_info.first_name}), –ø—Ä–∏–≤–µ—Ç! –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n–£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ - <<–ø–æ–º–æ—â—å>>.\n–ù–∞—à–∞ –±–µ—Å–µ–¥–∞ -> https://vk.me/join/AJQ1dyFdohInlyR4A_0GX92X`, {
				keyboard: generateKeyboard(["üëë –î–æ–Ω–∞—Ç"], ["üìí –ü–æ–º–æ—â—å"])
			});

			await message.sendSticker(7464);
		}

		stats.new_users += 1;
	}

	let follow = await vk.api.call("groups.isMember", { user_id: message.senderId, group_id: 182629640 });
	message.user = await User.findOne({ id: message.senderId });

	message.reply = (text, params) => message.send(`${message.user.tag}, ${text}\n\n${!follow ? `[club182629640|–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–µ–Ω—è –±—Ä–∞—Ç–∏—à–∫–∞ (]` : ``}`, params);
	if(mentionRegexp.test(message.text)) message.text = message.text.replace(mentionRegexp, "").trim();

	let start = Date.now();
	await next();

	let end = Date.now();
	if(message.senderId === 423555969) console.info(`[${unixStamp(getUnix())} ${message.isChat ? "c"+message.chatId+", @id"+message.senderId : "@id"+message.senderId}]: ${message.text.slice(0, 64)} handled in ${end-start} ms`);
});

updates.hear(/^(?:–ø–æ–º–æ—â—å|–ù–∞—á–∞—Ç—å|Start|üìí\s–ü–æ–º–æ—â—å)$/i, message => message.reply(`–º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
üåç–û—Å–Ω–æ–≤–Ω—ã–µ:
    üíæ–ü—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
    üí∏–ë–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å
    üé´–ë–∞–Ω–∫ [—Å—É–º–º–∞/—Å–Ω—è—Ç—å —Å—É–º–º–∞] - –ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞
    üíé–ê–ª–º–∞–∑ [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–ø—Ä–æ–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –∞–ª–º–∞–∑—ã
    üëë–†–µ–π—Ç–∏–Ω–≥ - –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥/–†–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - —É–∑–Ω–∞—Ç—å/–ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥($250–º–ª–Ω)
    üìü–ë–∏–∑–Ω–µ—Å—ã - —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤
    üìü–ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [—Å—É–º–º–∞] - —Å–Ω—è—Ç—å –ø—Ä–∏–±—ã–ª—å —Å –±–∏–∑–Ω–µ—Å–∞
    üìü–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å - –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
    ‚úç–ù–∏–∫ [–Ω–∏–∫] - —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫
    ‚ôª–ü–µ—Ä–µ–¥–∞—Ç—å [id] [—Å—É–º–º–∞] - –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É
    üì†–ú–∞–≥–∞–∑–∏–Ω - –º–∞–≥–∞–∑–∏–Ω
    üéñ–¢–æ–ø - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    üéÅ–ë–æ–Ω—É—Å - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
    üíº–†–µ—Ñ [id] - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID
    üìàüìâ–ö—É—Ä—Å - –∫—É—Ä—Å –∞–ª–º–∞–∑–∞
    üìù–†–∞–±–æ—Ç—ã - —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç

üéÆ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:
    üé∞–ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞] - —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ
    üç∏–°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞] - –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ "–°—Ç–∞–∫–∞–Ω—á–∏–∫–µ"
    üëæ–°–µ–π—Ñ [10-99] - —Å–µ–π—Ñ
	üëæ–ë–∏–≥—Å–µ–π—Ñ [100-999] - –±–æ–ª—å—à–æ–π —Å–µ–π—Ñ
    üòµ–¢—Ä–µ–π–¥ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ [—Å—É–º–º–∞]
    üÖ∞–ë—É–∫–≤–∞ [–∞-—è] - –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É —Å –∞–ª—Ñ–∞–≤–∏—Ç–æ–º :)

üíæ–†–∞–±–æ—Ç–∞:
    üìû–†–∞–±–æ—Ç–∞ [–Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã] - —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É
    üíª–†–∞–±–æ—Ç–∞—Ç—å - —Ä–∞–±–æ—Ç–∞—Ç—å(—Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç)
    ‚ùå–£–≤–æ–ª–∏—Ç—å—Å—è - —É–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã

üì†–ú–∞–≥–∞–∑–∏–Ω:
   üè°–î–æ–º–∞ - —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
   üèô–ö–≤–∞—Ä—Ç–∏—Ä—ã - —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä
   üì±–¢–µ–ª–µ—Ñ–æ–Ω—ã - —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    üñ•–ö–æ–º–ø—å—é—Ç–µ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤

üöó–ú–∞—à–∏–Ω—ã:
    üöò–ú–∞—à–∏–Ω—ã - —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    üöò–ú–∞—à–∏–Ω–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ
    üîë–ú–∞—à–∏–Ω–∞ –ø—Ä–æ–¥–∞—Ç—å - –ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É (90% –æ—Ç —Å—É–º–º—ã)
    üöñ–¢–∞–∫—Å–æ–≤–∞—Ç—å - —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–∞–∫—Å–∏(–∞–Ω–∞–ª–æ–≥ "–†–∞–±–æ—Ç–∞")

üìå–ü—Ä–æ—á–µ–µ:
    ‚å®–ö–Ω–æ–ø–∫–∞ [—Ç–µ–∫—Å—Ç/—É–¥–∞–ª–∏—Ç—å] - –±–∏–Ω–¥—ã
    üÜì–•–∞–ª—è–≤–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ö–∞–ª—è–≤–Ω—ã–µ –¥–µ–Ω—å–≥–∏

üì¢–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    üë®–°–∫–∞–∂–∏ –º [—Ç–µ–∫—Å—Ç] - –±–æ—Ç –æ–∑–≤—É—á–∏—Ç —Ç–µ–∫—Å—Ç –º—É–∂—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º
    üë©–°–∫–∞–∂–∏ –∂ [—Ç–µ–∫—Å—Ç] - –±–æ—Ç –æ–∑–≤—É—á–∏—Ç —Ç–µ–∫—Å—Ç –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º

üî∞–ö–∞–Ω–≤–∞—Å (—Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ):
    üíæ–ö–ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ—Ñ–∏–ª—å 
    ‚ö†–ü–æ—Ä–Ω–æ - –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è (18+)
    ‚úè–ù–∞–ø–∏—à–∏ [—Ç–µ–∫—Å—Ç] - –Ω–∞–ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ
     

üí≥–î–æ–Ω–∞—Ç - –∫—É–ø–∏—Ç—å –∞–¥–º–∏–Ω–∫—É
üÜò–†–µ–ø–æ—Ä—Ç [—Ç–µ–∫—Å—Ç] - –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @nodejs_coder

${LITE.indexOf(message.senderId) !== -1 ? `‚ö† –ê–¥–º–∏–Ω–∫–∞ - –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É` : ``}`));

updates.hear(/^(?:–ø—Ä–æ—Ñ–∏–ª—å|üìí\s–ø—Ä–æ—Ñ–∏–ª—å)$/i, async (message) => {
	let text = ``;
	const biz = businesses.find(x=> x.id === message.user.business);
	message.append = (_text) => text += _text+"\n";

	message.append("—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:");
	message.append("üîé ID: " + message.user.uid);
	message.append("üí∞ –ë–∞–ª–∞–Ω—Å: " + utils.spaces(message.user.balance) + "$");
	if(message.user.diamonds) message.append("üíé –ê–ª–º–∞–∑–æ–≤: " + utils.spaces(message.user.diamonds));
	if(message.user.bank) message.append("üí≥ –í –±–∞–Ω–∫–µ: " + utils.spaces(message.user.bank) + "$");
	message.append("üëë –†–µ–π—Ç–∏–Ω–≥: " + message.user.rating);
	message.append(LITE.indexOf(message.senderId) !== -1 ? `üî± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä` : ``);
	if(message.user.work) message.append("üëî –†–∞–±–æ—Ç–∞: " + works.find((x) => x.id === message.user.work).name);
	if(message.user.house || message.user.apartment || message.user.biz || message.user.phone || message.user.business || message.user.computer || message.user.car) message.append("\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:");

	if(message.user.car) message.append(`&#4448;üöò –ú–∞—à–∏–Ω–∞: ${CARS.find((x) => x.id === message.user.car).name}`);
	if(message.user.biz) text += `üë©‚Äçüíª –ë–∏–∑–Ω–µ—Å: ${biz.name}\n`;
	if(message.user.house) message.append(`&#4448;üè† –î–æ–º: ${houses.find((x) => x.uid === message.user.house).name}`);
	if(message.user.apartment) message.append(`&#4448;üåá –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${apartments.find((x) => x.uid === message.user.apartment).name}`);
	if(message.user.phone) message.append(`&#4448;üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phones.find((x) => x.uid === message.user.phone).name}`);
	if(message.user.comp) message.append(`&#4448;üñ• –ö–æ–º–ø—å—é—Ç–µ—Ä:  ${comps.find((x) => x.id == message.user.comp).name}`);

	message.append("\nüìó –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + unixStamp(message.user.regDate));

	return message.reply(text);
});

updates.hear(/^(?:–±–∞–ª–∞–Ω—Å)$/i, async (message) => {
	return message.reply(`–Ω–∞ —Ä—É–∫–∞—Ö: ${utils.spaces(message.user.balance)}$${message.user.diamonds ? `\nüíé –ê–ª–º–∞–∑–æ–≤: ${utils.spaces(message.user.diamonds)}` : ``}${message.user.bank ? `\nüí≥ –í –±–∞–Ω–∫–µ: ${utils.spaces(message.user.bank)}$` : ``}`);
});

updates.hear(/^(?:—Å–∫–∞–∂–∏)\s([–º|–∂])\s(.*)$/i, async (message) => { 
let https = require('https'); 
if(!message.$match[1] && !message.$match[2]) return message.send('–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –°–∫–∞–∂–∏ –º –ø—Ä–∏–≤–µ—Ç (–º - –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å, –∂ - –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)'); 
if(message.text.length > 500) return message.send('–ú–∞–∫—Å. - 500 —Å–∏–º–≤–æ–ª–æ–≤'); 
https.get("https://tts.voicetech.yandex.net/generate?text=" + encodeURIComponent(message.$match[2]) + `&format=mp3&lang=ru-RU&speaker=${message.$match[1] == "–º" ? "ermil" : utils.pick(["alyss", "jane"])}&speed=1&key=3b141899-4097-45c6-a00b-d449812e1ffa&emotion=mixed`, (stream) => { 
stream.name = 'audio_message.ogg'; 
return message.sendAudioMessage(stream); 
}); 
});

updates.hear(/^(?:–ø—Ä–æ–≤–µ—Ä–∏—Ç—å)\s?([^]+)?/i, (message) => {
    let a = message.match$;  
    let send = reply
    if(!a[1]) return message.send(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ '–î–û–ù–ê–¢'`);
    Wallet.getOperationHistory({rows: 50, operation: "IN"}, (err, operations) => {
        for(i in operations['data']){
            stats = true;
            if(operations['data'][i]['txnId'] != a[1]) return message.send(`–ü–ª–∞—Ç—ë–∂ ‚Ññ${a[1]} –Ω–µ–æ–±–Ω–∞—Ä—É–∂–µ–Ω.`)
            if(operations['data'][i]['txnId'] == a[1]){
                if(don[operations['data'][i]['txnId']]) return message.send(`–ü–ª–∞—Ç—ë–∂ ‚Ññ${a[1]} —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`)
                don[operations['data'][i]['txnId']] = {
                    user: message.senderId,
                    comment: operations['data'][i]['comment']
                }
 
                if(operations['data'][i]['comment'] != null){
                    if(operations['data'][i]['comment'] == 'money'){
                        message.user.balance += Number(operations['data'][i]['total']['amount'] * 2000000000)
                        return message.send(`
[üî•–î–∞–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•]
|||||||||||||||||||||||||||||||
üí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${operations['data'][i]['total']['amount']} —Ä—É–±–ª–µ–π
üí¨–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ${operations['data'][i]['comment']}
-_-_-_-_-_-_-_-_-_-_-_-_-_-_
üíé –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –ò–≥—Ä–æ–≤–∞—è –í–∞–ª—é—Ç–∞
üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–Ω–æ: ${operations['data'][i]['total']['amount'] * 2000000000}$
                        `);
                    }  
                }
                    if(operations['data'][i]['comment'] == 'vip' && operations['data'][i]['total']['amount'] == 50){
                        message.user.right = 1;
                        return message.send(`
[üî•–î–∞–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•]
|||||||||||||||||||||||||||||||
üí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${operations['data'][i]['total']['amount']} —Ä—É–±–ª–µ–π
üí¨–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ${operations['data'][i]['comment']}
-_-_-_-_-_-_-_-_-_-_-_-_-_-_
üíé –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: Bronze`)
                }
                    if(operations['data'][i]['comment'] == 'admin' && operations['data'][i]['total']['amount'] == 100){
                        message.user.vip = 2;
                        return message.send(`
[üî•–î–∞–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•]
|||||||||||||||||||||||||||||||
üí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${operations['data'][i]['total']['amount']} —Ä—É–±–ª–µ–π
üí¨–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ${operations['data'][i]['comment']}
-_-_-_-_-_-_-_-_-_-_-_-_-_-_
üíé –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: VIP`)
                }
                return message.send(`
[üî•–î–∞–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•]
|||||||||||||||||||||||||||||||
üí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${operations['data'][i]['total']['amount']} —Ä—É–±–ª–µ–π
üí¨–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: –ù–µ —É–∫–∞–∑–∞–Ω
-_-_-_-_-_-_-_-_-_-_-_-_-_-_
–ù–∞–ø–∏—à–∏—Ç–µ @id496175718 (–µ–º—É), –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞
                `);
            }
        }
    });
})

updates.hear(/^(?:—Å—Ç–∞–≤–∫–∞)$/i, async (message, bot) => { message.user.foolder += 1 
let text = ``; 
for (i in stavka) { 
text += `${message.user.balance > stavka[i].balance && stavka[i].id !== message.user.uid ? 'üî∏' : 'üîπ'} ${stavka[i].id}. "${stavka[i].name}" - ${utils.sp(stavka[i].balance)}$\n`; 
}; 
return message.reply(`–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:\n${text}\nüî∏ - –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å.\n‚ùì –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ç–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–°—Ç–∞–≤–∫–∞ [–Ω–æ–º–µ—Ä]¬ª`) 
}); 

const fs = require("fs");

updates.hear(/^(?:–∫–ø—Ä–æ—Ñ–∏–ª—å)/i, async (message, bot) => { 

let ctx = message 

ctx.send(`–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: —á—Ç–æ–±—ã –∫–∞–Ω–≤–∞—Å —Ä–∞–±–æ—Ç–∞–ª, –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—Å –≥—Ä—É–ø–ø—ã.`) 

const { createCanvas, loadImage } = require('canvas'); 
const { registerFont } = require('canvas')

registerFont('./17282.ttf', { family: 'mr_CCUpUpAndAwayG' })
const canvas = createCanvas(800, 400); 
const ctxx = canvas.getContext('2d'); 

const use_id = message.user.id; 
const [ava_info] = await vk.api.users.get({ user_id: use_id, fields: "photo_400" }); 
const [user_info] = await vk.api.users.get({ user_id: use_id }); 
const phone = await loadImage('./canvas/grad.png') 
ctxx.fillStyle = "#FFFFFF"; 

const mychit = await loadImage(ava_info.photo_400); 
ctxx.drawImage(mychit, 0, 0); 
ctxx.drawImage(phone, 0, 0, 800, 400); 

ctxx.font = '25px mr_CCUpUpAndAwayG'; 
ctxx.fillText(`ID: ${utils.spaces(message.user.uid)}`, 250, 70); 
ctxx.fillText(`–ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)} $`, 250, 118); 
ctxx.fillText(`–†–µ–π—Ç–∏–Ω–≥: ${utils.spaces(message.user.rating)}`, 258, 170);
ctxx.fillText(`–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${unixStamp(message.user.regDate)} `, 254, 270);

//ctxx.textAlign = "right"; 
ctxx.font = '22px mr_CCUpUpAndAwayG'; 
ctxx.fillText(`${user_info.first_name} ${user_info.last_name} :`, 370, 27); 

return ctx.sendPhoto({ 
value: canvas.toBuffer(), 
options:{ 
filename: 'cit.png' 
} 
}); 
});

updates.hear(/^(?:—Ç–æ–ø)$/i, async (message) => {

let ttp = [];

let users = await User.find({ balance: { $gt: 15000000 }});

for (let i = 0; i < users.length; i += 1) {
		ttp.push({ id: users[i].id, rating: users[i].rating, balance: users[i].balance, tag: users[i].tag, uid: users[i].uid });
	}
		return message.reply(`—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:
		
	${
		ttp
		.sort((a, b) => b.rating - a.rating)
		.slice(0, 10)
		.map((x, i) => `${i === 9 ? "&#128287;" : `${i + 1}&#8419;`} @id${x.id} (${x.tag}) ‚Äî ${utils.formatNumber(x.rating)} üëë | $${utils.spaces(x.balance)}`)
		.join("\n")
	}`);
});

updates.hear(/^(?:mmm)\s([0-9]+)\s([0-9]+)\s(.*)$/i, async (message) => { 
const qr = require('@vkontakte/vk-qr/dist/umd/qrCodeGenerator'); 
var svg2img = require('svg2img'); 
const QRReader = require('qrcode-reader'); 
const jimp = require('jimp');

	if(message.senderId !== 496175718) return; 
	let $promo = await Promo.findOne({ title: message.$match[3].toLowerCase() }); 
	
	if($promo) return message.reply(`—É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥, —Å–æ—Å—É–Ω –º–µ–ª–∫–∏–π.`); 
	let newPromo = new Promo({ 
	title: message.$match[3].toLowerCase(), 
	count: Number(message.$match[1]), 
	users: [], 
	sum: Number(message.$match[2]) 
	}); 
	
	await newPromo.save(); 
	
	const text = message.$match[3].toLowerCase(); 
	const options = { 
	isShowLogo: true, 
	logoData: false, // logo data in base64 
	isShowBackground: true, // show qr-background 
	backgroundColor: '#FFFFFF', // qr-code background color 
	foregroundColor: '#000000', // qr-code color 
	}; 
	
	const qrSvg = qr.createQR(text, 2050, 'qr-code-class', options); 
	
	//1. convert from svg string 
	//2. convert from svg's base64 string 
	svg2img(qrSvg, {format:'jpg','quality':100}, function(error, buffer) { 
	fs.writeFileSync('foo6.jpg', buffer); 
	
	
	return message.sendPhoto('./foo6.jpg') 

	
	
	
	}); 
	});

updates.hear(/^(?:–≥–æ–≤–æ—Ä–∏)\s(.*)/i, async (message) => {
const googleTTS = require('google-tts-api');
 
googleTTS(message.$match[1], 'ru', 2.5) 
.then(function (url) {
  message.sendAudioMessage(url) ;
})
.catch(function (err) {
  console.error(err.stack);
});
})

updates.hear(/^(?:–Ω–∞–ø–∏—à–∏)\s(.*)$/i, async (message) => {

let ctx = message 

ctx.send(`–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: —á—Ç–æ–±—ã –∫–∞–Ω–≤–∞—Å —Ä–∞–±–æ—Ç–∞–ª, –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—Å –≥—Ä—É–ø–ø—ã.`) 
if(message.text.length > 100) return message.send('–ú–∞–∫—Å. - 100 —Å–∏–º–≤–æ–ª–æ–≤'); 

const { createCanvas, loadImage } = require('canvas'); 
const canvas = createCanvas(800, 400); 
const ctxx = canvas.getContext('2d'); 

const use_id = message.user.id; 
const [ava_info] = await vk.api.users.get({ user_id: use_id, fields: "photo_400" }); 
const [user_info] = await vk.api.users.get({ user_id: use_id }); 
const phone = await loadImage('./canvas/grad2.jpg') 
ctxx.fillStyle = "#000000"; 

const mychit = await loadImage(ava_info.photo_400); 
ctxx.drawImage(mychit, 0, 0); 
ctxx.drawImage(phone, 0, 0, 800, 400); 

ctxx.font = '23px mr_CCUpUpAndAwayG'; 
ctxx.fillText(`${message.$match[1]}`, 270, 118); 

//ctxx.textAlign = "right"; 
ctxx.font = '22px mr_CCUpUpAndAwayG'; 
ctxx.fillText(`${user_info.first_name} ${user_info.last_name} :`, 300, 27); 

return ctx.sendPhoto({ 
value: canvas.toBuffer(), 
options:{ 
filename: 'napiIIIi.png' 
} 
}); 
});

updates.hear(/^(?:—Å—Ç–∞–≤–∫–∞)\s([0-9]+)$/i, async (message, bot) => { message.user.foolder += 1 
message.$match[1] = Math.floor(Number(message.$match[1])); 
for (i in stavka) { 
if(stavka[i].id === message.$match[1]) { 
if(message.user.balance < stavka[i].balance) return message.reply(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!`); 
if(message.user.uid === stavka[i].id) return message.reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!`); 
let user = users.findOne(uid === Number(message.$match[1]))
if(stavka[i].name == "–†–µ—à–∫–∞") name = "–û—Ä—ë–ª"; 
if(stavka[i].name == "–û—Ä—ë–ª") name = "–†–µ—à–∫–∞"; 
let int = utils.pick(1, 2); 
if(int === 1) { 
count = stavka[i].balance; 
message.user.balance -= count; 
user.balance += count * 2; 
return message.reply(`–í—ã–ø–∞–ª–æ "${name}"\nüí¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.space(count)}$!\nüí∞ –ë–∞–ª–∞–Ω—Å: ${utils.space(message.user.balance)}`); 
vk.api.messages.send({ user_id: user.id, message: `–í—ã–ø–∞–ª–æ "${stavka[i].name}"\n‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.space(count)}$!\nüí∞ –ë–∞–ª–∞–Ω—Å: ${utils.space(user.balance)}`}); 
delete stavka[i]; 
return 
}; 
if(int === 2) { 
count = stavka[i].balance; 
message.user.balance += count; 
return message.reply(`–í—ã–ø–∞–ª–æ "${stavka[i].name}"\n‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.space(count)}$!\nüí∞ –ë–∞–ª–∞–Ω—Å: ${utils.space(message.user.balance)}`); 
vk.api.messages.send({ user_id: user.id, message: `–í—ã–ø–∞–ª–æ "${name}"\nüí¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.space(count)}$!\nüí∞ –ë–∞–ª–∞–Ω—Å: ${utils.space(user.balance)}`}); 
delete stavka[i]; 
return 
}; 
}; 
}; 
}); 

updates.hear(/^(?:—Å—Ç–∞–≤–∫–∞)\s(—É–¥–∞–ª–∏—Ç—å)$/i, async (message, bot) => { message.user.foolder += 1 
for (i in stavka) { 
if(stavka[i].id === message.user.uid) { 
count = stavka[i].balance 
message.user.balance += stavka[i].balance 
return message.reply(`–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É!`); 
delete stavka[i]; 
return 
} 
}; 
return message.reply(`–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫!`); 
}); 

updates.hear(/^(?:—Å—Ç–∞–≤–∫–∞)\s(—Ä–µ—à–∫–∞)\s(.*)$/i, async (message, bot) => { message.user.foolder += 1 
message.$match[2] = utils.parseBet(message.$match[1], message.user.balance);
if(message.$match[2] <= 0) return; 
if(!Number(message.$match[2])) return; 
if(message.$match[2] > message.user.balance) return message.reply(`–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–º–º—ã!`); 
for (i in stavka) { 
if(stavka[i].id === message.user.uid) return message.reply(`–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É! –í–≤–µ–¥–∏—Ç–µ: ¬´–°—Ç–∞–≤–∫–∞ —É–¥–∞–ª–∏—Ç—å¬ª –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É!`); 
}; 
let newStavka = new Stavka({
balance: message.$match[2], 
name: "–†–µ—à–∫–∞", 
id: message.user.uid 
}); 
message.user.balance -= message.$match[2]; 
return message.reply(`–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É "–†–µ—à–∫–∞" –Ω–∞ —Å—É–º–º—É ${utils.space(message.$match[2])}$`); 
}); 

updates.hear(/^(?:—Å—Ç–∞–≤–∫–∞)\s(–æ—Ä(?:–µ|—ë)–ª)\s(.*)$/i, async (message, bot) => { message.user.foolder += 1 
message.$match[2] = utils.parseBet(message.$match[1], message.user.balance);
if(message.$match[2] <= 0) return; 
if(!Number(message.$match[2])) return; 
if(message.args[2] > message.user.balance) return message.reply(`–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–º–º—ã!`); 
for (i in stavka) { 
if(stavka[i].id === message.user.uid) return message.reply(`–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É! –í–≤–µ–¥–∏—Ç–µ: ¬´–°—Ç–∞–≤–∫–∞ —É–¥–∞–ª–∏—Ç—å¬ª –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É!`); 
}; 
let newStavka = new Stavka({
balance: message.$match[2], 
name: "–û—Ä—ë–ª", 
id: message.user.uid 
});
message.user.balance -= message.$match[2]; 
return message.reply(`–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É "–û—Ä—ë–ª" –Ω–∞ —Å—É–º–º—É ${utils.space(message.$match[2])}$`); 
});

updates.hear(/^(?:–æ—Ü–µ–Ω–∏)/i, async (message, bot) => {
message.reply(`–º–æ—è –æ—Ü–µ–Ω–∫–∞: ` + utils.random(1, 10) + `/10`);
})

updates.hear(/^(?:–≥–∏—Ñ)/i, async (message, bot) => {
	vk.api.call('docs.search', {q: utils.pick(['—Ä–∂–∞–∫–∞', '–∏–≥—Ä—ã', '–∫–∞–≤–∞–∏', '–ª–∞–π—Ñ—Ö–∞–∫–∏', '—Ç—è–Ω', '–∫—Ä–∞—Ñ—Ç', '–ª—é–±–æ–≤—å', '–∞–Ω–∏–º–µ', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '5 minute', '–ø–∏–∑–¥–µ—Ü', '—Å–º–µ—à–Ω–æ', '–º–µ–º', '–∫–ª–∞—Å—Å–Ω–æ', '–Ω—è', '–ø–∏–∫—á–∞', '–∞–≤–∞—Ä–∏—è']) + '.gif', count: 1})
	 .then(response => {
		 let items = response.items.map(x => `doc${x.owner_id}_${x.id}`).join(',');
		 let item = utils.pick(response.items);
		 message.send({attachment: items})
	 })
});

updates.hear(/^(?:–≤—ã–±–µ—Ä–∏)\s([^]+)\s(?:–∏–ª–∏)\s([^]+)$/i, (message) => {
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<–≤—ã–±–µ—Ä–∏ [—Å–ª–æ–≤–æ] –∏–ª–∏ [—Å–ª–æ–≤–æ]>> ${utils.getSadEmoji()}`);
	const first = message.$match[1];
	const second = message.$match[2];

	const phrase = utils.pick([`–∫–æ–Ω–µ—á–Ω–æ ${utils.random(1, 2)} –≤–∞—Ä–∏–∞–Ω—Ç`, `–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ ${utils.random(1, 2)} –≤–∞—Ä–∏–∞–Ω—Ç –ª—É—á—à–µ`]);
	return message.reply(`, ${phrase}`);
});
updates.hear(/^–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏\s(.*)/i, (message) => {
	if(!message.$match[1]) return message.reply(`–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Å–ª–æ–≤–æ]>> ${utils.getSadEmoji()}`);
	let filters     = /([0-9]|\#)/ig;
	let SymFilter   = /[-!$%^&*()_+|~=`{}\[\]:";'<>?,.\/]/ig;
	if (filters.test(message.$match[1]) || SymFilter.test(message.$match[1])) return;
    message.reply(`–¥–µ—Ä–∂–∏: "${flipString(message.$match[1])}"`);
});

updates.hear(/^(?:–±–∞–Ω–∫\s—Å–Ω—è—Ç—å)\s(.*)$/i, async (message) => {
	message.$match[1] = utils.parseBet(message.$match[1], message.user.bank);
	if(!message.$match[1]) return;

	if(message.$match[1] > message.user.bank) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[1] <= message.user.bank) {
		await message.user.inc("balance", message.$match[1]);
		await message.user.dec("bank", message.$match[1]);

		return message.reply(`–≤—ã —Å–Ω—è–ª–∏ ${utils.spaces(message.$match[1])}$
		üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á—ë—Ç–µ: ${utils.spaces(message.user.bank)}$
		üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`);
	}
});

updates.hear(/^(?:–±–∞–Ω–∫)\s(.*)$/i, async (message) => {
	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);
	if(!message.$match[1]) return;

    if(message.$match[2] > 250000000000) return message.reply(`–ª–∏–º–∏—Ç: 250.000.000.000$`);

	if(message.$match[1] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[1] <= message.user.balance) {
		await message.user.inc("bank", message.$match[1]);
		await message.user.dec("balance", message.$match[1]);

		return message.reply(`–≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç ${utils.spaces(message.$match[1])}$`);
	}
});

updates.hear(/^(?:—Ä–µ–π—Ç–∏–Ω–≥)\s?(.*)?$/i, async (message) => {
	if(!message.$match[1]) return message.reply(`–≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${utils.spaces(message.user.rating)}üëë`);
	if(message.$match[1].startsWith("–ø—Ä–æ–¥–∞—Ç—å")) {
		message.$match[1] = utils.parseBet(message.$match[1].replace(/(–ø—Ä–æ–¥–∞—Ç—å)/ig, "").trim(), message.user.rating);
		if(!message.$match[1]) return;

		if(message.$match[1] <= 0) return;
		if(message.$match[1] > message.user.rating) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞. ${utils.getSadEmoji()}`);
		else if(message.$match[1] <= message.user.rating) {
			await message.user.dec("rating", message.$match[1]);
			await message.user.inc("balance", message.$match[1] * 150000000);

			return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.spaces(message.$match[1])}üëë –∑–∞ ${utils.spaces(message.$match[1] * 150000000)}$`);
		}

		return;
	}

	message.$match[1] = Math.floor(Number(message.$match[1].replace(/(–∫|k)/ig, "000").replace(/(–º|m)/ig, "000000")));

	if(message.$match[1] <= 0) return;

	if(( message.$match[1] * 250000000 ) > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(( message.$match[1] * 250000000) <= message.user.balance) {
		await message.user.dec("balance", ( message.$match[1] * 250000000 ));
		await message.user.inc("rating", message.$match[1]);

		return message.reply(`–≤—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ ${utils.spaces(message.$match[1])}üëë –∑–∞ ${utils.spaces(message.$match[1] * 250000000)}$
		üí∞ –ù–∞ —Ä—É–∫–∞—Ö: ${utils.spaces(message.user.balance)}$`);
	}
});

updates.hear(/^(?:–Ω–∏–∫)\s(.*)$/i, async (message) => {
	if(message.$match[1].length > 16) return message.reply(`–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞ 16 —Å–∏–º–≤–æ–ª–æ–≤`);
	if(/(–∞–¥–º–∏–Ω)/i.test(message.$match[1])) message.$match[1] = "–ñ–æ–ø–∞–∞";

	message.user.set("tag", message.$match[1]);
	return message.reply(`–≤—ã —Ç–µ–ø–µ—Ä—å "${message.$match[1]}"`);
});

updates.hear(/^(?:–ø–µ—Ä–µ–¥–∞—Ç—å)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.banpay) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏!`);
	if(message.user.peredacha > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.peredacha - getUnix())}`);

	await message.user.set("peredacha", getUnix() + 86400000);

	let $user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!$user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);
	if($user.uid === message.user.uid) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);

    if(user.id !== message.senderId && message.$match[2] > 5000000000) return message.reply(`–ª–∏–º–∏—Ç: 5.000.000.000$`);

	if($user.banpay) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É.`);
	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);

	if(!message.$match[2]) return;
	if(message.$match[2] <= 0) return;

	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance) {
		await message.user.dec("balance", message.$match[2]);
		await $user.inc("balance", message.$match[2]);

		let log = new Log({
			from: message.senderId,
			to: $user.id,
			date: getUnix(),
			amount: message.$match[2]
		});

		await log.save();
		return message.reply(`–≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É "${$user.tag}" ${utils.spaces(message.$match[2])}$`);
	}
});

updates.hear(/^(?:–≤–∏–ø\s–±–æ–Ω—É—Å)$/i, async (message) => {
	if(message.user.vip < 1) return message.send(`–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–ø.`)
	if(message.user.tbonus > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.tbonus - Date.now())}`);
	let prize = utils.pick([100000000, 20000000000, 30000000000]);

	await message.user.inc("balance", prize);
	await message.user.set("tbonus", getUnix() + 86400000);

	await message.reply(`–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(prize)}$
	üí∞ –ù–∞ —Ä—É–∫–∞—Ö: ${utils.spaces(message.user.balance)}$`);

	await message.sendSticker(8797);
});

updates.hear(/^(?:–±–æ–Ω—É—Å|üíé\s–±–æ–Ω—É—Å)$/i, async (message) => {
	if(message.user.tbonus > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.tbonus - Date.now())}`);
	let prize = utils.pick([30000000, 20000000, 1000000, 50000000]);

	await message.user.inc("balance", prize);
	await message.user.set("tbonus", getUnix() + 86400000);

	await message.reply(`–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(prize)}$
	üí∞ –ù–∞ —Ä—É–∫–∞—Ö: ${utils.spaces(message.user.balance)}$`);

	await message.sendSticker(8797);
});

updates.hear(/^(?:—Ä–µ–ø–æ—Ä—Ç)\s([^]+)$/i, async (message) => {
	if(message.user.banreport) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç. ${utils.getSadEmoji()}`);
	if(message.user.treport > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.treport - Date.now())}`);

	await vk.api.call("messages.send", { chat_id: 1, message: `${ADMINS.map((x, i) => `@id${x} (–ê–¥–º–∏–Ω ‚Ññ${i+1})`).join(" ")}, –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!
	üó£ –û—Ç–ø—Ä–∞–≤–∏–ª: ${message.senderId}
	üîé –ò–≥—Ä–æ–≤–æ–π ID: ${message.user.uid}
	‚û° @id${message.senderId} (${message.user.tag})${message.isChat ? " –≤ –±–µ—Å–µ–¥–µ ‚Ññ"+message.chatId : ""}: ${message.$match[1]}`, random_id: Math.random(), attachment: message.attachments, forward_messages: message.id });

	if(message.attachments.find((x) => typeof(x) !== "string")) {
		let att = message.attachments.filter((x) => typeof(x) !== "string");
		att.map(async (x) => {
			const { largePhoto } = x;

			const attachment = await vk.upload.messagePhoto({
				peer_id: 350151000,
				source: largePhoto
			});

			await vk.api.call("messages.send", {
				chat_id: 1,
				message: "[–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ —Ä–µ–ø–æ—Ä—Ç–∞] –æ—Ç @id" + message.senderId,
				attachment: attachment,
				random_id: Math.random()
			});
		});
	}

	await message.user.set("treport", getUnix() + 60000);

	await message.reply(`–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
	await message.sendSticker(8797);
});
updates.hear(/^(?:~)\s([^]+)/i, async (message) => {
	if(message.senderId !== 496175718) return;
	try {
		const result = eval(message.$match[1]);

		if(typeof(result) === "string")
		{
			return message.reply(`string: ${result}`);
		} else if(typeof(result) === "number")
		{
			return message.reply(`number: ${result}`);
		} else {
			return message.reply(`${typeof(result)}: ${JSON.stringify(result, null, '&#4448;')}`);
		}
	} catch (e) {
		console.error(e);
		return message.reply(`–æ—à–∏–±–∫–∞:
${e.toString()}`);
		}
});

updates.hear(/^(?:–æ—Ç–≤–µ—Ç)\s([0-9]+)\s([^]+)$/i, async (message) => {
	if(ADMINS.indexOf(message.senderId) === -1) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.`);
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	await vk.api.call("messages.send", { user_id: user.id, message: `‚úâ | –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ <<${message.user.tag}>>:\n\n${message.$match[2]}`, random_id: Math.random() });
	return message.reply(`–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
});

updates.hear(/^(?:—á–∞—Ç–æ—Ç–≤–µ—Ç)\s([0-9]+)\s([^]+)$/i, async (message) => {
	if(ADMINS.indexOf(message.senderId) === -1) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.`);

	await vk.api.call("messages.send", { chat_id: Number(message.$match[1]), message: `‚úâ | –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ <<${message.user.tag}>>:\n\n${message.$match[2]}`, random_id: Math.random() });
	return message.reply(`–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
});

updates.hear(/^–¥–∞—Ç–∞$/i, (message) => {
    request.post({
        "url": "https://apidog.ru/api/v2/apidog.getUserDateRegistration",
        "form": {
            "userDomain": message.senderId
        }
    }, (error, response, body) => {
        let data = JSON.parse(body);
        let [date, time] = [data.response.date, data.response.time];
        message.reply(" –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –í–ö: " + date + ", " + time);
    });
});
updates.hear(/^—Ä–µ—à–∏\s([^"]+)$/i, (message) => {
    try {
        message.reply(" " + message.$match[1] + "=" + mathjs.eval(message.$match[1]));
    } catch (e) {
        // 
    }
});

updates.hear(/^(?:—Ä–∞–±–æ—Ç–∞|—Ä–∞–±–æ—Ç—ã)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`–≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:
		
		${
			works
			.filter((x) => x.lvl <= message.user.lvl)
			.map((x, i) => `üîπ ${i + 1}. ${x.name} ‚Äî ~${utils.spaces(x.min)}$`)
			.join("\n")
		}
		
		–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è: —Ä–∞–±–æ—Ç–∞ [–Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã]`);
	}

	const work = works.find((x) => x.id == message.$match[1]);
	if(!work) return console.info(work);

	if(message.user.work) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞!`);

	if(work.lvl > message.user.lvl) return message.reply(`–ø–æ–∫–∞-—á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Ä–∞–±–æ—Ç—É!`);
	else if(work.lvl <= message.user.lvl) {
		message.user.set("work", work.id);
		return message.reply(`–≤—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å <<${work.name}>>`);
	}
});

updates.hear(/^(?:–∞–≤–∞—Ç–∞—Ä)$/i, async (message) => {
	let lico = utils.pick("üò∂ üòê üòë üòí üôÑ ü§î üò≥ üòÄ üò¨ üòÅ üòÇ üòÉ üòÑ üòÖ üòÜ üòá üòâ üòä üôÇ üôÉ ‚ò∫ üòã üòå üòç üòò üòó üòô üòö üòú üòù üòõ ü§ë ü§ì üòé ü§ó üòè üòû üòü üò† üò° üòî üòï üôÅ ‚òπ üò£ üòñ üò´ üò© üò§ üòÆ üò± üò® üò∞ üòØ üò¶ üòß üò¢ üò• üò™ üòì üò≠ üòµ üò≤ ü§ê üò∑ ü§í ü§ï üò¥".split(" "));
	let odezda = utils.pick("üëö üëï üëó üëô üëò".split(" "));
	let shtanu = utils.pick("üëñ".split(" "));
	let sapogi = utils.pick("üëû üëü üë† üë° üë¢".split(" "));
	let sapka = utils.pick("üéì üëë üëí üé© ‚õë ".split(" "));
	return message.reply(`–¥–µ—Ä–∂–∏:

	     ${sapka}
	     ${lico}
	     ${odezda}
	     ${shtanu}
	${sapogi}${sapogi}`);
});

updates.hear(/^(?:—Ä–∞–±–æ—Ç–∞—Ç—å|üî®\s—Ä–∞–±–æ—Ç–∞—Ç—å)$/i, async (message) => {
	if(!message.user.work) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã.`);
	if(message.user.twork > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.twork - Date.now())}`);

	await message.user.set("twork", getUnix() + 600000);
	let work = works.find((x) => x.id === message.user.work);

	let earn = utils.random(work.min, work.max);

	await message.user.inc("balance", earn);
	await message.user.inc("lvl", 1);

	return message.reply(`–≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${utils.spaces(earn)}$`);
});

updates.hear(/^(?:—É–≤–æ–ª–∏—Ç—å—Å—è)$/i, async (message) => {
	await message.user.set("work", 0);
	return message.reply(`–≤—ã —É–≤–æ–ª–∏–ª–∏—Å—å.`);
});

updates.hear(/^(?:–∫–∞–∑–∏–Ω–æ)\s?(.*)?$/i, async (message, bot) => {
	message.$match[1] = utils.parseBet(message.$match[1], message.user.balance);

	let smilelose = utils.pick("üò© üòï üò¶ üòµ üòü üòî üò© üòø".split(" "));
    let smilewin = utils.pick("üòÑ üòÅ üòä üòÉ üòâ üòú üòã üôÇ üôÉ üòå ü§§ üòá ü§™ üòà üòé".split(" "));

	if(!Number(message.$match[1])) return;
	message.$match[1] = Math.floor(Number(message.$match[1]));

	if(message.$match[1] <= 0) return;

	if(message.$match[1] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
else if(message.$match[1] <= message.user.balance && message.user.balance <= 50000000000) 
{ 

message.user.balance -= message.$match[1]; 
const multiply = utils.pick([0, 0, 0, 0, 50, 1, 0.75, 2, 1, 0, 5, 2, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]); 

await message.user.inc("balance", Math.floor(message.$match[1] * multiply));

return message.reply(`${multiply === 1 ? `–≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å` : `${multiply < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] - message.$match[1] * multiply)}$ ${smilelose}\n` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] * multiply - message.$match[1])}$ ${smilewin}\n`}`} (x${multiply}) 
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`); 
} 

else if(message.$match[1] <= message.user.balance && message.user.balance > 50000000000 && message.user.balance <= 300000000000) 
{ 
await message.user.dec("balance",  message.$match[1]);
const multiply = utils.pick([0, 0, 0, 0, 10, 1, 5, 5, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 1, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]); 

await message.user.inc("balance", Math.floor(message.$match[1] * multiply));

return message.reply(`${multiply === 1 ? `–≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å` : `${multiply < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] - message.$match[1] * multiply)}$ ${smilelose}\n` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] * multiply - message.$match[1])}$ ${smilewin}\n`}`} (x${multiply}) 
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`); 
} 

else if(message.$match[1] <= message.user.balance && message.user.balance > 300000000000 && message.user.balance <= 1000000000000) 
{ 
await message.user.dec("balance",  message.$match[1]);
const multiply = utils.pick([0, 0, 0, 0, 5, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 1, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]); 

await message.user.inc("balance", Math.floor(message.$match[1] * multiply));

return message.reply(`${multiply === 1 ? `–≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å` : `${multiply < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] - message.$match[1] * multiply)}$ ${smilelose}\n` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] * multiply - message.$match[1])}$ ${smilewin}\n`}`} (x${multiply}) 
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`); 
} 

else if(message.$match[1] <= message.user.balance && message.user.balance > 1000000000000 && message.user.balance <= 10000000000000) 
{ 
await message.user.dec("balance",  message.$match[1]); 
const multiply = utils.pick([0, 0, 0, 0, 1, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]); 

await message.user.inc("balance", Math.floor(message.$match[1] * multiply));

return message.reply(`${multiply === 1 ? `–≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å` : `${multiply < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] - message.$match[1] * multiply)}$ ${smilelose}\n` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] * multiply - message.$match[1])}$ ${smilewin}\n`}`} (x${multiply}) 
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`); 
} 
else if(message.$match[1] <= message.user.balance && message.user.balance > 10000000000000)
{ 
await message.user.dec("balance",  message.$match[1]);
const multiply = utils.pick([0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0.25, 0.25, 0.25, 0.25, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75, 0.75, 0.75, 0.75, 0.75]); 

await message.user.inc("balance", Math.floor(message.$match[1] * multiply));

return message.reply(`${multiply === 1 ? `–≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å` : `${multiply < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] - message.$match[1] * multiply)}$ ${smilelose}\n` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[1] * multiply - message.$match[1])}$ ${smilewin}\n`}`} (x${multiply}) 
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`); 
	}
});

updates.hear(/^(?:–≤–∑–ª–æ–º–∞—Ç—å)$/i, async (message) => {
	let HackPercent = 0;
	if(message.user.thack > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑–ª–æ–º–∞—Ç—å —á–µ—Ä–µ–∑: ${unixStampLeft(message.user.thack - getUnix())} `);
	if(!message.user.comp) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!.\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ: –ö–æ–º–ø—å—é—Ç–µ—Ä—ã.`);
	HackPercent = utils.random(1, 100);
	if (HackPercent <= 70) {
		message.reply(`–≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∑–ª–æ–º–∞—Ç—å!`)
		await message.user.set("thack", getUnix() + 300000);
	} else if (HackPercent > 50) {
		let HackID = 0;
		let chiter = utils.random(1, 8);
		HackID = utils.random(1, 4);
		await message.user.inc("balance", chiter * HACKS[HackID - 1].award);
		return message.reply('–≤—ã —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–ª–∏ ' + HACKS[HackID - 1].preview + '\n\n‚úÖ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ' + utils.spaces(chiter * HACKS[HackID - 1].award) + '$', { attachment: HACKS[HackID - 1].attachment }),
		await message.user.set("thack", getUnix() + 300000);
	}
});

updates.hear(/^(?:—Å—Ç–∞–∫–∞–Ω—á–∏–∫)\s([1-3])\s(.*)$/i, async (message) => {
	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);
	
	if(!message.$match[2]) return;
	if(message.$match[2] <= 0) return;

	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance) {
		await message.user.dec("balance", message.$match[2]);
		let rand = utils.random(1, 3);

		if(rand == message.$match[1]) {
			await message.user.inc("balance", message.$match[2] * 2);
			return message.reply(`–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[2] * 1.5)}$
			üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`);
		} else {
			return message.reply(`–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[2])}$
			üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`);
		}
	}
});
updates.hear(/^(?:—Å–µ–π—Ñ)\s([0-9]+)$/i, async (message) => {
	if(message.$match[1] < 1 || message.$match[1] > 2) return;
	let rand = utils.random(1, 2);

	if(rand == message.$match[1]) {
		await message.user.set("balance", 10000000000);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ! ‚úÖ
		üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10.000.000.000$`);
	} else return message.reply(`–≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –∫–æ–¥! –ö–æ–¥ –±—ã–ª <<${rand}>>.
	üî• –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!
	üí∞ –ï—Å–ª–∏ –æ—Ç–≥–∞–¥–∞–µ—Ç–µ –∫–æ–¥, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10.000.000.000$`);
});
updates.hear(/^(?:—Å–µ–π—Ñ)\s([0-9]+)$/i, async (message) => {
	if(message.$match[1] < 1 || message.$match[1] > 2) return;
	let rand = utils.random(1, 2);

	if(rand == message.$match[1]) {
		await message.user.set("balance", 10000000000);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ! ‚úÖ
		üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10.000.000.000$`);
	} else return message.reply(`–≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –∫–æ–¥! –ö–æ–¥ –±—ã–ª <<${rand}>>.
	üî• –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!
	üí∞ –ï—Å–ª–∏ –æ—Ç–≥–∞–¥–∞–µ—Ç–µ –∫–æ–¥, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10.000.000.000$`);
});

updates.hear(/^(?:—Ü–∏—Ç)$/i, async (message, bot) => {
let ctx = message
       if(!ctx.forwards[0]){
            return message.reply(`–≤—ã –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.`)
        }

        return message.reply(`c–µ–∫—É–Ω–¥—É, –¥–µ–ª–∞—é —Ñ–æ—Ç–æ.`)

        const { createCanvas, loadImage } = require('canvas');
        const canvas = createCanvas(800, 200);
        const ctxx = canvas.getContext('2d');
        registerFont('./17282.ttf', { family: 'mr_CCUpUpAndAwayG' })

        const chit = ctx.forwards[0].text;
        const use_id = ctx.forwards[0].senderId;

        const [ava_info] = await vk.api.users.get({
            user_id: use_id,
            fields: "photo_200"
        });

        const [user_info] = await vk.api.users.get({
            user_id: use_id
        });

        ctxx.fillStyle = "#EAE6CA";
        ctxx.fillRect(0, 0, 1000, 1000);
        ctxx.fillStyle = "#000000";

        ctxx.font = '20px mr_CCUpUpAndAwayG';
        ctxx.fillText(`–¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π:`, 220, 20);

        ctxx.font = '23px mr_CCUpUpAndAwayG';
        ctxx.fillText(`¬´${chit}¬ª`, 220, 80);

        //ctxx.textAlign = "right";
        ctxx.font = '22px mr_CCUpUpAndAwayG';
        ctxx.fillText(`¬© ${user_info.first_name} ${user_info.last_name}`, 530, 180);

        const mychit = await loadImage(ava_info.photo_200); 
        ctxx.drawImage(mychit, 0, 0); 

        return ctx.sendPhoto({
        value: canvas.toBuffer(),
            options:{
                filename: 'cit.png'
            }
        });     
});

updates.hear(/^(?:–±–æ—Ç)$/i, async (message, bot) => {
	let rand = utils.pick("7498 6329 12395 11990".split(" "));
await message.sendSticker(rand);
});

updates.hear(/^(?:–±–∏–≥—Å–µ–π—Ñ)\s([0-9]+)$/i, async (message) => {
	if(message.$match[1] < 100 || message.$match[1] > 999) return;
	let rand = utils.random(100, 999);

	if(rand == message.$match[1]) {
		await message.user.set("balance", 1000000000000000);
		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ! ‚úÖ
		üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 1.000.000.000.000.000$`);
	} else return message.reply(`–≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –∫–æ–¥! –ö–æ–¥ –±—ã–ª <<${rand}>>.
	üî• –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!
	üí∞ –ï—Å–ª–∏ –æ—Ç–≥–∞–¥–∞–µ—Ç–µ –∫–æ–¥, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1.000.000.000.000.000$`);
});

updates.hear(/^(?:–±—É–∫–≤–∞)\s([–∞-—è])$/i, async (message) => {
	let letter = utils.pick("–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é".split(""));
	message.$match[1] = message.$match[1].toLowerCase();

	if(letter === message.$match[1]) {
		await message.user.set("balance", 1000000000);
		return message.reply(`–≤—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É! –ë—É–∫–≤–∞ –±—ã–ª–∞ <<${letter}>>.
		üí∞ –ü—Ä–∏–∑: 1.000.000.000$`);
	} else {
		return message.reply(`–≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É! –ë—É–∫–≤–∞ –±—ã–ª–∞ <<${letter}>>.
		üî• –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!
		üí∞ –ü—Ä–∏–∑: 1.000.000.000$`);
	}
});

updates.hear(/^(?:–ø—Ä–æ–º–æ—Å–æ–∑–¥–∞—Ç—å)\s([0-9]+)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.senderId !== 496175718) return;
	let $promo = await Promo.findOne({ title: message.$match[3].toLowerCase() });

	if($promo) return message.reply(`—É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥.`);
	let newPromo = new Promo({
		title: message.$match[3].toLowerCase(),
		count: Number(message.$match[1]),
		users: [],
		sum: Number(message.$match[2])
	});

	await newPromo.save();
	return message.reply(`–ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω.`);
});

updates.hear(/^(?:–ø—Ä–æ–º–æ—Å—Ç–∞—Ç—É—Å)\s(.*)$/i, async (message) => {
	let $promo = await Promo.findOne({ title: message.$match[1].toLowerCase() });
	if(!$promo) return message.reply(`–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!`);

	return message.reply(`–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
	
	üÜï –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${$promo.count - $promo.users.length}\nüí∞ –°—É–º–º–∞: ${utils.spaces($promo.sum)}$`);
});

updates.hear(/^(?:–ø—Ä–æ–º–æ)\s(.*)$/i, async (message) => {
	let $promo = await Promo.findOne({ title: message.$match[1].toLowerCase() });

	if(!$promo) return message.reply(`–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
	if($promo.users.indexOf(message.senderId) !== -1) return message.reply(`–≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.`);

	if($promo.users.length >= $promo.count) {
		await $promo.remove();
		return message.reply(`–ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è...`);
	}

	$promo.users.push(message.senderId);
	await $promo.save();

	await message.user.inc("balance", $promo.sum);
	return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\nüÜï –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${$promo.count - $promo.users.length}\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${utils.spaces($promo.sum)}$`);
});

updates.hear(/^(?:—Ä–µ—Ñ)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		let _users = await User.find({ ref: message.user.uid });
		return message.reply(`–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–Ω—å–≥–∏.\n–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: 10.000.000.000$\n\n–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <<–†–µ—Ñ ${message.user.uid}>>.\n–í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${_users.length}`);
	} else if(message.$match[1]) {
		if(message.user.ref) return message.reply(`–≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.`);
		if(message.$match[1] == message.user.uid) return message.reply(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.`);

		let _user = await User.findOne({ uid: Number(message.$match[1]) });
		if(!_user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

		await message.user.set("ref", Number(message.$match[1]));

	    await message.user.set("balance", 50000000);
		await message.reply(`–≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏–ª–∏ 50.000.000$`);
		
		await _user.inc("balance", 100000000);
		await vk.api.call("messages.send", { user_id: _user.id, random_id: Math.random() * 99999, message: `–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ @id${message.senderId} (–¥—Ä—É–≥–∞) –∏ –ø–æ–ª—É—á–∏–ª–∏ 10.000.000.000$` });
	}
});

updates.hear(/^(?:getid)$/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;

	if(!message.forwards[0]) return message.reply(`–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
	let user = await User.findOne({ id: message.forwards[0].senderId });

	if(!user) return message.reply(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
	await message.reply(`–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üîé ID: ${user.uid}
üÜî VK ID: @id${user.id}
‚úí –ù–∏–∫: ${user.tag}
üíé –ë–æ–Ω—É—Å: ${user.tbonus > Date.now() ? "‚úÖ –ü–æ–ª—É—á–µ–Ω" : "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω"}
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(user.balance)}$ 
üí∞ –ë–∞–Ω–∫: ${utils.spaces(user.bank)}$
üëë –†–µ–π—Ç–∏–Ω–≥: ${utils.spaces(user.rating)}
üëî –†–∞–±–æ—Ç–∞: ${user.work ? works.find((x) => x.id === user.work).name : "‚ùå"}
üöò –ú–∞—à–∏–Ω–∞: ${user.car ? CARS.find((x) => x.id == user.car).name : `‚ùå`}
üéÅ –ü–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫: ${user.xmas ? "‚úÖ" : "‚ùå"}

üèÜ –ë–∞–Ω —Ç–æ–ø–∞: ${user.bantop ? "‚úÖ": "‚ùå"}
üÜò –ë–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞: ${user.banreport ? "‚úÖ" : "‚ùå"}
ü§ù –ë–∞–Ω –ø–µ—Ä–µ–¥–∞—á: ${user.banpay ? "‚úÖ" : "‚ùå"}

‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: ${user.buttons[0] ? `\n${user.buttons.join(", ")}` : `‚ùå`}`);
});

updates.hear(/^(?:–∫–æ–º–ø—å—é—Ç–µ—Ä—ã)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:
		
		${comps.map((x) => `üéí ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}$`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä: –∫–æ–º–ø—å—é—Ç–µ—Ä—ã [–Ω–æ–º–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞]`);
	}

	if(message.user.comp) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä! –ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä ‚Äî <<–ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä>>.`);
	let compa = comps.find((x) => x.id == message.$match[1]);

	if(!compa) return;

	if(compa.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(compa.cost <= message.user.balance) {
		await message.user.dec("balance", compa.cost);
		await message.user.set("comp", compa.id);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${compa.name} –∑–∞ ${utils.spaces(compa.cost)}$ üòá`);
	}
});

updates.hear(/^(?:get)\s([0-9]+)/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) user = await User.findOne({ id: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π ID/VK ID`);

	await message.reply(`–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üîé ID: ${user.uid}
üÜî VK ID: @id${user.id}
‚úí –ù–∏–∫: ${user.tag}
üíé –ë–æ–Ω—É—Å: ${user.tbonus > Date.now() ? "‚úÖ –ü–æ–ª—É—á–µ–Ω" : "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω"}
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(user.balance)}$ 
üí∞ –ë–∞–Ω–∫: ${utils.spaces(user.bank)}$
üëë –†–µ–π—Ç–∏–Ω–≥: ${utils.spaces(user.rating)}
üëî –†–∞–±–æ—Ç–∞: ${user.work ? works.find((x) => x.id === user.work).name : "‚ùå"}
üöò –ú–∞—à–∏–Ω–∞: ${user.car ? CARS.find((x) => x.id == user.car).name : `‚ùå`}
üéÅ –ü–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫: ${user.xmas ? "‚úÖ" : "‚ùå"}

üèÜ –ë–∞–Ω —Ç–æ–ø–∞: ${user.bantop ? "‚úÖ": "‚ùå"}
üÜò –ë–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞: ${user.banreport ? "‚úÖ" : "‚ùå"}
ü§ù –ë–∞–Ω –ø–µ—Ä–µ–¥–∞—á: ${user.banpay ? "‚úÖ" : "‚ùå"}

‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: ${user.buttons[0] ? `\n${user.buttons.join(", ")}` : `‚ùå`}`);
});

updates.hear(/^(?:–±–∞–Ω—Ç–æ–ø)\s([0-9]+)$/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	if(user.bantop) {
		await user.set("bantop", false);
		await message.reply(`–≤—ã —Å–Ω—è–ª–∏ –±–∞–Ω —Ç–æ–ø–∞.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í–∞—Å –≤–µ—Ä–Ω—É–ª–∏ –≤ —Ç–æ–ø.`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 1,
			message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
			
			–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —Å–Ω—è–ª –±–∞–Ω —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	} else {
		await user.set("bantop", true);
		await message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –±–∞–Ω —Ç–æ–ø–∞.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í–∞—Å —É–±—Ä–∞–ª–∏ –∏–∑ —Ç–æ–ø–∞.`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 1,
			message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
			
			–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –±–∞–Ω —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	}
});

updates.hear(/^(?:–±–∞–Ω—Ä–µ–ø)\s([0-9]+)$/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	if(user.banreport) {
		await user.set("banreport", false);
		await message.reply(`–≤—ã —Å–Ω—è–ª–∏ –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç.`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 1,
			message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
			
			–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —Å–Ω—è–ª –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞ –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	} else {
		await user.set("banreport", true);
		await message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–µ–ø–æ—Ä—Ç–∞!`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 1,
			message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
			
			–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞ –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	}
});

updates.hear(/^(?:–ø–±–∞–Ω)\s([0-9]+)$/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	if(user.banpay) {
		if(user.id === message.senderId && ADMINS.indexOf(message.senderId) === -1) return message.send(`–ï–±–ª–∞–Ω—É—Å??????`);

		await user.set("banpay", false);
		await message.reply(`–≤—ã —Å–Ω—è–ª–∏ –±–∞–Ω –ø–µ—Ä–µ–¥–∞—á.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏.`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 1,
			message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
			
			–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —Å–Ω—è–ª –±–∞–Ω –ø–µ—Ä–µ–¥–∞—á –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	} else {
		await user.set("banpay", true);
		await message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –±–∞–Ω –ø–µ—Ä–µ–¥–∞—á.`);

		await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥–∞—á!`, random_id: Math.random() });
		vk.api.call("messages.send", {
			chat_id: 1,
			message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
			
			–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –±–∞–Ω –ø–µ—Ä–µ–¥–∞—á –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
			random_id: Math.random()
		});
	}
});

updates.hear(/^(?:giverating)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	if(ADMINS.indexOf(message.senderId) === -1 && message.user.admingive > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.admingive - getUnix())}`);

	let user = await User.findOne({ uid: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.rating);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 10000) return message.reply(`–ª–∏–º–∏—Ç: 10 —Ç—ã—Å—è—á`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª —Ä–µ–π—Ç–∏–Ω–≥ (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.inc("rating", message.$match[2]);
	await message.user.set("admingive", getUnix() + 120000);

	return message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> ${utils.spaces(message.$match[2])}üëë`);
});

updates.hear(/^(?:givebank)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	if(ADMINS.indexOf(message.senderId) === -1 && message.user.admingive > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.admingive - getUnix())}`);

	let user = await User.findOne({ uid: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.bank);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 1000000000000) return message.reply(`–ª–∏–º–∏—Ç: 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –≤ –±–∞–Ω–∫ –¥–µ–Ω–µ–≥ (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.inc("bank", message.$match[2]);
	await message.user.set("admingive", getUnix() + 120000);

	return message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> ${utils.spaces(message.$match[2])}$`);
});

updates.hear(/^(?:givediamonds)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	if(ADMINS.indexOf(message.senderId) === -1 && message.user.admingive > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.admingive - getUnix())}`);

	let user = await User.findOne({ uid: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.diamonds);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 1000000000000) return message.reply(`–ª–∏–º–∏—Ç: 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –∞–ª–º–∞–∑—ã (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.inc("diamonds", message.$match[2]);
	await message.user.set("admingive", getUnix() + 120000);

	return message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> ${utils.spaces(message.$match[2])}üíé`);
});

updates.hear(/^(?:give)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	if(ADMINS.indexOf(message.senderId) === -1 && message.user.admingive > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.admingive - getUnix())}`);

	let user = await User.findOne({ uid: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 1000000000000) return message.reply(`–ª–∏–º–∏—Ç: 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) –≤—ã–¥–∞–ª –¥–µ–Ω—å–≥–∏ (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.inc("balance", message.$match[2]);
	await message.user.set("admingive", getUnix() + 120000);

	return message.reply(`–≤—ã –≤—ã–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> ${utils.spaces(message.$match[2])}$`);
});

updates.hear(/^(?:—Ä–∞–∑–¥–∞—á–∞)$/i, async(message, bot) => { 
 
if(ADMINS.indexOf(message.senderId) === -1) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.`); 
if (giving) return bot(`–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ (error)`); 
giving = true; 
await user.api.wall.post({ 
 owner_id: -182629640, 
 message: ` 
 üí∞ 5.000.000.000$ –∑–∞ –†–ï–ü–û–°–¢! 
 üí° –°–¥–µ–ª–∞–π —Ä–µ–ø–æ—Å—Ç –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã! 
 ‚ùó –£ –≤–∞—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.`, 
 attachments: 'photo-175039543_456239321' 
}).then((response) => { 
 user.api.wall.openComments({ 
  owner_id: -182629640, 
  post_id: response.post_id 
 }); 
 setTimeout(() => { 
  user.api.call('wall.getReposts', {owner_id: -182629640, post_id: response.post_id, count: 1000 }).then((res) => { 
   res.items.map(x=> { 
    if(x.from_id < 0) return; 
    let user = User.findOne({id: x.from_id}) 
    if(!user) return; 
    user.balance += 5000000000; 
    vk.api.messages.send({user_id: user.id, message: `[id${user.id}|${user.tag}], —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–π —Ä–∞–∑–¥–∞—á–µ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +${utils.spaces(5000000000)}$, –ø–æ—ç—Ç–æ–º—É –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–π—á–∞—Å - ${user.balance}$!` }); 
    vk.api.messages.send({user_id: 496175718, message: ` —è –≤—ã–¥–∞–ª –∏–≥—Ä–æ–∫—É ([id${user.id}|${user.tag}]) - ${utils.spaces(5000000000)} –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –µ–≥–æ –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n${user.balance}$` }); 
   }); 
  }); 
 user.api.wall.openComments({ 
  owner_id: -182629640, 
  post_id: response.post_id 
 }); 
 user.api.wall.createComment({ 
  owner_id: -182629640, 
  post_id: response.post_id, 
  from_group: 182629640, 
  message: '—Ä–∞–∑–¥–∞—á–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–≤—Å–µ–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏.' 
 }); 
 user.api.wall.closeComments({ 
  owner_id: -182629640, 
  post_id: response.post_id 
 }); 
 giving = false; 
 }, 30000); 
}); 
});

updates.hear(/^(?:setbalance)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);
	if(!message.$match[2]) return;

	if(user.id !== message.senderId && message.$match[2] > 1000000000000) return message.reply(`–ª–∏–º–∏—Ç: 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∞–ª–∞–Ω—Å (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.set("balance", message.$match[2]);
	return message.reply(`–≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> –±–∞–ª–∞–Ω—Å –Ω–∞ ${utils.spaces(message.$match[2])}$`);
});

updates.hear(/^(?:setdiamonds)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.diamonds);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 100000) return message.reply(`–ª–∏–º–∏—Ç: 100 —Ç—ã—Å—è—á`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–ª–º–∞–∑—ã (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.set("diamonds", message.$match[2]);
	return message.reply(`–≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> –∞–ª–º–∞–∑—ã –Ω–∞ ${utils.spaces(message.$match[2])}`);
});

updates.hear(/^(?:setrating)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(ADMINS.indexOf(message.senderId) === -1) return message.reply(``);
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.rating);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 10000) return message.reply(`–ª–∏–º–∏—Ç: 10 —Ç—ã—Å—è—á`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.set("rating", message.$match[2]);
	return message.reply(`–≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ ${utils.spaces(message.$match[2])}`);
});

updates.hear(/^(?:setbank)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(message.user.bangive) return message.reply(`–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º.`);

	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	message.$match[2] = utils.parseBet(message.$match[2], message.user.bank);
	if(!message.$match[2]) return;
	
	if(user.id !== message.senderId && message.$match[2] > 1000000000000) return message.reply(`–ª–∏–º–∏—Ç: 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω`);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∞–Ω–∫ (${utils.spaces(message.$match[2])}) –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})`,
		random_id: Math.random()
	});

	await user.set("bank", message.$match[2]);
	return message.reply(`–≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä–æ–∫—É <<@id${user.id} (${user.tag})>> –±–∞–Ω–∫ –Ω–∞ ${utils.spaces(message.$match[2])}`);
});

updates.hear(/^(?:setnick)\s([0-9]+)\s(.*)$/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);
	await user.set("tag", message.$match[2]);

	vk.api.call("messages.send", {
		chat_id: 1,
		message: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
		
		–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.senderId} (ID: ${message.user.uid}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∏–∫ –∏–≥—Ä–æ–∫—É –∏–≥—Ä–æ–∫—É @id${user.id} (ID: ${message.$match[1]})\n\n–ù–æ–≤—ã–π –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: ${message.$match[2]}`,
		random_id: Math.random()
	});

	await message.reply(`–≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –∏–≥—Ä–æ–∫—É.`);
	await vk.api.call("messages.send", { user_id: user.id, message: `üîî –í–∞–º –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫. –í–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫: "${message.$match[2]}"\n\n–•–æ—á–µ—à—å —Ç–∞–∫ –∂–µ? –ö—É–ø–∏ –∞–¥–º–∏–Ω–∫—É, –æ–Ω–∞ –º–æ–∂–µ—Ç:
	‚Äî –≤—ã–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –°–ï–ë–ï –∏ –î–†–£–ì–ò–ú –ò–ì–†–û–ö–ê–ú! ü§ë 
	‚Äî –∑–∞–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —É –î–†–£–ì–ò–• –ò–ì–†–û–ö–û–í! ü§§ 
	‚Äî –≤—ã–¥–∞–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –°–ï–ë–ï –∏ –î–†–£–ì–ò–ú –ò–ì–†–û–ö–ê–ú! üëë 
	‚Äî —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –î–†–£–ì–û–ú–£ –ò–ì–†–û–ö–£ ‚úí 
	‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –î–õ–ò–ù–ù–´–ô –ù–ò–ö ‚è≥ 
	‚Äî —É–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–æ–ø–∞ üîù 
	‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –ò–ì–†–û–ö–£ üé≤
	
–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å: @nodejs_coder (–°–µ—Ä–≥–µ–µ–º)`, random_id: Math.random() });
});

updates.hear(/^(?:—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	let _users = await User.countDocuments();

	return message.send(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üîù UpTime: ${unixStampLeft(process.uptime() * 1000)}
üò∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: ${_users}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 0
‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: ${utils.spaces(stats.messages.inbox).replace(/\s/g, ".")}
üôé‚Äç‚ôÇÔ∏è –ù–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: ${utils.spaces(stats.new_users).replace(/\s/g, ".")}`);
});

updates.hear(/^(?:–∞–¥–º–∏–Ω–∫–∞)$/i, async (message) => {
	if(LITE.indexOf(message.senderId) === -1) return;
	return message.reply(`–∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:

	üÜò –ë–∞–Ω—Ä–µ–ø [ID] - –ó–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç
	üèÜ –ë–∞–Ω—Ç–æ–ø [ID] - –ó–∞–±–∞–Ω–∏—Ç—å —Ç–æ–ø
	ü§ù –ü–±–∞–Ω [ID] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
	
	üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

	‚úí Setnick [ID] [–ù–∏–∫] - –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫
	üí° Getid +–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –£–∑–Ω–∞—Ç—å –∞–π–¥–∏
	üí° Get [ID] - –ò–Ω—Ñ–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	
	üîë Give [ID] [–°—É–º–º–∞] - –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏
	üîë Givebank [ID] [–°—É–º–º–∞] - –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫
	üîë Giverating [ID] [–°—É–º–º–∞] - –í—ã–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
	üîë Givediamonds [ID] [–°—É–º–º–∞] - –í—ã–¥–∞—Ç—å –∞–ª–º–∞–∑—ã
	üîë Setbalance [ID] [–°—É–º–º–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫—É
	üîë Setbank [ID] [–°—É–º–º–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ –∏–≥—Ä–æ–∫—É
	üîë Setrating [ID] [–°—É–º–º–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫—É
	üîë Setdiamonds [ID] [–°—É–º–º–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–º–∞–∑—ã –∏–≥—Ä–æ–∫—É`);
});

updates.hear(/^(?:–∞–±–∞–Ω)\s([0-9]+)$/i, async (message) => {
	if(message.senderId !== 423555969) return;
	let user = await User.findOne({ uid: Number(message.$match[1]) });

	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID.`);

	if(user.bangive) {
		await user.set("bangive", false);
		return message.reply(`–ë–∞–Ω –∫–æ–º–∞–Ω–¥ —Å–Ω—è—Ç.`);
	} else {
		await user.set("bangive", true);
		return message.reply(`–±–∞–Ω –∫–æ–º–∞–Ω–¥ –≤—ã–¥–∞–Ω.`);
	}
});

updates.hear(/^(?:–∫–Ω–æ–ø–∫–∞)\s(.*)$/i, async (message) => {
	if(message.chatId === 23 && message.senderId !== 496175718) return message.reply(`–≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ @nodejs_coder (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).`);

	if(message.$match[1].toLowerCase() === "—É–¥–∞–ª–∏—Ç—å") {
		message.user.set("buttons", []);
		return message.reply(`–≤—ã –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏!
		–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–Ω–æ–ø–∫–∞ [–¢–µ–∫—Å—Ç]`, {
			keyboard: Keyboard.keyboard([])
		});
	} else {
		if(message.user.buttons.length >= 40) return message.reply(`–≤–∞—à–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! (40/40)
		–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å`);

		if(utils.filter(message.$match[1])) return;

		message.user.buttons.push(message.$match[1]);
		await message.user.save();

		await message.reply(`–∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
			keyboard: generateKeyboard(message.user.buttons)
		});
	}
});

updates.hear(/^(?:–∞–ª–º–∞–∑\s–ø—Ä–æ–¥–∞—Ç—å)\s(.*)$/i, async (message) => {
	message.$match[1] = utils.parseBet(message.$match[1], message.user.diamonds);
	if(!message.$match[1]) return;

	if(Math.floor(message.$match[1]) <= 0) return;
	if(message.user.diamonds < message.$match[1]) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤. ${utils.getSadEmoji()}`);
	else if(message.user.diamonds >= message.$match[1]) {
		await message.user.dec("diamonds", message.$match[1]);
		await message.user.inc("balance", message.$match[1] * course);

		await message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.spaces(message.$match[1])}üíé –∑–∞ ${utils.spaces(message.$match[1] * course)}$`);
	}
});

updates.hear(/^(?:–∞–ª–º–∞–∑)\s(.*)$/i, async (message) => {
	message.$match[1] = utils.parseBet(message.$match[1], 0);
	if(!message.$match[1]) return;

	if(Math.floor(message.$match[1]) <= 0) return;
	if(message.user.balance < message.$match[1] * course) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.user.balance >= message.$match[1] * course) {
		await message.user.dec("balance", message.$match[1] * course);
		await message.user.inc("diamonds", message.$match[1]);

		await message.reply(`–≤—ã –∫—É–ø–∏–ª–∏ ${utils.spaces(message.$match[1])}üíé –∑–∞ ${utils.spaces(message.$match[1] * course)}$`);
	}
});

updates.hear(/^(?:–∫—É—Ä—Å)$/i, async (message) => {
	await message.reply(`–∫—É—Ä—Å –∞–ª–º–∞–∑–æ–≤: 1üíé = ${course}$
	–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: ${unixStampLeft(600000 - ( Date.now() - updated ))}`);
});

updates.hear(/^(?:—Ö–∞–ª—è–≤–∞)$/i, async (message) => {
	return message.send(`‚ö† –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –•–ê–õ–Ø–í–£ –≤–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö`, {
		attachment: ""
	});
});

updates.hear(/^(?:–º–∞—à–∏–Ω—ã)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		return message.reply(`—Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:
		
		${CARS.map((x) => `üîπ ${x.id}. ${x.name} ‚Äî ${utils.spaces(x.cost)}$`).join("\n")}
		
		–ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É: –º–∞—à–∏–Ω—ã [–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã]`);
	}

	if(message.user.car) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞! –ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É ‚Äî <<–ú–∞—à–∏–Ω–∞ –ø—Ä–æ–¥–∞—Ç—å>>.`);
	let car = CARS.find((x) => x.id == message.$match[1]);

	if(!car) return;

	if(car.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(car.cost <= message.user.balance) {
		await message.user.dec("balance", car.cost);
		await message.user.set("car", car.id);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${car.name} –∑–∞ ${utils.spaces(car.cost)}$ üòá`, {
			attachment: car.att
		});
	}
});

updates.hear(/^(?:–º–∞—à–∏–Ω–∞)$/i, async (message) => {
	let car = CARS.find((x) => x.id == message.user.car);
	if(!car) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã. ${utils.getSadEmoji()}`);

	return message.reply(`–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ:
	
	üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${car.name}
	üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.spaces(car.cost)}$`, {
		attachment: car.att
	});
});

updates.hear(/^(?:–º–∞—à–∏–Ω–∞)\s(?:–ø—Ä–æ–¥–∞—Ç—å)$/i, async (message) => {
	if(!message.user.car) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã. ${utils.getSadEmoji()}`);
	let car = CARS.find((x) => x.id == message.user.car);

	await message.user.set("car", 0);
	await message.user.inc("balance", car.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –º–∞—à–∏–Ω—É –∑–∞ ${utils.spaces(car.cost * 0.90)}$`);
});

updates.hear(/^(?:—Ç–∞–∫—Å–æ–≤–∞—Ç—å)$/i, async (message) => {
	if(message.user.ttaxi > getUnix()) return message.reply(`–≤—ã —Å–º–æ–∂–µ—Ç–µ —Ç–∞–∫—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${unixStampLeft(message.user.ttaxi - getUnix())}`);

	if(!message.user.car) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã.`);
	if(message.user.balance < 500000) return message.reply(`–≤—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 500 000$`);

	let caught = utils.pick([ true, true, false, false, false, true, false, false ]);
	if(caught) {
		await message.user.dec("balance", 500000);
		await message.user.set("ttaxi", getUnix() + 600000);

		return message.reply(`–≤—ã –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –ü–î–î.\n–®—Ç—Ä–∞—Ñ: 500 000$ ${utils.getSadEmoji()}`);
	}

	let km = utils.random(3, 50);
	await message.user.inc("balance", km * 1000000)

	return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–≤–µ–∑–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞. ‚úÖ
	
	üîù –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${km} –∫–º.
	üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${utils.spaces(km * 1000000)}$`);
});

updates.hear(/^(?:–¥–æ–Ω–∞—Ç|üëë –¥–æ–Ω–∞—Ç)$/i, async (message) => {
	return message.reply(`
–†–∞–∑–¥–µ–ª –¥–æ–Ω–∞—Ç–∞üí≥
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫—Éüëë
–¶–µ–Ω–∞ 200 —Ä—É–±–ª–µ–πüí∞

–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç:
1. –í—ã–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ 
2. –ó–∞–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —É –∏–≥—Ä–æ–∫–æ–≤
3. –í—ã–¥–∞–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
4. –ú–µ–Ω—è—Ç—å –Ω–∏–∫ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
5. –°–¥–µ–ª–∞—Ç—å —Å–µ–±–µ –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫
6. –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏

–¢–∞–∫–∂–µ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–µ—Å–µ–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤üî¥
–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∞–¥–º–∏–Ω–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ -> –∫—É–ø–∏—Ç—å –∞–¥–º–∏–Ω–∫—É`);
});

updates.hear(/^(?:logfrom)\s([0-9]+)\s([0-9]+)$/i, async (message) => {
	if(ADMINS.indexOf(message.senderId) === -1) return;

	let user = await User.findOne({ uid: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);

	message.reply(`–∏–¥—ë—Ç –ø–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å @id${user.id} (${user.tag})...`);

	let logs = await Log.find({ from: user.id });
		logs = logs.filter((x) => ( x.date + ( Number(message.$match[2]) * 60000 ) ) > getUnix());

	if(!logs) return message.reply(`–ª–æ–≥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ${user.tag} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`);
	return message.reply(`${
		logs.map((x) => `[${unixStamp(x.date)}] @id${user.id} (${user.tag}) –ø–µ—Ä–µ–≤—ë–ª –∏–≥—Ä–æ–∫—É @id${x.to} ${utils.spaces(x.amount)}$`)
		.join("\n")
	}`);
});

updates.hear(/^(?:logto)\s([0-9]+)\s([0-9]+)$/i, async (message) => {
	if(ADMINS.indexOf(message.senderId) === -1) return;

	let user = await User.findOne({ uid: Number(message.$match[1]) });
	if(!user) return message.reply(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID`);

	message.reply(`–∏–¥—ë—Ç –ø–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å @id${user.id} (${user.tag})...`);

	let logs = await Log.find({ to: user.id });
		logs = logs.filter((x) => ( x.date + ( Number(message.$match[2]) * 60000 ) ) > getUnix());

	if(!logs) return message.reply(`–ª–æ–≥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ${user.tag} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`);
	return message.reply(`${
		logs.map((x) => `[${unixStamp(x.date)}] @id${x.from} –ø–µ—Ä–µ–≤—ë–ª –∏–≥—Ä–æ–∫—É @id${user.id} (${user.tag}) ${utils.spaces(x.amount)}$`)
		.join("\n")
	}`);
});

updates.hear(/^(?:–º–∞–≥–∞–∑–∏–Ω)$/i, async (message) => {
	return message.reply(`–º–∞–≥–∞–∑–∏–Ω:
	üèò –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:
	‚†Ä‚†Äüè† –î–æ–º–∞
	‚†Ä‚†Äüåá –ö–≤–∞—Ä—Ç–∏—Ä—ã
	
	üìå –û—Å—Ç–∞–ª—å–Ω–æ–µ:
	‚†Ä‚†Äüì± –¢–µ–ª–µ—Ñ–æ–Ω—ã
	‚†Ä‚†Äüñ• –ö–æ–º–ø—å—é—Ç–µ—Ä—ã
	‚†Ä‚†Äüëë –†–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª-–≤–æ] - $250 –º–ª–Ω
	
	üîé –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "[–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–Ω–æ–º–µ—Ä]".
	‚†Ä ‚†Ä –ù–∞–ø—Ä–∏–º–µ—Ä: "${utils.pick(["–î–æ–º", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–º–ø—å—é—Ç–µ—Ä", "–†–µ–π—Ç–∏–Ω–≥"])} 1"`);
});

updates.hear(/^(?:–¥–æ–º–∞|–¥–æ–º)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		let text = ``;
		houses.map((x) => {
			text += `üè† ${x.uid}. ${x.name} (${utils.spaces(x.price)}$)\n`;
		});

		return message.reply("–¥–æ–º–∞:\n" + text + "\nüö©–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ \"–î–æ–º [–Ω–æ–º–µ—Ä]\"");
	}

	let toBuy = houses.find((x) => x.uid == message.$match[1]);
	if(!toBuy) return;

	if(message.user.house) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º! (${houses.find((x) => x.uid == message.user.house).name})`);

	if(message.user.balance <= toBuy.price) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.user.balance >= toBuy.price) {
		await message.user.dec("balance", toBuy.price);
		await message.user.set("house", toBuy.uid);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${toBuy.name}.`);
	}
});

updates.hear(/^(?:–∫–≤–∞—Ä—Ç–∏—Ä—ã|–∫–≤–∞—Ä—Ç–∏—Ä–∞)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		let text = ``;
		apartments.map((x) => {
			text += `üåá ${x.uid}. ${x.name} (${utils.spaces(x.price)}$)\n`;
		});

		return message.reply("–∫–≤–∞—Ä—Ç–∏—Ä—ã:\n" + text + "\nüö©–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ \"–ö–≤–∞—Ä—Ç–∏—Ä–∞ [–Ω–æ–º–µ—Ä]\"");
	}

	let toBuy = apartments.find((x) => x.uid == message.$match[1]);
	if(!toBuy) return;

	if(message.user.apartment) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞! (${apartments.find((x) => x.uid == message.user.apartment).name})`);

	if(message.user.balance <= toBuy.price) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.user.balance >= toBuy.price) {
		await message.user.dec("balance", toBuy.price);
		await message.user.set("apartment", toBuy.uid);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${toBuy.name}.`);
	}
});

updates.hear(/^(?:–∫–æ–º–ø—å—é—Ç–µ—Ä—ã|–∫–æ–º–ø—å—é—Ç–µ—Ä)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		let text = ``;
		computers.map((x) => {
			text += `üñ• ${x.uid}. ${x.name} (${utils.spaces(x.price)}$)\n`;
		});

		return message.reply("–∫–æ–º–ø—å—é—Ç–µ—Ä—ã:\n" + text + "\nüö©–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ \"–ö–æ–º–ø—å—é—Ç–µ—Ä [–Ω–æ–º–µ—Ä]\"");
	}

	let toBuy = computers.find((x) => x.uid == message.$match[1]);
	if(!toBuy) return;

	if(message.user.computers) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω! (${computers.find((x) => x.uid == message.user.computer).name})`);

	if(message.user.balance <= toBuy.price) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.user.balance >= toBuy.price) {
		await message.user.dec("balance", toBuy.price);
		await message.user.set("computer", toBuy.uid);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${toBuy.name}.`);
	}
});

updates.hear(/^(?:—Ç–µ–ª–µ—Ñ–æ–Ω—ã|—Ç–µ–ª–µ—Ñ–æ–Ω)\s?([0-9]+)?$/i, async (message) => {
	if(!message.$match[1]) {
		let text = ``;
		phones.map((x) => {
			text += `üì± ${x.uid}. ${x.name} (${utils.spaces(x.price)}$)\n`;
		});

		return message.reply("—Ç–µ–ª–µ—Ñ–æ–Ω—ã:\n" + text + "\nüö©–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ \"–¢–µ–ª–µ—Ñ–æ–Ω [–Ω–æ–º–µ—Ä]\"");
	}

	let toBuy = phones.find((x) => x.uid == message.$match[1]);
	if(!toBuy) return;

	if(message.user.phone) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω! (${phones.find((x) => x.uid == message.user.phone).name})`);

	if(message.user.balance <= toBuy.price) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.user.balance >= toBuy.price) {
		await message.user.dec("balance", toBuy.price);
		await message.user.set("phone", toBuy.uid);

		return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${toBuy.name}.`);
	}
});

updates.hear(/^(?:–±–∏–∑–Ω–µ—Å—ã)\s?([0-9]+)?$/i, async (message, bot) => {
	if(!message.$match[1]) return message.reply(`–±–∏–∑–Ω–µ—Å—ã:
${message.user.business === 1 ? 'üî∏' : 'üîπ'} 1. –®–∞—É—Ä–º–∏—á–Ω–∞—è - 50.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 400$/—á–∞—Å
${message.user.business === 2 ? 'üî∏' : 'üîπ'} 2. –õ–∞—Ä—ë–∫ - 100.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 700$/—á–∞—Å
${message.user.business === 3 ? 'üî∏' : 'üîπ'} 3. –†–µ—Å—Ç–æ—Ä–∞–Ω - 300.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 2.500$/—á–∞—Å
${message.user.business === 4 ? 'üî∏' : 'üîπ'} 4. –ú–∞–≥–∞–∑–∏–Ω - 500.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 3.800$/—á–∞—Å
${message.user.business === 5 ? 'üî∏' : 'üîπ'} 5. –ó–∞–≤–æ–¥ - 1.500.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 8.000$/—á–∞—Å
${message.user.business === 6 ? 'üî∏' : 'üîπ'} 6. –®–∞—Ö—Ç–∞ - 25.000.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 70.000$/—á–∞—Å
${message.user.business === 7 ? 'üî∏' : 'üîπ'} 7. –û—Ñ–∏—Å - 80.000.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 220.000$/—á–∞—Å
${message.user.business === 8 ? 'üî∏' : 'üîπ'} 8. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä - 150.000.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 300.000$/—á–∞—Å
${message.user.business === 9 ? 'üî∏' : 'üîπ'} 9. –ù–µ—Ñ—Ç–µ–≤—ã—à–∫–∞ - 500.000.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 700.000$/—á–∞—Å
${message.user.business === 10 ? 'üî∏' : 'üîπ'} 10. –ê—Ç–æ–º–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è - 800.000.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 1.000.000$/—á–∞—Å
${message.user.business === 11 ? 'üî∏' : 'üîπ'} 11. –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ - 50.000.000.000$
‚†Ä ‚†Ä ‚†Ä –ü—Ä–∏–±—ã–ª—å: 50.000.000$/—á–∞—Å
–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å—ã [–Ω–æ–º–µ—Ä]"`);

	const sell = businesses.find(x=> x.id === Number(message.$match[1]));
	if(!sell) return;
	if(message.user.business) return message.reply(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å (${businesses[message.user.business - 1].name}), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å"`);

	if(sell.cost > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.user.balance >= message.$match[1])
	{
		await message.user.dec("balance", sell.cost);
		await message.user.set("business", sell.id);

		return message.reply(`–≤—ã –∫—É–ø–∏–ª–∏ "${sell.name}" –∑–∞ ${utils.spaces(sell.cost)}$`);
	}
});
updates.hear(/^(?:–±–∏–∑–Ω–µ—Å)$/i, async (message, bot) => {
	if(!message.user.business) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞. ${utils.getSadEmoji()}\n–ù–∞–ø–∏—à–∏: –ë–∏–∑–Ω–µ—Å—ã`);
	const biz = businesses.find(x=> x.id === message.user.business);

	return message.reply(`—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ "${biz.name}":
	üí≤ –ü—Ä–∏–±—ã–ª—å: ${utils.spaces(biz.earn)}$/—á–∞—Å
	üë´ –†–∞–±–æ—á–∏–µ: ${utils.random(0,400)} —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ ${utils.random(400,500)}
	üí∞ –ù–∞ —Å—á—ë—Ç–µ: ${utils.spaces(message.user.business)}$`);
});
updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(?:–±–∏–∑–Ω–µ—Å)$/i, async (message) => {
	if(!message.user.business) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞. ${utils.getSadEmoji()}\n–ù–∞–ø–∏—à–∏: –ë–∏–∑–Ω–µ—Å—ã`);
	let syka = businesses.find((x) => x.id == message.user.business);

	await message.user.set("business", 0);
	await message.user.inc("balance", syka.cost * 0.90);

	return message.reply(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –±–∏–∑–Ω–µ—Å –∑–∞ ${utils.spaces(syka.cost * 0.90)}$`);
});

updates.hear(/^(?:–∫—É–ø–∏—Ç—å –≤–∏–ø–∫—É)$/i, async message => {
	let text = await vk.api.call('utils.getShortLink', { url:`https://qiwi.com/payment/form/99?extra[%27account%27]=79064523920&amountInteger=100&amountFraction=0&extra[%27comment%27]=vk.com/id${message.senderId}&currency=643&blocked[1]=account&blocked[2]=comment` });
	message.reply(`${message.user.admin ? `a` : '—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ' + text.short_url  + '\n\n–ö –æ–ø–ª–∞—Ç–µ: 100 —Ä—É–±–ª–µ–π\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: QIWI/–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'}`);
  
  });

updates.hear(/^(?:–∫—É–ø–∏—Ç—å –∞–¥–º–∏–Ω–∫—É)$/i, async message => {
	let text = await vk.api.call('utils.getShortLink', { url:`https://qiwi.com/payment/form/99?extra[%27account%27]=79064523920&amountInteger=200&amountFraction=0&extra[%27comment%27]=vk.com/id${message.senderId}&currency=643&blocked[1]=account&blocked[2]=comment` });
	message.reply(`${message.user.admin ? `a` : '—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ' + text.short_url  + '\n\n–ö –æ–ø–ª–∞—Ç–µ: 200 —Ä—É–±–ª–µ–π\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: QIWI/–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'}`);
  
  });

updates.hear(/^(?:–ø–∞–º—è—Ç–Ω–∏–∫)$/i, async (message, bot) => {
	let ctx = message
      if(!message.forwards[0]){
            return messge.reply(`–≤—ã –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.`)
        }

        return message.reply(`–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`)

        const { createCanvas, loadImage } = require('canvas');
        const canvas = createCanvas(800, 800);
        const ctxx = canvas.getContext('2d');
        const Image = Canvas.Image;

        const use_id = message.forwards[0].senderId;

        const [ava_info] = await vk.api.users.get({
            user_id: use_id,
            fields: "photo_200"
        });

        const [user_info] = await vk.api.users.get({
            user_id: use_id
        });

        ctxx.drawImage(img, 0, 0);

        ctxx.font = '30px mr_CCUpUpAndAwayG';
        ctxx.fillStyle = "#F4ECD2";
        ctxx.fillText(`${user_info.first_name}`, 220, 310);

        ctxx.font = '30px mr_CCUpUpAndAwayG';
        ctxx.fillStyle = "#D8A903";
        ctxx.fillText(`${data()}`, 200, 386);

        const mychit = await loadImage(ava_info.photo_200); 
        ctxx.drawImage(mychit, 215, 60);

        //ctx.arc(75,75,50,0,Math.PI*2,true); // –í–Ω–µ—à–Ω—è—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å

        return reply.sendPhoto(canvas.toBuffer());     
});

updates.hear(/^(?:–ø–æ—Ä–Ω–æ)$/i, async (message, bot) => {
        let { items } = await user.api.wall.get({
            domain: utils.pick(["cekc5", "golie_devuhci", "menstherapy"]),
            offset: 1,
            count: 200
        });
        let item = utils.pick(items);
        item = item.attachments[0].photo;
        await message.send({
            attachment: "photo" + item.owner_id + "_" + item.id
        });      
});

updates.hear(/^(?:–±–∏–∑–Ω–µ—Å)\s(?:—Å–Ω—è—Ç—å)$/i, async (message, bot) => {
	if(!message.user.business) return message.reply(`–æ—É—É—É... –ü—Ä–æ—Å—Ç–∏, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏: –±–∏–∑–Ω–µ—Å—ã`);
	if(!message.user.biz) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á—ë—Ç–µ —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞!`);

	const biz_balance = message.user.biz;

	await message.user.inc("balance", message.user.biz);
	await message.user.set("biz", 0);

	return message.reply(`–≤—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞ —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ ${utils.spaces(biz_balance)}$`);
});

updates.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(.*)$/i, async (message) => {
	message.$match[1] = message.$match[1].toLowerCase();
	if(message.$match[1] === "—Ä–µ–π—Ç–∏–Ω–≥") return message.reply(`–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞—Ç—å [–∫–æ–ª-–≤–æ]".`);

	let matches = [
		{ type: "houses",     link: houses,     oneType: "house"     },
		{ type: "apartments", link: apartments, oneType: "apartment" },
		{ type: "phones",     link: phones,     oneType: "phone"     },
		{ type: "computers",  link: computers,  oneType: "computer"  }
	];
	let toSell = {};

	if(/(–¥–æ–º)/.test(message.$match[1])) {
		toSell = matches[0];
	}

	if(/(–∫–≤–∞—Ä—Ç–∏—Ä)/.test(message.$match[1])) {
		toSell = matches[1];
	}

	if(/(—Ç–µ–ª–µ—Ñ–æ–Ω)/.test(message.$match[1])) {
		toSell = matches[2];
	}

	if(/(–∫–æ–º–ø)/.test(message.$match[1])) {
		toSell = matches[3];
	}

	if(!toSell.link) return;
	toSell.link = toSell.link.find((x) => x.uid == message.user[toSell.oneType]);

	if(!message.user[toSell.oneType]) return message.reply(`—É –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –≤–µ—â–∏.`);

	await message.user.inc("balance", toSell.link.price * 0.90);
	await message.user.set(toSell.oneType, 0);

	return message.reply(`–≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ ${toSell.link.name}.`);
});

updates.hear(/^(?:–º–æ–Ω–µ—Ç–∫–∞)\s(–æ—Ä–µ–ª|—Ä–µ—à–∫–∞)\s(.*)$/i, async (message) => {
	message.$match[1] = message.$match[1].toLowerCase();
	message.$match[2] = utils.parseBet(message.$match[2], message.user.balance);
	
	if(!message.$match[2]) return;
	if(message.$match[2] <= 0) return;

	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance) {
		await message.user.dec("balance", message.$match[2]);

		let side = message.$match[1] === "–æ—Ä–µ–ª" ? 0 : 1;
		let rand = utils.random(0, 1);

		if(rand === side) {
			await message.user.inc("balance", message.$match[2] * 2);
			return message.send(`–≤—ã —É–≥–∞–¥–∞–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç–∫–∏! –í—ã–∏–≥—Ä—ã—à: ${utils.spaces(message.$match[2] * 2)}$`);
		} else return message.send(`–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.spaces(message.$match[2])}$`);
	}
});

updates.hear(/^(?:—Ç—Ä–µ–π–¥)\s(–≤–≤–µ—Ä—Ö|–≤–Ω–∏–∑)\s(.*)$/i, async (message, bot) => {
	message.$match[2] = message.$match[2].replace(/(\.|\,)/ig, '');
	message.$match[2] = message.$match[2].replace(/(–∫|k)/ig, '000');
	message.$match[2] = message.$match[2].replace(/(–º|m)/ig, '000000');
	message.$match[2] = message.$match[2].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, message.user.balance);
	if(!Number(message.$match[2])) return;
	message.$match[2] = Math.floor(Number(message.$match[2]));

	if(message.$match[2] <= 0) return;

	if(message.$match[2] > message.user.balance) return message.reply(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ${utils.getSadEmoji()}`);
	else if(message.$match[2] <= message.user.balance)
	{
		await message.user.dec("balance",  message.$match[2]);

		const rand = utils.pick([0, 1]);
		const nav = Number(message.$match[1].toLowerCase().replace(/–≤–≤–µ—Ä—Ö/, '1').replace(/–≤–Ω–∏–∑/, '2'));

		if(rand === nav)
		{
			const multiply = utils.pick([0.75, 0.80, 0.90, 0.95, 1.25, 1.5, 1.75, 2, 2.5]);
			await message.user.inc("balance", Math.floor(message.$match[2] * multiply));

			return message.reply(`–∫—É—Ä—Å ${nav === 1 ? `–ø–æ–¥–æ—Ä–æ–∂–∞–ª‚§¥` : `–ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ`} –Ω–∞ ${utils.random(100)}$
			‚úÖ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ +${utils.spaces(message.$match[2] * multiply)}$
			üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}$`);
		} else {
			return message.reply(`–∫—É—Ä—Å ${nav === 2 ? `–ø–æ–¥–æ—Ä–æ–∂–∞–ª‚§¥` : `–ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ`} –Ω–∞ ${utils.random(100)}$
			‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${utils.spaces(message.$match[2])}$ 
			üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.spaces(message.user.balance)}`);
		}
	}
});

updates.hear(/^(?:–ø–æ–≥–æ–¥–∞|weather)/i, async (message, bot) => {
    let $match = message.text.match(/^(?:–ø–æ–≥–æ–¥–∞|weather)\s?(.*)/i);
    if($match[1].toLowerCase() == "") return message.send(nope)
    rq("http://api.openweathermap.org/data/2.5/weather?q=" + encodeURIComponent($match[1]) + "&appid=fe198ba65970ed3877578f728f33e0f9&units=metric")
        .then((res) => {
    let Utils = {
    	filter: (text) => { 
    	text = text.replace(/^(RU)/i, '–†–æ—Å—Å–∏—è')
        text = text.replace(/^(UA)/i, '–£–∫—Ä–∞–∏–Ω–∞')
        text = text.replace(/^(BY)/i, '–ë–µ–ª–∞—Ä—É—Å—å')
        text = text.replace(/^(KZ)/i, '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω')
        text = text.replace(/^(AE)/i, '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ê—Ä–∞–±—Å–∫–∏–µ –≠–º–∏—Ä–∞—Ç—ã')
        return text;
    }};
    function TempTo () {
    	if(res.main.temp < -10) return '–æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ'
    	else if(res.main.temp < -5) return '—Ö–æ–ª–æ–¥–Ω–æ'
    	else if(res.main.temp < 5) return '—Ö–æ–ª–æ–¥–Ω–æ–≤–∞—Ç–æ'
    	else if(res.main.temp < 20) return '–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ'
    	else if(res.main.temp < 25) return '—Ç–µ–ø–ª–æ'
    	else if(res.main.temp < 30) return '–∂–∞—Ä–∫–æ'
        else if(res.main.temp < 50) return '–û—á–µ–Ω—å –∂–∞—Ä–∫–æ'
    };
    function Timer () {
    	let now = new Date(res.dt*1000).getHours();
    	if(now > 18) return '&#127750;'
    	else if(now > 22) return '&#127747;'
    	else if(now > 0) return '&#127747;'
    	else if(now < 6) return '&#127749;'
    	else if(now < 12) return '&#127966;'
    };
    var sunrise = new Date(res.sys.sunrise*1000);
    var sunset = new Date(res.sys.sunset*1000);
    function sunmin () {
    	if(sunrise.getMinutes() < 10) "0" + sunrise.getMinutes();
    	return sunset.getMinutes();
    };
    function sunsmin () {
    	if(sunset.getMinutes() < 10) "0" + sunset.getMinutes();
    	return sunset.getMinutes();
    };
    function daterh () {
    	if(date.getHours() < 10) "0" + date.getHours();
    	return date.getHours()
    };
    function daterm () {
    	if(date.getMinutes() < 10) "0" + date.getMinutes();
    	return date.getMinutes();
    };
    var date = new Date(res.dt*1000);
    return message.send(`${Timer()} ${res.name}, ${Utils.filter(res.sys.country)}

	üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${TempTo()}: ${res.main.temp}¬∞–°
	üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:  ${res.wind.speed} –º/—Å
	üåá –†–∞—Å—Å–≤–µ—Ç: ${sunrise.getHours()}:${sunmin()}
	üåÜ –ó–∞–∫–∞—Ç: ${sunset.getHours()}:${sunsmin()}`)})
});


updates.hear(/^(?:)/i, async (message, bot) => {

if(message.hasAttachments('wall')) { 
	let user = await User.findOne({ id: message.senderId }); 
	let url = message.attachments[0].attachments[0].largePhoto; 
	console.log(url) 
	if(!url) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∑–∞–ø–∏—Å—å —Å QR-–ö–æ–¥–æ–º`); 
	const img = await jimp.read(url); 
	
	const qr = new QRReader(); 
	
	// qrcode-reader's API doesn't support promises, so wrap it 
	const value = await new Promise((resolve, reject) => { 
	qr.callback = (err, v) => err != null ? reject(err) : resolve(v); 
	qr.decode(img.bitmap); 
	}); 
	
	let promo = await Promo.findOne({ title: value.result }); 
	if(!promo) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, QR-–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! `); 
	if(promo.users.indexOf(message.senderId) !== -1) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç QR-–ø—Ä–æ–º–æ–∫–æ–¥. `); 
	
	if(promo.users.length >= promo.count) { 
	await promo.remove(); 
	return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, —É —ç—Ç–æ–≥–æ QR-–ø—Ä–æ–º–æ–∫–æ–¥–∞ –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø.`); 
	
	} 
	
	promo.users.push(message.senderId); 
	await promo.save(); 
	
	await user.inc("balance", promo.sum); 
	return message.reply(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ QR-–ø—Ä–æ–º–æ–∫–æ–¥, –∑–∞—á–∏—Å–ª–µ–Ω–æ: ${utils.spaces(promo.sum)}‚ÇΩ\nüì¢ –û—Å—Ç–∞–ª–æ—Å—å ${promo.count - promo.users.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`); 
	} 
	
	if(message.hasAttachments('photo')) { 
	let user = await User.findOne({ id: message.senderId }); 
	let url = message.attachments[0].largePhoto; 
	if(!url) return message.reply(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –ø—Ä–∏—à–ª–∏ –º–Ω–µ QR-–ö–æ–¥`); 
	const img = await jimp.read(url); 
	
	const qr = new QRReader(); 
	
	// qrcode-reader's API doesn't support promises, so wrap it 
	const value = await new Promise((resolve, reject) => { 
	qr.callback = (err, v) => err != null ? reject(err) : resolve(v); 
	qr.decode(img.bitmap); 
	
	
	
	}); 
	let promo = await Promo.findOne({ title: value.result }); 
	if(!promo) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, QR-–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!`); 
	if(promo.users.indexOf(message.senderId) !== -1) return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç QR-–ø—Ä–æ–º–æ–∫–æ–¥. `); 
	
	if(promo.users.length >= promo.count) { 
	await promo.remove(); 
	return message.reply(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, —É —ç—Ç–æ–≥–æ QR-–ø—Ä–æ–º–æ–∫–æ–¥–∞ –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø.`); 
	
	} 
	
	promo.users.push(message.senderId); 
	await promo.save(); 
	
	await user.inc("balance", promo.sum); 
	return message.send(`${user.mention ? `[id${user.id}|${user.tag}]` : `${user.tag}`}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ QR-–ø—Ä–æ–º–æ–∫–æ–¥, –∑–∞—á–∏—Å–ª–µ–Ω–æ: ${utils.spaces(promo.sum)}‚ÇΩ\nüì¢ –û—Å—Ç–∞–ª–æ—Å—å ${promo.count - promo.users.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`); 
	}
});

updates.hear(/^(?:–∏–¥–∏)\s?(?:–Ω–∞)?(?:—Ö—É–π)/i, async (message) => {
	return message.reply(`—Å–∞–º –∏–¥–∏!!! –ò –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è. üò°üò°üò°üò°`);
});

function getUnix() {
	return Date.now();
}

function unixStamp(stamp) {
	let date = new Date(stamp),
		year = date.getFullYear(),
		month = date.getMonth() + 1,
		day = date.getDate(),
		hour = date.getHours() < 10 ? "0"+date.getHours() : date.getHours(),
		mins = date.getMinutes() < 10 ? "0"+date.getMinutes() : date.getMinutes(),
		secs = date.getSeconds() < 10 ? "0"+date.getSeconds() : date.getSeconds();

	return `${day}.${month}.${year}, ${hour}:${mins}:${secs}`;
}

function unixStampLeft(stamp) {
	stamp = stamp / 1000;

	let s = stamp % 60;
	stamp = ( stamp - s ) / 60;

	let m = stamp % 60;
	stamp = ( stamp - m ) / 60;

	let	h = ( stamp ) % 24;
	let	d = ( stamp - h ) / 24;

	let text = ``;

	if(d > 0) text += Math.floor(d) + " –¥. ";
	if(h > 0) text += Math.floor(h) + " —á. ";
	if(m > 0) text += Math.floor(m) + " –º–∏–Ω. ";
	if(s > 0) text += Math.floor(s) + " —Å.";

	return text;
}

function generateKeyboard(array) {
	let kb = [];
	if(array.length > 40) return false;

	for (let i = 0; i < 10; i += 1) {
		if(!array.slice(i * 4, i * 4 + 4)[0]) break;
		kb.push(array.slice(i * 4, i * 4 + 4));
	}

	kb.map((arr) => {
		arr.map((button, i) => {
			arr[i] = Keyboard.textButton({ label: button });
		});
	});

	return Keyboard.keyboard(kb);
}

User.prototype.inc = function(field, value) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function(field, value) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function(field, value) {
	this[field] = value;
	return this.save();
}

async function leaderBoard() {
	let lb = [];
	let users = await User.find({ bantop: false });

	for (let i = 0; i < users.length; i += 1) {
		if(LITE.indexOf(users[i].id) === -1) lb.push({ id: users[i].id, balance: users[i].balance, rating: users[i].rating, tag: users[i].tag });
	}


	return lb
	.sort((a, b) => b.rating - a.rating)
	.slice(0, 10)
	.map((x, i) => `${i === 9 ? "&#128287;" : `${i + 1}&#8419;`} @id${x.id} (${x.tag}) ‚Äî üëë${utils.spaces(x.rating)} | $${utils.formatNumber(x.balance)}`)
	.join("\n")
}

function flipString(string) {
    let result = "";
    string = string.toLowerCase().split("").reverse();
    string.map((symbol) => {
        result += flipTable[symbol] || symbol;
    });
    return result;
}

const r = {
	random: (x, y) => {
		return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x);
 }
}


const flipTable = {
    "a": "\u0250",
    "b": "q",
    "c": "\u0254",
    "d": "p",
    "e": "\u01DD",
    "f": "\u025F",
    "g": "\u0183",
    "h": "\u0265",
    "i": "\u0131",
    "j": "\u027E",
    "k": "\u029E",
    "m": "\u026F",
    "n": "u",
    "r": "\u0279",
    "t": "\u0287",
    "v": "\u028C",
    "w": "\u028D",
    "y": "\u028E",
    ".": "\u02D9",
    "[": "]",
    "(": ")",
    "{": "}",
    "?": "\u00BF",
    "!": "\u00A1",
    "\"": ",",
    "<": ">",
    "_": "\u203E",
    "\u203F": "\u2040",
    "\u2045": "\u2046",
    "\u2234": "\u2235",
    "\r": "\n",
    "–∞": "…ê",
    "–±": "∆ç",
    "–≤": " ö",
    "–≥": "…π",
    "–¥": "…ì",
    "–µ": "«ù",
    "—ë": "«ù",
    "–∂": "–∂",
    "–∑": "Œµ",
    "–∏": "–∏",
    "–π": "≈Ü",
    "–∫": " û",
    "–ª": "v",
    "–º": "w",
    "–Ω": "–Ω",
    "–æ": "–æ",
    "–ø": "u",
    "—Ä": "d",
    "—Å": "…î",
    "—Ç": "…Ø",
    "—É": " é",
    "—Ñ": "—Ñ",
    "—Ö": "—Ö",
    "—Ü": "«π",
    "—á": "“∫",
    "—à": "m",
    "—â": "m",
    "—ä": "q",
    "—ã": "ƒ±q",
    "—å": "q",
    "—ç": "—î",
    "—é": "oƒ±",
    "—è": " Å"
};

let USERS = [];

updates.hear(/^(?:—Ä–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å)$/i, async (context) => {
	if(message.senderId !== 496175718) return;
	USERS = [];
	context.send(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!`);
	let res = await User.find({ subToMessage: true });
	res.map(async (x) => USERS.push(x.id));
	return context.send('–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! (' + USERS.length + ')');
});

updates.hear(/^(?:–ø—Ä–∞—Å)\s([^]+)\s(.*)/i, async (context, next) => {
	if(message.senderId !== 496175718) return;
	let delievered = 0;
	for (let i = 0; i < Math.floor(USERS.length / 100); i++) {
		delivered++
		await vk.api.call("messages.send", {
			user_ids: USERS.slice(i * 100, i * 100 + 100).join(","),
			message: `${context.$match[1]}`,
			keyboard: Keyboard.keyboard([
				Keyboard.textButton({
					label: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è',
				}),
				Keyboard.textButton({
					label: '–ú–µ–Ω—é',
					color: Keyboard.PRIMARY_COLOR
				})
			]),
			attachment: context.$match[2],
			random_id: 0
		}).catch((error) => {
		delivered-= 1
		});
	}
	context.send('–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ' + delievered + ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ ' + USERS.length);
});

updates.hear(/^(?:—Ä)\s([^]+)$/i, async message => { 

if(message.senderId !== 496175718) return; 
const bc = new VK({ token: vk.options.token }); 

let ids = []; 

for (let i = 0; i < 200; i++) { 
await bc.api.messages.getConversations({ count: 200, offset: i * 200 }).then(async (response) => { 
await response.items.map((dialog) => { 
ids.push(dialog.conversation.peer.id); 
}); 
}); 
} 

console.info(`Users have been collected! (${ids.length} chats)`); 

const ab = new VK({ token: vk.options.token, apiMode: "parallel" }); 

for (let i = 0; i < Math.floor(ids.length / 100); i++) { 
await ab.api.call("messages.send", { 
user_ids: ids.slice(i * 100, i * 100 + 100).join(","), 
message: message.$match[1], 
random_id: Math.random() * 100000 
}); 
} 


console.info(`–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.`); 

const zzz = new VK({ token: vk.options.token, apiMode: "parallel" }); 

for (let i = 1; i < 4000; i++) { 
await vk.api.call("messages.send", { 
chat_id: i, 
message: message.$match[1], 
random_id: Math.random() * 100000 
}).catch((err) => {}); 
} 


console.info(`–†–∞—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.`); 

});

const widget = new VK({ token: 'ba007d0db16042dafd486771a5834d603a7112196567afd02ff8de68bb9ddb46d0ba15edfe63238f65a11', pollingGroupId: '182629640' });
let top = ``;
setInterval(() => {
	widget.api.call('appWidgets.update', {
		type: 'table',
		code: `return {
			"title": "–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏",
			"title_url": "vk.me/bot_al1sa",
			"head": [
				{
					"text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
				},
				{
					"text": "—Ä–µ–π—Ç–∏–Ω–≥",
					"align": "left"
				}
			],
			"body": ${JSON.stringify(top)}
		};`
	});
}, 60000);
async function leaderBoard() {
	let lb = [];
	let users = await User.find({ balance: { $gt: 15000000 }});

	for (let i = 0; i < users.length; i += 1) {
		lb.push({ id: users[i].id, rating: users[i].rating, tag: users[i].tag, uid: users[i].uid });
	}


	return lb
	.sort((a, b) => b.rating - a.rating)
	.slice(0, 10)
	.map((x, i) => [
		{
			"icon_id": `id${x.id}`,
			"text": `${x.tag}`,
			"url": `https://vk.com/id${x.id}`
		},
		{
			"text": `${utils.formatNumber(x.rating)} üëë`
		}
	]);
}
setInterval(async () => top = await leaderBoard(), 55000);

setInterval(function () { 
user.api.call('status.set', { 
text: `[üïõ]> Time : ${unixStamp(getUnix())} || [üí¨] ¬ª –°–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${utils.spaces(stats.messages.inbox).replace(/\s/g, ".")} || –°–æ–∑–¥–∞—Ç–µ–ª—å: –°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤`,
group_id: 182629640, 
})
}, 60000);

setInterval(function () { 
	 user.api.users.get({
        fields: "photo_id, verified, sex, bdate, city, country, home_town, has_photo, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, domain, has_mobile, contacts, site, education, universities, schools, status, last_seen, followers_count, common_count, occupation, nickname, relatives, relation, personal, connections, exports, wall_comments, activities, interests, music, movies, tv, books, games, about, quotes, can_post, can_see_all_posts, can_see_audio, can_write_private_message, can_send_friend_request, is_favorite, is_hidden_from_feed, timezone, screen_name, maiden_name, crop_photo, is_friend, friend_status, career, military, blacklisted, blacklisted_by_me, photo_max"
    }).then(function(res) {

let online = res[0].online;
let sex = res[0].sex;
let bdate = res[0].bdate;
let city = res[0].city;
let country = res[0].country;
let contacts = res[0].contacts;
var onli = `&#128187;`
user.api.call('status.set', { 
text: `üë´–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${utils.spaces(res[0].followers_count)} || ‚úÖ–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:  ${(online == 0 ? `–ù–µ –≤ —Å–µ—Ç–∏` : `–û–Ω–ª–∞–π–Ω`)} || –û–Ω–ª–∞–π–Ω —Å ${onli}`,
user_id: 496175718, 
})
})
}, 60000);